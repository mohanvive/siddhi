{
    "docs": [
        {
            "location": "/", 
            "text": "WSO2 Siddhi\n\n\nSiddhi is a java library that listens to events from data streams, detect complex conditions described via a \nStreaming\n SQL language\n, and trigger actions. It can be used to do both \nStream Processing\n and \n \nComplex Event Processing\n.  \n\n\nOverview\n\n\n\n\n\n\nIt can be used for;\n\n\n\n\nData preprocessing\n\n\nGenerate alerts based on thresholds\n\n\nCalculate aggregations over a short window or a long time period\n\n\nJoining multiple data streams\n\n\nData correlation while finding missing and erroneous events\n\n\nInteract streaming data with databases\n\n\nDetecting temporal event patterns\n\n\nTracking (something over space or time)\n\n\nTrend analysis (rise, fall, turn, tipple bottom)\n\n\nReal-time predictions with existing and online machine learning models\n\n\nAnd many more ... \nPatterns of Streaming Realtime Analytics\n\n\n\n\nSiddhi is free and open source, under \nApache Software License v2.0\n.\n\n\nGet Started!\n\n\nGet started with Siddhi in few minutes by following \nSiddhi Quick Start Guide\n\n\nWhy use Siddhi ?\n\n\n\n\nFast, that \nUBER\n \nuse it to process 20 Billion events per day (300,000 events per second). \n\n\nLightweight (\n2MB), embeddable in Android and RaspberryPi\n\n\nHas 40+ \nSiddhi Extensions\n\n\n60+ companies including many Fortune 500 companies use Siddhi in production, following are some; \n\n\nWSO2 use Siddhi in their products such as \nWSO2 Data Analytics Server\n \n   and \nWSO2 Stream Processor\n to provide stream processing capabilities. \n   Uses it as the \nedge analytics\n library of \nWSO2 IoT Server\n, \n   core of \nWSO2 API Manager\n's throttling, and core of \n   \nWSO2 products'\n analytics.\n\n\nUBER\n for fraud analytics\n\n\nApache Eagle\n use Siddhi as a policy engine\n\n\n\n\n\n\nSolutions based on Siddhi have been finalists at \nACM DEBS Grand Challenge Stream Processing competitions in 2014, 2015, 2016, 2017\n.\n\n\nBeen basis of many academic research projects and have \n60+ citations\n. \n\n\n\n\nIf you also use Siddhi, we would love to hear more. \n\n\nTry Siddhi with \nWSO2 Stream Processor\n\n\nWSO2 Stream Processor\n is a server version of Siddhi that's also released under \n \nApache Software License v2.0\n. It was a Strong Performer in \nThe Forrester Wave: Big Data Streaming Analytics, Q1 2016\n \n (\nReport\n) \nand a \nCool Vendors in Internet of Things Analytics, 2016\n. \n\n\nTo get following capabilities by using \nWSO2 Stream Processor\n :  \n\n\n\n\nSiddhi Query Editor\n \n\n\nSiddhi Debugger\n\n\nEvent Simulator\n \n\n\nRun Siddhi as a Server with High Availability and Scalability\n\n\nMonitoring support for Siddhi\n\n\nRealtime dashboard \n\n\nBusiness user friendly query generation and deployment\n\n\n\n\nThere are domain specific solutions built using Siddhi, including \nFraud Detection, Stock Market Surveillance, Location analytics, Proximity Marketing, Contextual Recommendation, Ad Optimization, Operational Analytics, and Detecting Chart Patterns\n. \n\n\nIf you want more information please contact us via \nhttp://wso2.com/support/\n.\n\n\nFeatures\n\n\n\n\ncron\n \n(\n(Window)\n)\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\nexternalTimeBatch\n \n(\n(Window)\n)\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\nexternalTime\n \n(\n(Window)\n)\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\nfrequent\n \n(\n(Window)\n)\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\nlengthBatch\n \n(\n(Window)\n)\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\nlength\n \n(\n(Window)\n)\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\nlossyFrequent\n \n(\n(Window)\n)\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\nsort\n \n(\n(Window)\n)\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\ntimeBatch\n \n(\n(Window)\n)\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\ntimeLength\n \n(\n(Window)\n)\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\ntime\n \n(\n(Window)\n)\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\ncast\n \n(\n(Function)\n)\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\ncoalesce\n \n(\n(Function)\n)\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\nconvert\n \n(\n(Function)\n)\nConverts the first input parameter according to the convertedTo parameter.\n\n\ncurrentTimeMillis\n \n(\n(Function)\n)\nReturns the current timestamp of siddhi application in milliseconds.\n\n\ndefault\n \n(\n(Function)\n)\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\neventTimestamp\n \n(\n(Function)\n)\nReturns the timestamp of the processed event.\n\n\nifThenElse\n \n(\n(Function)\n)\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\ninstanceOfBoolean\n \n(\n(Function)\n)\nChecks whether the parameter is an instance of Boolean or not.\n\n\ninstanceOfDouble\n \n(\n(Function)\n)\nChecks whether the parameter is an instance of Double or not.\n\n\ninstanceOfFloat\n \n(\n(Function)\n)\nChecks whether the parameter is an instance of Float or not.\n\n\ninstanceOfInteger\n \n(\n(Function)\n)\nChecks whether the parameter is an instance of Integer or not.\n\n\ninstanceOfLong\n \n(\n(Function)\n)\nChecks whether the parameter is an instance of Long or not.\n\n\ninstanceOfString\n \n(\n(Function)\n)\nChecks whether the parameter is an instance of String or not.\n\n\nmaximum\n \n(\n(Function)\n)\nReturns the maximum value of the input parameters.\n\n\nminimum\n \n(\n(Function)\n)\nReturns the minimum value of the input parameters.\n\n\nUUID\n \n(\n(Function)\n)\nGenerates a UUID (Universally Unique Identifier).\n\n\nlog\n \n(\n(Stream Processor)\n)\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\navg\n \n(\n(Aggregate Function)\n)\nCalculates the average for all the events.\n\n\ncount\n \n(\n(Aggregate Function)\n)\nReturns the count of all the events.\n\n\ndistinctCount\n \n(\n(Aggregate Function)\n)\nReturns the count of distinct occurrences for a given arg.\n\n\nmax\n \n(\n(Aggregate Function)\n)\nReturns the maximum value for all the events.\n\n\nmaxForever\n \n(\n(Aggregate Function)\n)\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nmin\n \n(\n(Aggregate Function)\n)\nReturns the minimum value for all the events.\n\n\nminForever\n \n(\n(Aggregate Function)\n)\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\nstdDev\n \n(\n(Aggregate Function)\n)\nReturns the calculated standard deviation for all the events.\n\n\nsum\n \n(\n(Aggregate Function)\n)\nReturns the sum for all the events.\n\n\npol2Cart\n \n(\n(Stream Function)\n)\nThe pol2Cart function calculating the cartesian coordinates x \n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\ninMemory\n \n(\n(Source)\n)\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\npassThrough\n \n(\n(Source Mapper)\n)\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\ninMemory\n \n(\n(Sink)\n)\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\npassThrough\n \n(\n(Sink Mapper)\n)\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\n\nSiddhi Versions\n\n\nFind the released Siddhi libraries from \nhere\n.\n\n\n \n\n\n\n\n\n\nActive development version of Siddhi\n : \nv4.0.0\n  \nbuilt on Java 8.\n \n\n\nSiddhi Query Guide\n for Siddhi v4.x.x\n\n\nArchitecture\n of Siddhi v4.x.x\n\n\n\n\n\n\nLatest Stable Release of Siddhi\n : \nv3.0.5\n \nbuilt on Java 7.\n\n\nSiddhi Query Guide\n for Siddhi v3.x.x\n\n\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n4.0.0-M107-SNAPSHOT\n.\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\nSiddhi Branch\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\nHow to Contribute\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\nFeel fee to play with the \nSiddhi source code\n and send your contributions as pull requests to \nmaster branch\n. \n\n\n\n\nContact us\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\nFor more details and support contact us via \nhttp://wso2.com/support/\n\n\n\n\nSupport\n\n\n\n\nWe are committed to ensuring support for Siddhi (with it's \nextensions\n) and \nWSO2 Stream Processor\n from development to production. \n\n\nOur unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n. \n\n\n\n\nSiddhi was joint research project initiated by WSO2 and University of Moratuwa, Sri Lanka.", 
            "title": "Welcome to WSO2 Siddhi"
        }, 
        {
            "location": "/#wso2-siddhi", 
            "text": "Siddhi is a java library that listens to events from data streams, detect complex conditions described via a  Streaming\n SQL language , and trigger actions. It can be used to do both  Stream Processing  and \n  Complex Event Processing .", 
            "title": "WSO2 Siddhi"
        }, 
        {
            "location": "/#overview", 
            "text": "It can be used for;   Data preprocessing  Generate alerts based on thresholds  Calculate aggregations over a short window or a long time period  Joining multiple data streams  Data correlation while finding missing and erroneous events  Interact streaming data with databases  Detecting temporal event patterns  Tracking (something over space or time)  Trend analysis (rise, fall, turn, tipple bottom)  Real-time predictions with existing and online machine learning models  And many more ...  Patterns of Streaming Realtime Analytics   Siddhi is free and open source, under  Apache Software License v2.0 .", 
            "title": "Overview"
        }, 
        {
            "location": "/#get-started", 
            "text": "Get started with Siddhi in few minutes by following  Siddhi Quick Start Guide", 
            "title": "Get Started!"
        }, 
        {
            "location": "/#why-use-siddhi", 
            "text": "Fast, that  UBER  \nuse it to process 20 Billion events per day (300,000 events per second).   Lightweight ( 2MB), embeddable in Android and RaspberryPi  Has 40+  Siddhi Extensions  60+ companies including many Fortune 500 companies use Siddhi in production, following are some;   WSO2 use Siddhi in their products such as  WSO2 Data Analytics Server  \n   and  WSO2 Stream Processor  to provide stream processing capabilities. \n   Uses it as the  edge analytics  library of  WSO2 IoT Server , \n   core of  WSO2 API Manager 's throttling, and core of \n    WSO2 products'  analytics.  UBER  for fraud analytics  Apache Eagle  use Siddhi as a policy engine    Solutions based on Siddhi have been finalists at  ACM DEBS Grand Challenge Stream Processing competitions in 2014, 2015, 2016, 2017 .  Been basis of many academic research projects and have  60+ citations .    If you also use Siddhi, we would love to hear more.", 
            "title": "Why use Siddhi ?"
        }, 
        {
            "location": "/#try-siddhi-with-wso2-stream-processor", 
            "text": "WSO2 Stream Processor  is a server version of Siddhi that's also released under \n  Apache Software License v2.0 . It was a Strong Performer in  The Forrester Wave: Big Data Streaming Analytics, Q1 2016  \n ( Report ) \nand a  Cool Vendors in Internet of Things Analytics, 2016 .   To get following capabilities by using  WSO2 Stream Processor  :     Siddhi Query Editor    Siddhi Debugger  Event Simulator    Run Siddhi as a Server with High Availability and Scalability  Monitoring support for Siddhi  Realtime dashboard   Business user friendly query generation and deployment   There are domain specific solutions built using Siddhi, including  Fraud Detection, Stock Market Surveillance, Location analytics, Proximity Marketing, Contextual Recommendation, Ad Optimization, Operational Analytics, and Detecting Chart Patterns .   If you want more information please contact us via  http://wso2.com/support/ .", 
            "title": "Try Siddhi with WSO2 Stream Processor"
        }, 
        {
            "location": "/#features", 
            "text": "cron   ( (Window) ) This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  externalTimeBatch   ( (Window) ) A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  externalTime   ( (Window) ) A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  frequent   ( (Window) ) This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  lengthBatch   ( (Window) ) A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  length   ( (Window) ) A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  lossyFrequent   ( (Window) ) This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  sort   ( (Window) ) This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  timeBatch   ( (Window) ) A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  timeLength   ( (Window) ) A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  time   ( (Window) ) A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  cast   ( (Function) ) Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  coalesce   ( (Function) ) Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  convert   ( (Function) ) Converts the first input parameter according to the convertedTo parameter.  currentTimeMillis   ( (Function) ) Returns the current timestamp of siddhi application in milliseconds.  default   ( (Function) ) Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  eventTimestamp   ( (Function) ) Returns the timestamp of the processed event.  ifThenElse   ( (Function) ) Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  instanceOfBoolean   ( (Function) ) Checks whether the parameter is an instance of Boolean or not.  instanceOfDouble   ( (Function) ) Checks whether the parameter is an instance of Double or not.  instanceOfFloat   ( (Function) ) Checks whether the parameter is an instance of Float or not.  instanceOfInteger   ( (Function) ) Checks whether the parameter is an instance of Integer or not.  instanceOfLong   ( (Function) ) Checks whether the parameter is an instance of Long or not.  instanceOfString   ( (Function) ) Checks whether the parameter is an instance of String or not.  maximum   ( (Function) ) Returns the maximum value of the input parameters.  minimum   ( (Function) ) Returns the minimum value of the input parameters.  UUID   ( (Function) ) Generates a UUID (Universally Unique Identifier).  log   ( (Stream Processor) ) The logger stream processor logs the message with or without event for the given log priority.  avg   ( (Aggregate Function) ) Calculates the average for all the events.  count   ( (Aggregate Function) ) Returns the count of all the events.  distinctCount   ( (Aggregate Function) ) Returns the count of distinct occurrences for a given arg.  max   ( (Aggregate Function) ) Returns the maximum value for all the events.  maxForever   ( (Aggregate Function) ) This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  min   ( (Aggregate Function) ) Returns the minimum value for all the events.  minForever   ( (Aggregate Function) ) This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  stdDev   ( (Aggregate Function) ) Returns the calculated standard deviation for all the events.  sum   ( (Aggregate Function) ) Returns the sum for all the events.  pol2Cart   ( (Stream Function) ) The pol2Cart function calculating the cartesian coordinates x   y for the given theta, rho coordinates and adding them as new attributes to the existing events.  inMemory   ( (Source) ) In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  passThrough   ( (Source Mapper) ) Pass-through mapper passed events (Event[]) through without any mapping or modifications.  inMemory   ( (Sink) ) In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  passThrough   ( (Sink Mapper) ) Pass-through mapper passed events (Event[]) through without any mapping or modifications.", 
            "title": "Features"
        }, 
        {
            "location": "/#siddhi-versions", 
            "text": "Find the released Siddhi libraries from  here .       Active development version of Siddhi  :  v4.0.0    built on Java 8.    Siddhi Query Guide  for Siddhi v4.x.x  Architecture  of Siddhi v4.x.x    Latest Stable Release of Siddhi  :  v3.0.5   built on Java 7.  Siddhi Query Guide  for Siddhi v3.x.x", 
            "title": "Siddhi Versions"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  4.0.0-M107-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Siddhi Branch  Jenkins Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .  Feel fee to play with the  Siddhi source code  and send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .   For more details and support contact us via  http://wso2.com/support/", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for Siddhi (with it's  extensions ) and  WSO2 Stream Processor  from development to production.   Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.   For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .    Siddhi was joint research project initiated by WSO2 and University of Moratuwa, Sri Lanka.", 
            "title": "Support"
        }, 
        {
            "location": "/features/", 
            "text": "Features\n\n\n\n\nRetrieving Events \n\n\nFrom various data sources supporting various message formats\n\n\n\n\n\n\nMapping Events\n\n\nMapping events with various data formats to Stream for processing\n\n\nMapping streams to multiple data formats for publishing\n\n\n\n\n\n\nProcessing Streams\n\n\nFilter \n\n\nFiltering stream based on conditions\n\n\n\n\n\n\nWindow\n\n\nSupport for sliding and batch (tumbling) and many other type of windows  \n\n\n\n\n\n\nAggregation \n\n\nFor long running aggregations and aggregation over windows \n\n\nSupporting \nAvg\n, \nSum\n, \nMin\n, \nMax\n, etc\n\n\nAbility aggregate processing with \nGroup by\n and filter aggrigated data with \nHaving\n conditions\n\n\n\n\n\n\nIncremental summarisation\n\n\nSupport for processing and retrieving long running summarisations\n\n\n\n\n\n\nTable \n\n\nFor storing events for future processing and retrieving them on demand\n\n\nSupporting storage in in-memory, RDBMs, Solr, mongoDb, etc \n\n\n\n\n\n\nJoin\n\n\nJoining two streams based on conditions \n\n\nJoining a streams with table or incremental summarisation based on conditions  \n\n\nSupports Left, Right \n Full Outer Joins and Inner Joins\n\n\n\n\n\n\nPattern \n\n\nIdentifies event occurrence patterns among streams\n\n\nIdentify non occurrence of events\n\n\nSupports repetitive matches of event pattern occurrences with logical conditions and time bound\n\n\n\n\n\n\nSequence processing\n\n\nIdentifies continuous sequence of events from streams\n\n\nSupports zero to many, one to many, and zero to one condition\n\n\n\n\n\n\nPartitions\n\n\nGrouping queries and based on keywords and value ranges for isolated parallel processing\n\n\n\n\n\n\nScripting \n\n\nSupport writing scripts like JavaScript, Scala and R within Siddhi Queries\n\n\n\n\n\n\nProcess Based on event time\n\n\nWhole execution driven by the event time  \n\n\n\n\n\n\n\n\n\n\nPublishing Events \n\n\nTo various data sources with various message formats\n\n\nSupporting load balancing and failover data publishing \n\n\n\n\n\n\nSnapshot and restore\n\n\nSupport for periodic state persistence and restore capabilities for long running execution", 
            "title": "Features"
        }, 
        {
            "location": "/features/#features", 
            "text": "Retrieving Events   From various data sources supporting various message formats    Mapping Events  Mapping events with various data formats to Stream for processing  Mapping streams to multiple data formats for publishing    Processing Streams  Filter   Filtering stream based on conditions    Window  Support for sliding and batch (tumbling) and many other type of windows      Aggregation   For long running aggregations and aggregation over windows   Supporting  Avg ,  Sum ,  Min ,  Max , etc  Ability aggregate processing with  Group by  and filter aggrigated data with  Having  conditions    Incremental summarisation  Support for processing and retrieving long running summarisations    Table   For storing events for future processing and retrieving them on demand  Supporting storage in in-memory, RDBMs, Solr, mongoDb, etc     Join  Joining two streams based on conditions   Joining a streams with table or incremental summarisation based on conditions    Supports Left, Right   Full Outer Joins and Inner Joins    Pattern   Identifies event occurrence patterns among streams  Identify non occurrence of events  Supports repetitive matches of event pattern occurrences with logical conditions and time bound    Sequence processing  Identifies continuous sequence of events from streams  Supports zero to many, one to many, and zero to one condition    Partitions  Grouping queries and based on keywords and value ranges for isolated parallel processing    Scripting   Support writing scripts like JavaScript, Scala and R within Siddhi Queries    Process Based on event time  Whole execution driven by the event time        Publishing Events   To various data sources with various message formats  Supporting load balancing and failover data publishing     Snapshot and restore  Support for periodic state persistence and restore capabilities for long running execution", 
            "title": "Features"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/", 
            "text": "Siddhi Application can be written in a Streaming SQL language to process event streams and identify complex event occurrences.\n\n\nSiddhi Application can run \n\n\n\n\nBy embedding Siddhi as a Java library in your project\n\n\nOr with WSO2 Stream Processor\n\n\n\n\nCreating Siddhi Applications via WSO2 Stream Processor\n\n\nFor instructions to write and deploy a Siddhi application in WSO2 Stream Processor, see the \nWSO2 SP Quick Start Guide\n.\n\n\nUsing Siddhi as an Java Library\n\n\nTo use Siddhi as a library by embedding it in a Java project, follow the steps below:\n\n\nStep 1: Creating a Java Project\n\n\n\n\nCreate a Java project using Maven and include the following dependencies in its \npom.xml\n file.\n\n\n\n\n   \ndependency\n\n     \ngroupId\norg.wso2.siddhi\n/groupId\n\n     \nartifactId\nsiddhi-core\n/artifactId\n\n     \nversion\n4.x.x\n/version\n\n   \n/dependency\n\n   \ndependency\n\n     \ngroupId\norg.wso2.siddhi\n/groupId\n\n     \nartifactId\nsiddhi-query-api\n/artifactId\n\n     \nversion\n4.x.x\n/version\n\n   \n/dependency\n\n   \ndependency\n\n     \ngroupId\norg.wso2.siddhi\n/groupId\n\n     \nartifactId\nsiddhi-query-compiler\n/artifactId\n\n     \nversion\n4.x.x\n/version\n\n   \n/dependency\n\n   \ndependency\n\n     \ngroupId\norg.wso2.siddhi\n/groupId\n\n     \nartifactId\nsiddhi-annotations\n/artifactId\n\n     \nversion\n4.x.x\n/version\n\n   \n/dependency\n   \n\n\n\n\n\nAdd the following repository configuration to the same file.\n\n\n   \nrepositories\n\n     \nrepository\n\n         \nid\nwso2.releases\n/id\n\n         \nname\nWSO2 Repository\n/name\n\n         \nurl\nhttp://maven.wso2.org/nexus/content/repositories/releases/\n/url\n\n         \nreleases\n\n             \nenabled\ntrue\n/enabled\n\n             \nupdatePolicy\ndaily\n/updatePolicy\n\n             \nchecksumPolicy\nignore\n/checksumPolicy\n\n         \n/releases\n\n     \n/repository\n\n   \n/repositories\n\n\n\n\n\n\nNote\n: You can create the Java project using any method you prefer. The required dependencies can be downloaded from \nhere\n.\n* Create a new Java class in the Maven project.\n\n\nStep 2: Creating Siddhi Application\n\n\nA Siddhi application is a self contained execution entity that defines how data is captured, processed and sent out.  \n\n\n\n\nCreate a Siddhi Application by defining a stream definition E.g.\nStockEventStream\n defining the format of the incoming\n events, and by defining a Siddhi query as follows.\n\n\n\n\n  \nString\n \nsiddhiApp\n \n=\n \ndefine stream StockEventStream (symbol string, price float, volume long); \n \n+\n \n                     \n \n \n+\n\n                     \n@info(name = \nquery1\n) \n \n+\n\n                     \nfrom StockEventStream#window.time(5 sec)  \n \n+\n\n                     \nselect symbol, sum(price) as price, sum(volume) as volume \n \n+\n\n                     \ngroup by symbol \n \n+\n\n                     \ninsert into AggregateStockStream ;\n;\n\n\n\n\n\n\nThis Siddhi query groups the events by symbol and calculates aggregates such as the sum for price and sum of volume \n  for the last 5 seconds time window. Then it inserts the results into a stream named \nAggregateStockStream\n. \n\n\nStep 3: Creating Siddhi Application Runtime\n\n\nThis step involves creating a runtime representation of a Siddhi application.\n\n\nSiddhiManager\n \nsiddhiManager\n \n=\n \nnew\n \nSiddhiManager\n();\n\n\nSiddhiAppRuntime\n \nsiddhiAppRuntime\n \n=\n \nsiddhiManager\n.\ncreateSiddhiAppRuntime\n(\nsiddhiApp\n);\n\n\n\n\n\n\nThe Siddhi Manager parses the Siddhi application and provides you with an Siddhi application runtime. \nThis Siddhi application runtime can be used to add callbacks and input handlers such that you can \nprogrammatically invoke the Siddhi application.\n\n\nStep 4: Registering a Callback\n\n\nYou can register a callback to the Siddhi application runtime in order to receive the results once the events are processed. There are two types of callbacks:\n\n\n\n\nQuery callback\n: This subscribes to a query.\n\n\nStream callback\n: This subscribes to an event stream.\nIn this example, a Stream callback is added to the \nAggregateStockStream\n to capture the processed events.\n\n\n\n\nsiddhiAppRuntime\n.\naddCallback\n(\nAggregateStockStream\n,\n \nnew\n \nStreamCallback\n()\n \n{\n\n           \n@Override\n\n           \npublic\n \nvoid\n \nreceive\n(\nEvent\n[]\n \nevents\n)\n \n{\n\n               \nEventPrinter\n.\nprint\n(\nevents\n);\n\n           \n}\n\n       \n});\n\n\n\n\n\n\nHere, once the results are generated they are sent to the receive method of this callback. An event printer is added \ninside this callback to print the incoming events for demonstration purposes.\n\n\nStep 5: Sending Events\n\n\nIn order to programmatically send events from the stream you need to obtain it's an input handler as follows:\n\n\nInputHandler\n \ninputHandler\n \n=\n \nsiddhiAppRuntime\n.\ngetInputHandler\n(\nStockEventStream\n);\n\n\n\n\n\n\nUse the following code to start the Siddhi application runtime, send events and to shutdown Siddhi:\n\n\n//Start SiddhiApp runtime\n\n\nsiddhiAppRuntime\n.\nstart\n();\n\n\n\n//Sending events to Siddhi\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nIBM\n,\n \n100\nf\n,\n \n100L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nIBM\n,\n \n200\nf\n,\n \n300L\n});\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nWSO2\n,\n \n60\nf\n,\n \n200L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nWSO2\n,\n \n70\nf\n,\n \n400L\n});\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nGOOG\n,\n \n50\nf\n,\n \n30L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nIBM\n,\n \n200\nf\n,\n \n400L\n});\n\n\nThread\n.\nsleep\n(\n2000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nWSO2\n,\n \n70\nf\n,\n \n50L\n});\n\n\nThread\n.\nsleep\n(\n2000\n);\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nWSO2\n,\n \n80\nf\n,\n \n400L\n});\n\n\ninputHandler\n.\nsend\n(\nnew\n \nObject\n[]{\nGOOG\n,\n \n60\nf\n,\n \n30L\n});\n\n\nThread\n.\nsleep\n(\n1000\n);\n\n\n\n//Shutdown SiddhiApp runtime\n\n\nsiddhiAppRuntime\n.\nshutdown\n();\n\n\n\n//Shutdown Siddhi\n\n\nsiddhiManager\n.\nshutdown\n();\n\n\n\n\n\n\nWhen the events are sent, you can see the output logged by the event printer.\n\n\nFind the executable Java code of this example \nhere\n \n\n\nFor more code examples, see \nquick start samples for Siddhi\n.", 
            "title": "Quick Start Guide"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#creating-siddhi-applications-via-wso2-stream-processor", 
            "text": "For instructions to write and deploy a Siddhi application in WSO2 Stream Processor, see the  WSO2 SP Quick Start Guide .", 
            "title": "Creating Siddhi Applications via WSO2 Stream Processor"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#using-siddhi-as-an-java-library", 
            "text": "To use Siddhi as a library by embedding it in a Java project, follow the steps below:", 
            "title": "Using Siddhi as an Java Library"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-1-creating-a-java-project", 
            "text": "Create a Java project using Maven and include the following dependencies in its  pom.xml  file.       dependency \n      groupId org.wso2.siddhi /groupId \n      artifactId siddhi-core /artifactId \n      version 4.x.x /version \n    /dependency \n    dependency \n      groupId org.wso2.siddhi /groupId \n      artifactId siddhi-query-api /artifactId \n      version 4.x.x /version \n    /dependency \n    dependency \n      groupId org.wso2.siddhi /groupId \n      artifactId siddhi-query-compiler /artifactId \n      version 4.x.x /version \n    /dependency \n    dependency \n      groupId org.wso2.siddhi /groupId \n      artifactId siddhi-annotations /artifactId \n      version 4.x.x /version \n    /dependency      Add the following repository configuration to the same file.      repositories \n      repository \n          id wso2.releases /id \n          name WSO2 Repository /name \n          url http://maven.wso2.org/nexus/content/repositories/releases/ /url \n          releases \n              enabled true /enabled \n              updatePolicy daily /updatePolicy \n              checksumPolicy ignore /checksumPolicy \n          /releases \n      /repository \n    /repositories   Note : You can create the Java project using any method you prefer. The required dependencies can be downloaded from  here .\n* Create a new Java class in the Maven project.", 
            "title": "Step 1: Creating a Java Project"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-2-creating-siddhi-application", 
            "text": "A Siddhi application is a self contained execution entity that defines how data is captured, processed and sent out.     Create a Siddhi Application by defining a stream definition E.g. StockEventStream  defining the format of the incoming\n events, and by defining a Siddhi query as follows.      String   siddhiApp   =   define stream StockEventStream (symbol string, price float, volume long);    +  \n                          + \n                      @info(name =  query1 )    + \n                      from StockEventStream#window.time(5 sec)     + \n                      select symbol, sum(price) as price, sum(volume) as volume    + \n                      group by symbol    + \n                      insert into AggregateStockStream ; ;   This Siddhi query groups the events by symbol and calculates aggregates such as the sum for price and sum of volume \n  for the last 5 seconds time window. Then it inserts the results into a stream named  AggregateStockStream .", 
            "title": "Step 2: Creating Siddhi Application"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-3-creating-siddhi-application-runtime", 
            "text": "This step involves creating a runtime representation of a Siddhi application.  SiddhiManager   siddhiManager   =   new   SiddhiManager ();  SiddhiAppRuntime   siddhiAppRuntime   =   siddhiManager . createSiddhiAppRuntime ( siddhiApp );   The Siddhi Manager parses the Siddhi application and provides you with an Siddhi application runtime. \nThis Siddhi application runtime can be used to add callbacks and input handlers such that you can \nprogrammatically invoke the Siddhi application.", 
            "title": "Step 3: Creating Siddhi Application Runtime"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-4-registering-a-callback", 
            "text": "You can register a callback to the Siddhi application runtime in order to receive the results once the events are processed. There are two types of callbacks:   Query callback : This subscribes to a query.  Stream callback : This subscribes to an event stream.\nIn this example, a Stream callback is added to the  AggregateStockStream  to capture the processed events.   siddhiAppRuntime . addCallback ( AggregateStockStream ,   new   StreamCallback ()   { \n            @Override \n            public   void   receive ( Event []   events )   { \n                EventPrinter . print ( events ); \n            } \n        });   Here, once the results are generated they are sent to the receive method of this callback. An event printer is added \ninside this callback to print the incoming events for demonstration purposes.", 
            "title": "Step 4: Registering a Callback"
        }, 
        {
            "location": "/documentation/siddhi-quckstart-4.0/#step-5-sending-events", 
            "text": "In order to programmatically send events from the stream you need to obtain it's an input handler as follows:  InputHandler   inputHandler   =   siddhiAppRuntime . getInputHandler ( StockEventStream );   Use the following code to start the Siddhi application runtime, send events and to shutdown Siddhi:  //Start SiddhiApp runtime  siddhiAppRuntime . start ();  //Sending events to Siddhi  inputHandler . send ( new   Object []{ IBM ,   100 f ,   100L });  Thread . sleep ( 1000 );  inputHandler . send ( new   Object []{ IBM ,   200 f ,   300L });  inputHandler . send ( new   Object []{ WSO2 ,   60 f ,   200L });  Thread . sleep ( 1000 );  inputHandler . send ( new   Object []{ WSO2 ,   70 f ,   400L });  inputHandler . send ( new   Object []{ GOOG ,   50 f ,   30L });  Thread . sleep ( 1000 );  inputHandler . send ( new   Object []{ IBM ,   200 f ,   400L });  Thread . sleep ( 2000 );  inputHandler . send ( new   Object []{ WSO2 ,   70 f ,   50L });  Thread . sleep ( 2000 );  inputHandler . send ( new   Object []{ WSO2 ,   80 f ,   400L });  inputHandler . send ( new   Object []{ GOOG ,   60 f ,   30L });  Thread . sleep ( 1000 );  //Shutdown SiddhiApp runtime  siddhiAppRuntime . shutdown ();  //Shutdown Siddhi  siddhiManager . shutdown ();   When the events are sent, you can see the output logged by the event printer.  Find the executable Java code of this example  here    For more code examples, see  quick start samples for Siddhi .", 
            "title": "Step 5: Sending Events"
        }, 
        {
            "location": "/documentation/user-guide/", 
            "text": "User Guide\n\n\nUsing the Siddhi in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use Siddhi in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nAll \nSiddhi extensions\n are shipped by default with WSO2 Stream Processor.\n\n\n\n\n\n\nRefer the \nWSO2 SP Quick Start Guide\n for more information.\n\n\n\n\n\n\nUsing Siddhi as a \njava library\n\n\n\n\nTo embed Siddhi as a java library in your project add the following Siddhi libraries as maven dependencies to the \npom.xml\n file.\n\n\n\n\n    \ndependency\n\n      \ngroupId\norg.wso2.siddhi\n/groupId\n\n      \nartifactId\nsiddhi-core\n/artifactId\n\n      \nversion\n4.x.x\n/version\n\n    \n/dependency\n\n    \ndependency\n\n      \ngroupId\norg.wso2.siddhi\n/groupId\n\n      \nartifactId\nsiddhi-query-api\n/artifactId\n\n      \nversion\n4.x.x\n/version\n\n    \n/dependency\n\n    \ndependency\n\n      \ngroupId\norg.wso2.siddhi\n/groupId\n\n      \nartifactId\nsiddhi-query-compiler\n/artifactId\n\n      \nversion\n4.x.x\n/version\n\n    \n/dependency\n\n    \ndependency\n\n      \ngroupId\norg.wso2.siddhi\n/groupId\n\n      \nartifactId\nsiddhi-annotations\n/artifactId\n\n      \nversion\n4.x.x\n/version\n\n    \n/dependency\n    \n\n\n\n\n\nAdd the following repository configuration to the same file.\n\n\n   \nrepositories\n\n     \nrepository\n\n         \nid\nwso2.releases\n/id\n\n         \nname\nWSO2 Repository\n/name\n\n         \nurl\nhttp://maven.wso2.org/nexus/content/repositories/releases/\n/url\n\n         \nreleases\n\n             \nenabled\ntrue\n/enabled\n\n             \nupdatePolicy\ndaily\n/updatePolicy\n\n             \nchecksumPolicy\nignore\n/checksumPolicy\n\n         \n/releases\n\n     \n/repository\n\n   \n/repositories\n\n\n\n\n\n\n\n\nThe required dependencies can be downloaded from \nhere\n\n\nRefer the \nSiddhi Quick Start Guide\n for more how to setup and run a Siddhi Application.\n\n\n\n\nSystem Requirements\n\n\n\n\nMinimum memory - 500 MB (based on in-memory data stored for processing)\n\n\nProcessor      - Pentium 800MHz or equivalent at minimum\n\n\nJava SE Development Kit 1.8 (1.7 for 3.x version)\n\n\nTo build Siddhi from the Source distribution, it is necessary that you have\n   JDK 1.8 version (1.7 for 3.x version) or later and Maven 3.0.4 or later", 
            "title": "User Guide"
        }, 
        {
            "location": "/documentation/user-guide/#user-guide", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/documentation/user-guide/#using-the-siddhi-in-wso2-stream-processor", 
            "text": "You can use Siddhi in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     All  Siddhi extensions  are shipped by default with WSO2 Stream Processor.    Refer the  WSO2 SP Quick Start Guide  for more information.", 
            "title": "Using the Siddhi in WSO2 Stream Processor"
        }, 
        {
            "location": "/documentation/user-guide/#using-siddhi-as-a-java-library", 
            "text": "To embed Siddhi as a java library in your project add the following Siddhi libraries as maven dependencies to the  pom.xml  file.        dependency \n       groupId org.wso2.siddhi /groupId \n       artifactId siddhi-core /artifactId \n       version 4.x.x /version \n     /dependency \n     dependency \n       groupId org.wso2.siddhi /groupId \n       artifactId siddhi-query-api /artifactId \n       version 4.x.x /version \n     /dependency \n     dependency \n       groupId org.wso2.siddhi /groupId \n       artifactId siddhi-query-compiler /artifactId \n       version 4.x.x /version \n     /dependency \n     dependency \n       groupId org.wso2.siddhi /groupId \n       artifactId siddhi-annotations /artifactId \n       version 4.x.x /version \n     /dependency       Add the following repository configuration to the same file.      repositories \n      repository \n          id wso2.releases /id \n          name WSO2 Repository /name \n          url http://maven.wso2.org/nexus/content/repositories/releases/ /url \n          releases \n              enabled true /enabled \n              updatePolicy daily /updatePolicy \n              checksumPolicy ignore /checksumPolicy \n          /releases \n      /repository \n    /repositories    The required dependencies can be downloaded from  here  Refer the  Siddhi Quick Start Guide  for more how to setup and run a Siddhi Application.", 
            "title": "Using Siddhi as a java library"
        }, 
        {
            "location": "/documentation/user-guide/#system-requirements", 
            "text": "Minimum memory - 500 MB (based on in-memory data stored for processing)  Processor      - Pentium 800MHz or equivalent at minimum  Java SE Development Kit 1.8 (1.7 for 3.x version)  To build Siddhi from the Source distribution, it is necessary that you have\n   JDK 1.8 version (1.7 for 3.x version) or later and Maven 3.0.4 or later", 
            "title": "System Requirements"
        }, 
        {
            "location": "/documentation/siddhi-4.0/", 
            "text": "Siddhi Streaming SQL Guide 4.0\n\n\nIntroduction\n\n\nSiddhi Streaming SQL is designed to process event streams in a streaming manner, detect complex event occurrences, \nand notify them in real-time. \n\n\nSiddhi Application\n\n\nStreaming processing and Complex Event Processing rules can be written is Siddhi Streaming SQL and they can be put \ntogether as a \nSiddhiApp\n in a single file. \n\n\nPurpose\n\n\nEach Siddhi Application is an isolated processing unit that allows you to deploy and execute queries independent of other Siddhi applications in the system.\n\n\nThe following diagram depicts how \nevent flows\n work with some of the key Siddhi Streaming SQL elements \nof the Siddhi Application.\n\n\n\n\nBelow table provides brief description of a few key elements in the Siddhi Streaming SQL Language.\n\n\n\n\n\n\n\n\nElements\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nStream\n\n\nA logical series of events ordered in time with a uniquely identifiable name, and set of defined attributes with specific data types defining its schema.\n\n\n\n\n\n\nEvent\n\n\nAn event is associated with only one stream, and all events of that stream have an identical set of attributes that are assigned specific types (or the same schema). An event contains a timestamp and set of attribute values according to the schema.\n\n\n\n\n\n\nTable\n\n\nA structured representation of data stored with a defined schema. Stored data can be backed by \nIn-Memory\n, \nRDBMs\n, \nMongoDB\n, etc. to be accessed and manipulated at runtime.\n\n\n\n\n\n\nQuery\n\n\nA logical construct that processes events in streaming manner by combining existing streams and/or tables, and generates events to an output stream or table. A query consumes one or more input streams, and zero or one table. Then it processes these events in a streaming manner and publishes the output events to streams or tables for further processing or to generate notifications.\n\n\n\n\n\n\nSource\n\n\nA contract that consumes data from external sources (such as \nTCP\n, \nKafka\n, \nHTTP\n, etc)in the form of events, then converts each event (which can be in \nXML\n, \nJSON\n, \nbinary\n, etc. format) to a Siddhi event, and passes that to a Stream for processing.\n\n\n\n\n\n\nSink\n\n\nA contract that takes events arriving at a stream, maps them to a predefined data format (such as \nXML\n, \nJSON\n, \nbinary\n, etc), and publishes them to external endpoints (such as \nE-mail\n, \nTCP\n, \nKafka\n, \nHTTP\n, etc).\n\n\n\n\n\n\nInput Handler\n\n\nA mechanism to programmatically inject events into streams.\n\n\n\n\n\n\nStream/Query Callback\n\n\nA mechanism to programmatically consume output events from streams and queries.\n\n\n\n\n\n\nPartition\n\n\nA logical container that isolates the processing of queries based on partition keys. Here, a separate instance of queries is generated for each partition key to achieve isolation.\n\n\n\n\n\n\nInner Stream\n\n\nA positionable stream that connects portioned queries within their partitions, preserving isolation.\n\n\n\n\n\n\n\n\nGrammar\n\n\nAn element of Siddhi SQL can be composed together as a script in a Siddhi application, Here each construct must be separated \nby a semicolon \n( ; )\n as shown in the below syntax. \n\n\nsiddhi app\n  : \n        \napp annotation\n * \n        ( \nstream definition\n | \ntable definition\n | ... ) + \n        ( \nquery\n | \npartition\n ) +\n        ;\n\n\n\n\n\nStream\n\n\nA stream is a logical series of events ordered in time. Its schema is defined via the \nstream definition\n.\nA stream definition contains a unique name and a set of attributes with specific types and uniquely identifiable names within the stream.\nAll the events that are selected to be received into a specific stream have the same schema (i.e., have the same attributes in the same order). \n\n\nPurpose\n\n\nBy defining a schema it unifies common types of events together. This enables them to be processed via queries using their defined attributes in a streaming manner, and allow sinks and sources to map events to/from various data formats.\n\n\nSyntax\n\n\nThe syntax for defining a new stream is as follows.\n\n\ndefine\n \nstream\n \nstream\n \nname\n \n(\nattribute\n \nname\n \nattribute\n \ntype\n,\n \nattribute\n \nname\n \nattribute\n \ntype\n,\n \n...\n \n);\n\n\n\n\n\n\nThe following parameters are configured in a stream definition.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstream name\n\n\nThe name of the stream created. (It is recommended to define a stream name in \nPascalCase\n.)\n\n\n\n\n\n\nattribute name\n\n\nThe schema of an stream is defined by its attributes with uniquely identifiable attribute names. (It is recommended to define attribute names in \ncamalCase\n.)\n\n\n\n\n\n\nattribute type\n\n\nThe type of each attribute defined in the schema. \n This can be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n or \nOBJECT\n.\n\n\n\n\n\n\n\n\nExample\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\n\n\n\nThe above creates a stream named \nTempStream\n with the following attributes.\n\n\n\n\ndeviceID\n of type \nlong\n\n\nroomNo\n of type \nint\n \n\n\ntemp\n of type \ndouble\n \n\n\n\n\nSource\n\n\nSources receive events via multiple transports and in various data formats, and direct them into streams for processing.\n\n\nA source configuration allows you to define a mapping in order to convert each incoming event from its native data format to a Siddhi event. When customizations to such mappings are not provided, Siddhi assumes that the arriving event adheres to the predefined format based on the stream definition and the selected message format. \n\n\nPurpose\n\n\nSource allows Siddhi to consume events from external systems, and map the events to adhere to the associated stream. \n\n\nSyntax\n\n\nTo configure a stream that consumes events via a source, add the source configuration to a stream definition by adding the \n@source\n annotation with the required parameter values. \nThe source syntax is as follows:\n\n\n@\nsource\n(\ntype\n=\nsource_type\n,\n \nstatic\n.\noption\n.\nkey1\n=\nstatic_option_value1\n,\n \nstatic\n.\noption\n.\nkeyN\n=\nstatic_option_valueN\n,\n\n    \n@\nmap\n(\ntype\n=\nmap_type\n,\n \nstatic\n.\noption_key1\n=\nstatic_option_value1\n,\n \nstatic\n.\noption\n.\nkeyN\n=\nstatic_option_valueN\n,\n\n        \n@\nattributes\n(\n \nattributeN\n=\nattribute_mapping_N\n,\n \nattribute1\n=\nattribute_mapping_1\n)\n\n    \n)\n\n\n)\n\n\ndefine\n \nstream\n \nstream_name\n \n(\nattribute1\n \nType1\n,\n \nattributeN\n \nTypeN\n);\n\n\n\n\n\n\nThis syntax includes the following annotations.\n\nSource\n\n\nThe \ntype\n parameter of \n@source\n defines the source type that receives events. The other parameters to be configured \ndepends on the source type selected, some of the the parameters are optional. \n\n\nFor detailed information about the parameters see the documentation for the relevant source.\n\n\nThe following is the list of source types that are currently supported:\n\n\n\n\nHTTP\n \n(Only works in WSO2 Stream Processor)\n\n\nKafka\n\n\nTCP\n\n\nIn-memory\n\n\nWSO2Event\n\n\nEmail\n \n(Only works in WSO2 Stream Processor)\n\n\nJMS\n \n(Only works in WSO2 Stream Processor)\n\n\nFile\n \n(Only works in WSO2 Stream Processor)\n\n\nRabbitMQ\n\n\nMQTT\n\n\n\n\nSource Mapper\n\n\nEach \n@source\n configuration has a mapping denoted by the \n@map\n annotation that converts the incoming messages format to Siddhi events.\n\n\nThe \ntype\n parameter of the \n@map\n defines the map type to be used to map the data. The other parameters to be \nconfigured depends on the mapper selected. Some of these parameters are optional. \n\nFor detailed information about the parameters see the documentation for the relevant mapper.\n\n\n\n\nTip\n\n\nWhen the \n@map\n annotation is not provided, \n@map(type='passThrough')\n is used as default. This default mapper type can be used when source consumes Siddhi events and when it does not need any mappings.\n\n\n\n\nMap Attributes\n\n\n@attributes\n is an optional annotation used with \n@map\n to define custom mapping. When \n@attributes\n is not provided, each mapper\nassumes that the incoming events  adhere to its own default data format. By adding the \n@attributes\n annotation, you \ncan configure mappers to extract data from the incoming message selectively, and assign them to attributes. \n\n\nThere are two ways you can configure map attributes. \n\n\n\n\nDefining attributes as keys and mapping content as values in the following format: \n\n\n@attributes( attributeN='mapping_N', attribute1='mapping_1')\n \n\n\nDefining the mapping content of all attributes in the same order as how the attributes are defined in stream definition: \n\n\n@attributes( 'mapping_1', 'mapping_N')\n \n\n\n\n\nSupported Mapping Types\n\n\nThe following is a list of currently supported source mapping types:\n\n\n\n\nWSO2Event\n\n\nXML\n\n\nTEXT\n\n\nJSON\n\n\nBinary\n\n\nKey Value\n\n\n\n\nExample\n\n\nThis query receives events via the \nHTTP\n source in the \nJSON\n data format, and directs them to the \nInputStream\n stream for processing. \nHere the HTTP source is configured to receive events on all network interfaces on the \n8080\nport, on the \nfoo\n context, and \nit is secured via basic authentication.\n\n\n@\nsource\n(\ntype\n=\nhttp\n,\n \nreceiver\n.\nurl\n=\nhttp://0.0.0.0:8080/foo\n,\n \nis\n.\nbasic\n.\nauth\n.\nenabled\n=\ntrue\n,\n \n  \n@\nmap\n(\ntype\n=\njson\n))\n\n\ndefine\n \nstream\n \nInputStream\n \n(\nname\n \nstring\n,\n \nage\n \nint\n,\n \ncountry\n \nstring\n);\n\n\n\n\n\n\nSink\n\n\nSinks publish events from the streams via multiple transports to external endpoints in various data formats.\n\n\nA sink configuration allows you to define a mapping to convert the Siddhi event to the required output data format (such as \nJSON\n, \nTEXT\n, \nXML\n, etc.).\nWhen customization to such mappings is not provided, Siddhi converts events to its default format based on the stream definition and \nthe selected data format to publish the events.\n\n\nPurpose\n\n\nSinks provide a way to publish Siddhi events to external systems in the preferred data format. \n\n\nSyntax\n\n\nTo configure a stream to publish events via a sink, add the sink configuration to a stream definition by adding the \n@sink\n \nannotation with the required parameter values. The sink syntax is as follows:\n\n\n@\nsink\n(\ntype\n=\nsink_type\n,\n \nstatic_option_key1\n=\nstatic_option_value1\n,\n \ndynamic_option_key1\n=\n{{dynamic_option_value1}}\n,\n\n    \n@\nmap\n(\ntype\n=\nmap_type\n,\n \nstatic_option_key1\n=\nstatic_option_value1\n,\n \ndynamic_option_key1\n=\n{{dynamic_option_value1}}\n,\n\n        \n@\npayload\n(\npayload_mapping\n)\n\n    \n)\n\n\n)\n\n\ndefine\n \nstream\n \nstream_name\n \n(\nattribute1\n \nType1\n,\n \nattributeN\n \nTypeN\n);\n\n\n\n\n\n\n\n\nDynamic Properties\n\n\nThe sink and sink mapper properties that are categorized as \ndynamic\n have the ability to absorb attributes values \nfrom their associated streams. This can be done by using the attribute names in double curly braces as \n{{...}}\n when configuring the property value. \n\n\nSome valid dynamic properties values are: \n\n\n\n\n'{{attribute1}}'\n\n\n'This is {{attribute1}}'\n \n\n\n{{attribute1}} \n {{attributeN}}\n  \n\n\n\n\nHere the attribute names in the double curly braces will be replaced with event values during execution. \n\n\n\n\nThis syntax includes the following annotations.\n\n\nSink\n\n\nThe \ntype\n parameter of the \n@sink\n annotation defines the sink type that publishes the events. The other parameters to be configured \ndepends on the sink type selected. Some of these parameters are optional, and some can have dynamic values. \n\n\nFor detailed information about the parameters see documentation for the relevant sink.\n\n\nThe following is a list of currently supported sink types.\n\n\n\n\nHTTP\n \n(Only works in WSO2 Stream Processor)\n\n\nKafka\n\n\nTCP\n\n\nIn-memory\n\n\nWSO2Event\n\n\nEmail\n \n(Only works in WSO2 Stream Processor)\n\n\nJMS\n \n(Only works in WSO2 Stream Processor)\n\n\nFile\n \n(Only works in WSO2 Stream Processor)\n\n\nRabbitMQ\n\n\nMQTT\n\n\n\n\nSink Mapper\n\n\nEach \n@sink\n annotation has a mapping denoted by the  \n@map\n annotation that converts the Siddhi event to an outgoing message format.\n\n\nThe \ntype\n parameter of the \n@map\n annotation defines the map type based on which the event is mapped. The other parameters to be configured depends on the mapper selected. Some of these parameters are optional and some have dynamic values. \n \n\n\nFor detailed information about the parameters see the documentation for the relevant mapping type.\n\n\n\n\nTip\n\n\nWhen the \n@map\n annotation is not provided, \n@map(type='passThrough')\n is used by default. This can be used when the sink publishes in the Siddhi event format, or when it does not need any mappings.\n\n\n\n\nMap Payload\n\n\n@payload\n is an optional annotation used with the \n@map\n annotation to define a custom mapping. When the \n@payload\n annotation is not provided, each mapper\nmaps the outgoing events to its own default data format. By defining the \n@payload\n annotation you can configure mappers to produce the output payload with attribute names of your choice, using dynamic properties by selectively assigning \nthe attributes in your preferred format. \n\n\nThere are two ways you can configure the \n@payload\n annotation. \n\n\n\n\nSome mappers such as \nXML\n, \nJSON\n, and \nTest\n accept only one output payload using the following format: \n\n\n@payload( 'This is a test message from {{user}}.' )\n \n\n\nSome mappers such \nkey-value\n accept series of mapping values defined as follows: \n\n\n@payload( key1='mapping_1', key2='user : {{user}}')\n \n\n\n\n\nSupported Mapping Types\n\n\nThe following is a list of currently supported sink mapping types:\n\n\n\n\nWSO2Event\n\n\nXML\n\n\nTEXT\n\n\nJSON\n\n\nBinary\n\n\nKey Value\n\n\n\n\nExample\n\n\nThis query publishes events from the \nOutputStream\n stream via the \nHTTP\n sink. Here the events are mapped to the default \nJSON\n payloads and sent to \nhttp://localhost:8005/endpoint\n\n using the \nPOST\n method, with the\nAccept\n header, and secured via basic authentication where \nadmin\n is both the username and the password.\n\n\n@\nsink\n(\ntype\n=\nhttp\n,\n \npublisher\n.\nurl\n=\nhttp://localhost:8005/endpoint\n,\n \nmethod\n=\nPOST\n,\n \nheaders\n=\nAccept-Date:20/02/2017\n,\n \n  \nbasic\n.\nauth\n.\nusername\n=\nadmin\n,\n \nbasic\n.\nauth\n.\npassword\n=\nadmin\n,\n \nbasic\n.\nauth\n.\nenabled\n=\ntrue\n,\n\n  \n@\nmap\n(\ntype\n=\njson\n))\n\n\ndefine\n \nstream\n \nOutputStream\n \n(\nname\n \nstring\n,\n \nang\n \nint\n,\n \ncountry\n \nstring\n);\n\n\n\n\n\n\nQuery\n\n\nEach Siddhi query can consume one or more streams, and 0-1 tables, process the events in a streaming manner, and then generate an\n output event to a stream or perform a CRUD operation to a table.\n\n\nPurpose\n\n\nA query enables you to perform complex event rrocessing and stream processing operations by processing incoming events one by one in the order they arrive.\n\n\nSyntax\n\n\nAll queries contain an input and an output section. Some also contain a projection section. A simple query with all three sections is as follows.\n\n\nfrom\n \ninput\n \nstream\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n/\ntable\n\n\n\n\n\n\nExample\n\n\nThis query included in a Siddhi Application consumes events from the \nTempStream\n stream (that is already defined) and outputs the room temperature and the room number to the \nRoomTempStream\n stream.\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n \n\nselect\n \nroomNo\n,\n \ntemp\n\n\ninsert\n \ninto\n \nRoomTempStream\n;\n\n\n\n\n\n\n\n\nInferred Stream\n\n\nHere, the \nRoomTempStream\n is an inferred Stream, which means it can be used as any other defined stream \nwithout explicitly defining its stream definition. The definition of the \nRoomTempStream\n is inferred from the \nfirst query that produces the stream.  \n\n\n\n\nQuery Projection\n\n\nSiddhi queries supports the following for query projections.\n\n\n\n    \n\n        \nAction\n\n        \nDescription\n\n    \n\n    \n\n        \nSelecting required objects for projection\n\n        \nThis involves selecting only some of the attributes from the input stream to be inserted into an output stream.\n            \n\n            E.g., The following query selects only the `roomNo` and `temp` attributes from the `TempStream` stream.\n            \nfrom TempStream\nselect roomNo, temp\ninsert into RoomTempStream;\n\n        \n\n    \n\n    \n\n        \nSelecting all attributes for projection\n\n        \nSelecting all the attributes in an input stream to be inserted into an output stream. This can be done by using asterisk ( * ) or by omitting the `select` statement.\n            \n\n            E.g., Both the following queries select all the attributes in the `NewTempStream` stream.\n            \nfrom TempStream\nselect *\ninsert into NewTempStream;\n\n            or\n            \nfrom TempStream\ninsert into NewTempStream;\n\n        \n\n    \n\n    \n\n        \nRenaming attributes\n\n        \nThis selects attributes from the input streams and inserts them into the output stream with different names.\n            \n\n            E.g., This query renames `roomNo` to `roomNumber` and `temp` to `temperature`.\n            \nfrom TempStream \nselect roomNo as roomNumber, temp as temperature\ninsert into RoomTempStream;\n\n        \n\n    \n\n    \n\n        \nIntroducing the constant value\n\n        \nThis adds constant values by assigning it to an attribute using `as`.\n            \n\n            E.g., This query specifies 'C' to be used as the constant value for `scale` attribute. \n            \nfrom TempStream\nselect roomNo, temp, 'C' as scale\ninsert into RoomTempStream;\n\n        \n\n    \n\n    \n\n        \nUsing mathematical and logical expressions\n\n        \nThis uses attributes with mathematical and logical expressions in the precedence order given below, and assigns them to the output attribute using `as`.\n            \n\n            \nOperator precedence\n\n            \n\n                \n\n                    \nOperator\n\n                    \nDistribution\n\n                    \nExample\n\n                \n\n                \n\n                    \n\n                        ()\n                    \n\n                    \n\n                        Scope\n                    \n\n                    \n\n                        \n(cost + tax) * 0.05\n\n                    \n\n                \n\n                \n\n                    \n\n                         IS NULL\n                    \n\n                    \n\n                        Null check\n                    \n\n                    \n\n                        \ndeviceID is null\n\n                    \n\n                \n\n                \n\n                    \n\n                        NOT\n                    \n\n                    \n\n                        Logical NOT\n                    \n\n                    \n\n                        \nnot (price > 10)\n\n                    \n\n                \n\n                \n\n                    \n\n                         *   /   %  \n                    \n\n                    \n\n                        Multiplication, division, modulo\n                    \n\n                    \n\n                        \ntemp * 9/5 + 32\n\n                    \n\n                \n\n                \n\n                    \n\n                        +   -  \n                    \n\n                    \n\n                        Addition, substraction\n                    \n\n                    \n\n                        \ntemp * 9/5 - 32\n\n                    \n\n                \n\n                \n\n                    \n\n                        \n<\n   \n<\n=   >   >=\n                    \n\n                    \n\n                        Comparators: less-than, greater-than-equal, greater-than, less-than-equal\n                    \n\n                    \n\n                        \ntotalCost >= price * quantity\n\n                    \n\n                \n\n                \n\n                    \n\n                        ==   !=  \n                    \n\n                    \n\n                        Comparisons: equal, not equal\n                    \n\n                    \n\n                        \ntotalCost !=  price * quantity\n\n                    \n\n                \n\n                \n\n                    \n\n                        IN\n                    \n\n                    \n\n                        Contains in table\n                    \n\n                    \n\n                        \nroomNo in ServerRoomsTable\n\n                    \n\n                \n\n                \n\n                    \n\n                        AND\n                    \n\n                    \n\n                        Logical AND\n                    \n\n                    \n\n                        \ntemp \n<\n 40 and (humidity \n<\n 40 or humidity >= 60)\n\n                    \n\n                \n\n                \n\n                    \n\n                        OR\n                    \n\n                    \n\n                        Logical OR\n                    \n\n                    \n\n                        \ntemp \n<\n 40 or (humidity \n<\n 40 and humidity >= 60)\n\n                    \n\n                \n\n            \n\n            E.g., Converting Celsius to Fahrenheit and identifying rooms with room number between 10 and 15 as server rooms.\n            \nfrom TempStream\nselect roomNo, temp * 9/5 + 32 as temp, 'F' as scale, roomNo > 10 and roomNo \n<\n 15 as isServerRoom\ninsert into RoomTempStream;\n       \n    \n\n\n\n\n\n\nFunction\n\n\nA function consumes zero, one or more parameters and always produces a result value. It can be used in any location where\n an attribute can be used. \n\n\nPurpose\n\n\nFunctions encapsulates complex execution logic that makes Siddhi applications simple and easy to understand. \n\n\nFunction Parameters\n\n\nFunctions parameters can be attributes, constant values, results of other functions, results of mathematical or logical expressions or time parameters. \nFunction parameters vary depending on the function being called.\n\n\nTime is a special parameter that can be defined using the integer time value followed by its unit as \nint\n \nunit\n. \nFollowing are the supported unit types. Upon execution, time returns the value in the scale of milliseconds as a long value. \n\n\n\n    \n\n        \n\n            Unit  \n        \n\n        \n\n            Syntax\n        \n\n    \n\n    \n\n        \n\n            Year\n        \n\n        \n\n            year | years\n        \n\n    \n\n    \n\n        \n\n            Month\n        \n\n        \n\n            month | months\n        \n\n    \n\n    \n\n        \n\n            Week\n        \n\n        \n\n            week | weeks\n        \n\n    \n\n    \n\n        \n\n            Day\n        \n\n        \n\n            day | days\n        \n\n    \n\n    \n\n        \n\n            Hour\n        \n\n        \n\n           hour | hours\n        \n\n    \n\n    \n\n        \n\n           Minutes\n        \n\n        \n\n           minute | minutes | min\n        \n\n    \n\n    \n\n        \n\n           Seconds\n        \n\n        \n\n           second | seconds | sec\n        \n\n    \n\n    \n\n        \n\n           Milliseconds\n        \n\n        \n\n           millisecond | milliseconds\n        \n\n    \n\n\n\n\n\nE.g. Passing 1 hour and 25 minutes to \ntest()\n function.\n\n\ntest(1 hour 25 min)\n\n\n\n\n\nNote\n\n\nFunctions, mathematical expressions, and logical expressions can be used in a nested manner.\n\n\n\n\nFollowing are some inbuilt functions shipped with Siddhi, for more functions refer execution \nextensions\n.\n\n\n\n\neventTimestamp\n\n\nlog\n\n\nUUID\n\n\ndefault\n\n\ncast\n\n\nconvert\n\n\nifThenElse\n\n\nminimum\n\n\nmaximum\n\n\ncoalesce\n\n\ninstanceOfBoolean\n\n\ninstanceOfDouble\n\n\ninstanceOfFloat\n\n\ninstanceOfInteger\n\n\ninstanceOfLong\n\n\ninstanceOfString\n\n\n\n\nExample\n\n\nThe following configuration converts the \nroomNo\n to \nstring\n and adds a \nmessageID\n to each event using the \nconvert\n and \nUUID\n functions.\n\n\nfrom\n \nTempStream\n\n\nselect\n \nconvert\n(\nroomNo\n,\n \nstring\n)\n \nas\n \nroomNo\n,\n \ntemp\n,\n \nUUID\n()\n \nas\n \nmessageID\n\n\ninsert\n \ninto\n \nRoomTempStream\n;\n\n\n\n\n\n\nFilter\n\n\nFilters are included in queries to filter information from input streams based on a specified condition.\n\n\nPurpose\n\n\nA filter allows you to separate events that match a specific condition as the output, or for further processing.\n\n\nSyntax\n\n\nFilter conditions should be defined in square brackets next to the input stream name as shown below.\n\n\nfrom\n \ninput\n \nstream\n[\nfilter\n \ncondition\n]\n\n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nExample\n\n\nThis query filters all server rooms of which the room number is within the range of 100-210, and having temperature greater than 40 degrees \nfrom the \nTempStream\n stream, and inserts the results into the \nHighTempStream\n stream.\n\n\nfrom\n \nTempStream\n[(\nroomNo\n \n=\n \n100\n \nand\n \nroomNo\n \n \n210\n)\n \nand\n \ntemp\n \n \n40\n]\n\n\nselect\n \nroomNo\n,\n \ntemp\n\n\ninsert\n \ninto\n \nHighTempStream\n;\n\n\n\n\n\n\nWindow\n\n\nWindows allow you to capture a subset of events based on a specific criterion from an input stream for calculation. \nEach input stream can only have a maximum of one window.\n\n\nPurpose\n\n\nTo create subsets of events within a stream based on time duration, number of events, etc for processing. \nA window can operate in a sliding or tumbling (batch) manner.\n\n\nSyntax\n\n\nThe \n#window\n prefix should be inserted next to the relevant stream in order to use a window.\n\n\nfrom\n \ninput\n \nstream\n#\nwindow\n.\nwindow\n \nname\n(\nparameter\n,\n \nparameter\n,\n \n...\n \n)\n\n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \nevent\n \ntype\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\n\n\nNote\n\n\nFilter condition can be applied both before and/or after the window\n\n\n\n\nExample\n\n\nIf you want to identify the maximum temperature out of the last 10 events, you need to define a \nlength\n window of 10 events.\n This window operates in a sliding mode where the following 3 subsets are calculated when a list of 12 events are received in a sequential order.\n\n\n\n\n\n\n\n\nSubset\n\n\nEvent Range\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1-10\n\n\n\n\n\n\n2\n\n\n2-11\n\n\n\n\n\n\n3\n\n\n3-12\n\n\n\n\n\n\n\n\nThe following query finds the maximum temperature out of \nlast 10 events\n from the \nTempStream\n stream, \nand inserts the results into the \nMaxTempStream\n stream.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\nlength\n(\n10\n)\n\n\nselect\n \nmax\n(\ntemp\n)\n \nas\n \nmaxTemp\n\n\ninsert\n \ninto\n \nMaxTempStream\n;\n\n\n\n\n\n\nIf you define the maximum temperature reading out of every 10 events, you need to define a \nlengthBatch\n window of 10 events.\nThis window operates as a batch/tumbling mode where the following 3 subsets are calculated when a list of 30 events are received in a sequential order.\n\n\n\n\n\n\n\n\nSubset\n\n\nEvent Range\n\n\n\n\n\n\n\n\n\n\n1\n\n\n1-10\n\n\n\n\n\n\n2\n\n\n11-20\n\n\n\n\n\n\n3\n\n\n21-30\n\n\n\n\n\n\n\n\nThe following query finds the maximum temperature out of \nevery 10 events\n from the \nTempStream\n stream, \nand inserts the results into the \nMaxTempStream\n stream.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\nlengthBatch\n(\n10\n)\n\n\nselect\n \nmax\n(\ntemp\n)\n \nas\n \nmaxTemp\n\n\ninsert\n \ninto\n \nMaxTempStream\n;\n\n\n\n\n\n\n\n\nNote\n\n\nSimilar operations can be done based on time via \ntime\n windows and \ntimeBatch\n windows and for others. \nCode segments such as \n#window.time(10 min)\n considers events that arrive during the last 10 minutes in a sliding manner, and the \n#window.timeBatch(2 min)\n considers events that arrive every 2 minutes in a tumbling manner. \n\n\n\n\nFollowing are some inbuilt windows shipped with Siddhi. For more window types, see execution \nextensions\n. \n\n\n\n\ntime\n\n\ntimeBatch\n\n\nlength\n\n\nlengthBatch\n\n\nsort\n\n\nfrequent\n\n\nlossyFrequent\n\n\ncron\n\n\nexternalTime\n\n\nexternalTimeBatch\n\n\n\n\nOutput event types\n \n\n\nProjection of the query depends on the output event types such as, \ncurrent\n and \nexpired\n event types.\n By default all queries produce \ncurrent\n events and only queries with windows produce \nexpired\n events \n when events expire from the window. You can specify whether the output of a query should be only current events, only expired events or both current and expired events.\n\n\nNote!\n Controlling the output event types does not alter the execution within the query, and it does not affect the accuracy of the query execution.  \n\n\nThe following keywords can be used with the output stream to manipulate output. \n\n\n\n\n\n\n\n\nOutput event types\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncurrent events\n\n\nOutputs events when incoming events arrive to be processed by the query. \n This is default when no specific output event type is specified.\n\n\n\n\n\n\nexpired events\n\n\nOutputs events when events expires from the window.\n\n\n\n\n\n\nall events\n\n\nOutputs events when incoming events arrive to be processed by the query as well as \n when events expire from the window.\n\n\n\n\n\n\n\n\nThe output event type keyword can be used between \ninsert\n and \ninto\n as shown in the following example.\n\n\nExample\n\n\nThis query delays all events in a stream by 1 minute.  \n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n1\n \nmin\n)\n\n\nselect\n \n*\n\n\ninsert\n \nexpired\n \nevents\n \ninto\n \nDelayedTempStream\n\n\n\n\n\n\nAggregate function\n\n\nAggregate functions perform aggregate calculations in the query. \nWhen a window is defined the aggregation is restricted within that window. If no window is provided aggregation is performed from the start of the Siddhi application.\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n#\nwindow\n.\nwindow\n \nname\n(\nparameter\n,\n \nparameter\n,\n \n...\n \n)\n\n\nselect\n \naggregate\n \nfunction\n(\nparameter\n,\n \nparameter\n,\n \n...\n \n)\n \nas\n \nattribute\n \nname\n,\n \nattribute2\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n;\n\n\n\n\n\n\nAggregate Parameters\n\n\nAggregate parameters can be attributes, constant values, results of other functions or aggregates, results of mathematical or logical expressions, or time parameters. \nAggregate parameters configured in a query  depends on the aggregate function being called.\n\n\nExample\n\n\nThe following query calculates the average value for the \ntemp\n attribute of the \nTempStream\n stream. This calculation is done for the last 10 minutes in a sliding manner, and the result is output as \navgTemp\n to the \nAvgTempStream\n output stream.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n\nselect\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n,\n \nroomNo\n,\n \ndeviceID\n\n\ninsert\n \ninto\n \nAvgTempStream\n;\n\n\n\n\n\n\nFollowing are some inbuilt aggregation functions shipped with Siddhi, for more aggregation functions, see execution \nextensions\n. \n\n\n\n\navg\n\n\nsum\n\n\nmax\n\n\nmin\n\n\ncount\n\n\ndistinctCount\n\n\nmaxForever\n\n\nminForever\n\n\nstdDev\n\n\n\n\nGroup By\n\n\nGroup By allows you to group the aggregate based on specified attributes.\n\n\nSyntax\n\nThe syntax for the Group By aggregate function is as follows:\n\n\nfrom\n \ninput\n \nstream\n#\nwindow\n.\nwindow\n \nname\n(...)\n\n\nselect\n \naggregate\n \nfunction\n(\n \nparameter\n,\n \nparameter\n,\n \n...)\n \nas\n \nattribute1\n \nname\n,\n \nattribute2\n \nname\n,\n \n...\n\n\ngroup\n \nby\n \nattribute1\n \nname\n,\n \nattribute2\n \nname\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n;\n\n\n\n\n\n\nExample\n\nThe following query calculates the average temperature per \nroomNo\n and \ndeviceID\n combination, for events that arrive at the \nTempStream\n stream\nfor a sliding time window of 10 minutes.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n\nselect\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n,\n \nroomNo\n,\n \ndeviceID\n\n\ngroup\n \nby\n \nroomNo\n,\n \ndeviceID\n\n\ninsert\n \ninto\n \nAvgTempStream\n;\n\n\n\n\n\n\nHaving\n\n\nHaving allows you to filter events after processing the \nselect\n statement.\n\n\nPurpose\n\nThis allows you to filter the aggregation output.\n\n\nSyntax\n\nThe syntax for the Having aggregate function is as follows:\n\n\nfrom\n \ninput\n \nstream\n#\nwindow\n.\nwindow\n \nname\n(\n \n...\n \n)\n\n\nselect\n \naggregate\n \nfunction\n(\n \nparameter\n,\n \nparameter\n,\n \n...)\n \nas\n \nattribute1\n \nname\n,\n \nattribute2\n \nname\n,\n \n...\n\n\ngroup\n \nby\n \nattribute1\n \nname\n,\n \nattribute2\n \nname\n \n...\n\n\nhaving\n \ncondition\n\n\ninsert\n \ninto\n \noutput\n \nstream\n;\n\n\n\n\n\n\nExample\n\n\nThe following query calculates the average temperature per room for the last 10 minutes, and alerts if it exceeds 30 degrees.\n\n\nfrom\n \nTempStream\n#\nwindow\n.\ntime\n(\n10\n \nmin\n)\n\n\nselect\n \navg\n(\ntemp\n)\n \nas\n \navgTemp\n,\n \nroomNo\n\n\ngroup\n \nby\n \nroomNo\n\n\nhaving\n \navgTemp\n \n \n30\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nJoin (Stream)\n\n\nJoins allow you to get a combined result from two streams in real-time based on a specified condition. \n\n\nPurpose\n\nStreams are stateless. Therefore, in order to join two streams, they need to be connected to a window so that there is a pool of events that can be used for joining. Joins also accept conditions to join the appropriate events from each stream.\n\n\nDuring the joining process each incoming event of each stream is matched against all the events in the other \nstream's window based on the given condition, and the output events are generated for all the matching event pairs.\n\n\n\n\nNote\n\n\nJoin can also be performed with \nstored data\n, \naggregation\n or externally \ndefined windows\n.\n\n\n\n\nSyntax\n\n\nThe syntax for a join is as follows:\n\n\nfrom\n \ninput\n \nstream\n#\nwindow\n.\nwindow\n \nname\n(\nparameter\n,\n \n...\n \n)\n \n{\nunidirectional\n}\n \n{\nas\n \nreference\n}\n\n         \njoin\n \ninput\n \nstream\n#\nwindow\n.\nwindow\n \nname\n(\nparameter\n,\n  \n...\n \n)\n \n{\nunidirectional\n}\n \n{\nas\n \nreference\n}\n\n    \non\n \njoin\n \ncondition\n\n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nHere, the \njoin condition\n allows you to match the attributes from both the streams. \n\n\nUnidirectional join operation\n\n\nBy default, events arriving at either stream can trigger the joining process. However, if you want to control the \njoin execution, you can add the \nunidirectional\n keyword next to a stream in the join definition as depicted in the \nsyntax in order to enable that stream to trigger the join operation. Here, events arriving at other stream only update the \n window of that stream, and this stream does not trigger the join operation.\n\n\n\n\nNote\n\n\nThe \nunidirectional\n keyword cannot be applied to both the input streams because the default behaviour already allows both streams to trigger the join operation.\n\n\n\n\nExample\n\n\nAssuming that the temperature of regulators are updated every minute. \nFollowing is a Siddhi App the controls the temperature regulators if they are not already \non\n for all the rooms with a room temperature greater than 30 degrees.  \n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nTempStream\n[\ntemp\n \n \n30\n.\n0\n]\n#\nwindow\n.\ntime\n(\n1\n \nmin\n)\n \nas\n \nT\n\n  \njoin\n \nRegulatorStream\n[\nisOn\n \n==\n \nfalse\n]\n#\nwindow\n.\nlength\n(\n1\n)\n \nas\n \nR\n\n  \non\n \nT\n.\nroomNo\n \n==\n \nR\n.\nroomNo\n\n\nselect\n \nT\n.\nroomNo\n,\n \nR\n.\ndeviceID\n,\n \nstart\n \nas\n \naction\n\n\ninsert\n \ninto\n \nRegulatorActionStream\n;\n\n\n\n\n\n\nSupported join types\n \n\n\nFollowing are the supported operations of a join clause.\n\n\n\n\n\n\nInner join (join)\n \n\n\nThis is the default behaviour of a join operation. \njoin\n is used as the keyword to join both the streams. The output is generated only if there is a matching event in both the streams.\n\n\n\n\n\n\nLeft outer join\n \n\n\nThe left outer join operation allows you to join two streams to be merged based on a condition. \nleft outer join\n is used as the keyword to join both the streams.\n\n\nHere, it returns all the events of left stream even if there are no matching events in the right stream by \nhaving null values for the attributes of the right stream.\n\n\nExample\n\n\nThe following query generates output events for all events from the \nStockStream\n stream regardless of whether a matching \nsymbol exists in the \nTwitterStream\n stream or not.\n\n\n\nfrom StockStream#window.time(1 min) as S\n  left outer join TwitterStream#window.length(1) as T\n  on S.symbol== T.symbol\nselect S.symbol as symbol, T.tweet, S.price\ninsert into outputStream ;    \n\n\n\n\n\n\nRight outer join\n \n\n\nThis is similar to a left outer join. \nRight outer join\n is used as the keyword to join both the streams.\nIt returns all the events of the right stream even if there are no matching events in the left stream. \n\n\n\n\n\n\nFull outer join\n \n\n\nThe full outer join combines the results of left outer join and right outer join. \nfull outer join\n is used as the keyword to join both the streams.\nHere, output event are generated for each incoming event even if there are no matching events in the other stream.\n\n\nExample\n\n\nThe following query generates output events for all the incoming events of each stream regardless of whether there is a \nmatch for the \nsymbol\n attribute in the other stream or not.\n\n\n\nfrom StockStream#window.time(1 min) as S\n  full outer join TwitterStream#window.length(1) as T\n  on S.symbol== T.symbol\nselect S.symbol as symbol, T.tweet, S.price\ninsert into outputStream ;    \n\n\n\n\n\n\nPattern\n\n\nThis is a state machine implementation that allows you to detect patterns in the events that arrive over time. This can correlate events within a single stream or between multiple streams. \n\n\nPurpose\n \n\n\nPatterns allow you to identify trends in events over a time period.\n\n\nSyntax\n\n\nThe following is the syntax for a pattern query:\n\n\nfrom\n \n(\nevery\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n]\n \n-\n \n    \n(\nevery\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n \n[\nfilter\n \ncondition\n]\n \n-\n \n    \n...\n \n    \n(\nwithin\n \ntime\n \ngap\n)\n?\n     \n\nselect\n \nevent\n \nreference\n.\nattribute\n \nname\n,\n \nevent\n \nreference\n.\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\n\n\n\n\n\n\nItems\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n-\n\n\nThis is used to indicate an event that should be following another event. The subsequent event does not necessarily have to occur immediately after the preceding event. The condition to be met by the preceding event should be added before the sign, and the condition to be met by the subsequent event should be added after the sign.\n\n\n\n\n\n\nevent reference\n\n\nThis allows you to add a reference to the the matching event so that it can be accessed later for further processing.\n\n\n\n\n\n\n(within \ntime gap\n)?\n\n\nThe \nwithin\n clause is optional. It defines the time duration within which all the matching events should occur.\n\n\n\n\n\n\nevery\n\n\nevery\n is an optional keyword. This defines whether the event matching should be triggered for every event arrival in the specified stream with the matching condition. \n When this keyword is not used, the matching is carried out only once.\n\n\n\n\n\n\n\n\nSiddhi also supports pattern matching with counting events and matching events in a logical order such as (\nand\n, \nor\n, and \nnot\n). These are described in detail further below in this guide.\n\n\nExample\n\n\nThis query sends an alert if the temperature of a room increases by 5 degrees within 10 min.\n\n\nfrom\n \nevery\n(\n \ne1\n=\nTempStream\n \n)\n \n-\n \ne2\n=\nTempStream\n[\n \ne1\n.\nroomNo\n \n==\n \nroomNo\n \nand\n \n(\ne1\n.\ntemp\n \n+\n \n5\n)\n \n=\n \ntemp\n \n]\n\n    \nwithin\n \n10\n \nmin\n\n\nselect\n \ne1\n.\nroomNo\n,\n \ne1\n.\ntemp\n \nas\n \ninitialTemp\n,\n \ne2\n.\ntemp\n \nas\n \nfinalTemp\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nHere, the matching process begins for each event in the \nTempStream\n stream (because \nevery\n is used with \ne1=TempStream\n), \nand if  another event arrives within 10 minutes with a value for the \ntemp\n attribute that is greater than or equal to \ne1.temp + 5\n \nof the event e1, an output is generated via the \nAlertStream\n.\n\n\nCounting Pattern\n\n\nCounting patterns allow you to match multiple events that may have been received for the same matching condition.\nThe number of events matched per condition can be limited via condition postfixes.\n\n\nSyntax\n\n\nEach matching condition can contain a collection of events with the minimum and maximum number of events to be matched as shown in the syntax below. \n\n\nfrom\n \n(\nevery\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n]\n \n(\nmin\n \ncount\n:\nmax\n \ncount\n)\n?\n \n-\n  \n    \n...\n \n    \n(\nwithin\n \ntime\n \ngap\n)\n?\n     \n\nselect\n \nevent\n \nreference\n([\nevent\n \nindex\n])\n?\n.\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\n\n\n\n\n\n\nPostfix\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n\n\nn1:n2\n\n\nThis matches \nn1\n to \nn2\n events (including \nn1\n and not more than \nn2\n).\n\n\n1:4\n matches 1 to 4 events.\n\n\n\n\n\n\n\n\nn:\n\n\nThis matches \nn\n or more events (including \nn\n).\n\n\n2:\n matches 2 or more events.\n\n\n\n\n\n\n\n\n:n\n\n\nThis matches up to \nn\n events (excluding \nn\n).\n\n\n:5\n matches up to 5 events.\n\n\n\n\n\n\n\n\nn\n\n\nThis matches exactly \nn\n events.\n\n\n5\n matches exactly 5 events.\n\n\n\n\n\n\n\n\n\n\nSpecific occurrences of the event in a collection can be retrieved by using an event index with its reference.\nSquare brackets can be used to indicate the event index where \n1\n can be used as the index of the first event and \nlast\n can be used as the index\n for the \nlast\n available event in the event collection. If you provide an index greater then the last event index,\n the system returns \nnull\n. The following are some valid examples.\n\n\n\n\ne1[3]\n refers to the 3rd event.\n\n\ne1[last]\n refers to the last event.\n\n\ne1[last - 1]\n refers to the event before the last event.\n\n\n\n\nExample\n\n\nThe following Siddhi App calculates the temperature difference between two regulator events.\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nevery\n(\n \ne1\n=\nRegulatorStream\n)\n \n-\n \ne2\n=\nTempStream\n[\ne1\n.\nroomNo\n==\nroomNo\n]\n1\n:\n \n-\n \ne3\n=\nRegulatorStream\n[\ne1\n.\nroomNo\n==\nroomNo\n]\n\n\nselect\n \ne1\n.\nroomNo\n,\n \ne2\n[\n0\n].\ntemp\n \n-\n \ne2\n[\nlast\n].\ntemp\n \nas\n \ntempDiff\n\n\ninsert\n \ninto\n \nTempDiffStream\n;\n\n\n\n\n\n\nLogical Patterns\n\n\nLogical patterns match events that arrive in temporal order and correlate them with logical relationships such as \nand\n, \n\nor\n and \nnot\n. \n\n\nSyntax\n\n\nfrom\n \n(\nevery\n)\n?\n \n(\nnot\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n]\n \n          \n((\nand\n|\nor\n)\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n])\n?\n \n(\nwithin\n \ntime\n \ngap\n)\n?\n \n-\n  \n    \n...\n \n\nselect\n \nevent\n \nreference\n([\nevent\n \nindex\n])\n?\n.\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nKeywords such as \nand\n, \nor\n, or \nnot\n can be used to illustrate the logical relationship.\n\n\n\n\n\n\n\n\nKey Word\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nand\n\n\nThis allows both conditions of \nand\n to be matched by two events in any order.\n\n\n\n\n\n\nor\n\n\nThe state succeeds if either condition of \nor\n is satisfied. Here the event reference of the other condition is \nnull\n.\n\n\n\n\n\n\nnot \ncondition1\n and \ncondition2\n\n\nWhen \nnot\n is included with \nand\n, it identifies the events that match \n arriving before any event that match \n. is identified.\n\n\n\n\n\n\nnot \ncondition\n for \ntime period\n\n\nWhen \nnot\n is included with \nfor\n, it allows you to identify a situation where no event that matches \ncondition1\n arrives during the specified \ntime period\n.  e.g.,\nfrom not TemperatureStream[temp \n 60] for 5 sec\n.\n\n\n\n\n\n\n\n\nExample\n\n\nFollowing Siddhi App, sends the \nstop\n control action to the regulator when the key is removed from the hotel room. \n\n\ndefine\n \nstream\n \nRegulatorStateChangeStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n,\n \naction\n \nstring\n);\n\n\ndefine\n \nstream\n \nRoomKeyStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \naction\n \nstring\n);\n\n\n\n\nfrom\n \nevery\n(\n \ne1\n=\nRegulatorStateChangeStream\n[\n \naction\n \n==\n \non\n \n]\n \n)\n \n-\n \n      \ne2\n=\nRoomKeyStream\n[\n \ne1\n.\nroomNo\n \n==\n \nroomNo\n \nand\n \naction\n \n==\n \nremoved\n \n]\n \nor\n \ne3\n=\nRegulatorStateChangeStream\n[\n \ne1\n.\nroomNo\n \n==\n \nroomNo\n \nand\n \naction\n \n==\n \noff\n]\n\n\nselect\n \ne1\n.\nroomNo\n,\n \nifThenElse\n(\n \ne2\n \nis\n \nnull\n,\n \nnone\n,\n \nstop\n \n)\n \nas\n \naction\n\n\nhaving\n \naction\n \n!=\n \nnone\n\n\ninsert\n \ninto\n \nRegulatorActionStream\n;\n\n\n\n\n\n\nThis Siddhi Application generates an alert if we have switch off the regulator before the temperature reaches 12 degrees.  \n\n\ndefine\n \nstream\n \nRegulatorStateChangeStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n,\n \naction\n \nstring\n);\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \ne1\n=\nRegulatorStateChangeStream\n[\naction\n \n==\n \nstart\n]\n \n-\n \nnot\n \nTempStream\n[\ne1\n.\nroomNo\n \n==\n \nroomNo\n \nand\n \ntemp\n \n \n12\n]\n \nand\n \ne2\n=\nRegulatorStateChangeStream\n[\naction\n \n==\n \noff\n]\n\n\nselect\n \ne1\n.\nroomNo\n \nas\n \nroomNo\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nThis Siddhi Application generates an alert if the temperature does not reduce to 12 degrees within 5 minutes of switching on the regulator.  \n\n\ndefine\n \nstream\n \nRegulatorStateChangeStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntempSet\n \ndouble\n,\n \naction\n \nstring\n);\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \ne1\n=\nRegulatorStateChangeStream\n[\naction\n \n==\n \nstart\n]\n \n-\n \nnot\n \nTempStream\n[\ne1\n.\nroomNo\n \n==\n \nroomNo\n \nand\n \ntemp\n \n \n12\n]\n \nfor\n \n5 min\n\n\nselect\n \ne1\n.\nroomNo\n \nas\n \nroomNo\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nSequence\n\n\nSequence is a state machine implementation that allows you to detect the sequence of event occurrences over time. \nHere \nall matching events need to arrive consecutively\n to match the sequence condition, and there cannot be any non-matching events arriving within a matching sequence of events.\nThis can correlate events within a single stream or between multiple streams. \n\n\nPurpose\n \n\n\nThis allows you to detect a specified event sequence over a specified time period. \n\n\nSyntax\n\n\nThe syntax for a sequence query is as follows:\n\n\nfrom\n \n(\nevery\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n],\n \n    \nevent\n \nreference\n=\ninput\n \nstream\n \n[\nfilter\n \ncondition\n],\n \n    \n...\n \n    \n(\nwithin\n \ntime\n \ngap\n)\n?\n     \n\nselect\n \nevent\n \nreference\n.\nattribute\n \nname\n,\n \nevent\n \nreference\n.\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\n\n\n\n\n\n\nItems\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n,\n\n\nThis represents the immediate next event i.e., when an event that matches the first condition arrives, the event that arrives immediately after it should match the second condition.\n\n\n\n\n\n\nevent reference\n\n\nThis allows you toadd a reference to the the matching event so that it can be accessed later for further processing.\n\n\n\n\n\n\n(within \ntime gap\n)?\n\n\nThe \nwithin\n clause is optional. It defines the time duration within which all the matching events should occur.\n\n\n\n\n\n\nevery\n\n\nevery\n is an optional keyword. This defines whether the matching event should be triggered for every event that arrives at the specified stream with the matching condition. \n When this keyword is not used, the matching is carried out only once.\n\n\n\n\n\n\n\n\nExample\n\n\nThis query generates an alert if the increase in the temperature between two consecutive temperature events exceeds one degree.\n\n\nfrom\n \nevery\n \ne1\n=\nTempStream\n,\n \ne2\n=\nTempStream\n[\ne1\n.\ntemp\n \n+\n \n1\n \n \ntemp\n]\n\n\nselect\n \ne1\n.\ntemp\n \nas\n \ninitialTemp\n,\n \ne2\n.\ntemp\n \nas\n \nfinalTemp\n\n\ninsert\n \ninto\n \nAlertStream\n;\n\n\n\n\n\n\nCounting Sequence\n\n\nCounting sequences allow you to match multiple events for the same matching condition.\nThe number of events matched per condition can be limited via condition postfixes such as \nCounting Patterns\n, or by using the \n\n*\n, \n+\n, and \n?\n operators.\n\n\nThe matching events can also be retrieved using event indexes, similar to how it is done in \nCounting Patterns\n.\n\n\nSyntax\n\n\nEach matching condition in a sequence can contain a collection of events as shown below. \n\n\nfrom\n \n(\nevery\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n](\n+|*|?\n)\n?\n,\n \n    \nevent\n \nreference\n=\ninput\n \nstream\n \n[\nfilter\n \ncondition\n](\n+|*|?\n)\n?\n,\n \n    \n...\n \n    \n(\nwithin\n \ntime\n \ngap\n)\n?\n     \n\nselect\n \nevent\n \nreference\n.\nattribute\n \nname\n,\n \nevent\n \nreference\n.\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\n\n\n\n\n\n\nPostfix symbol\n\n\nRequired/Optional\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n+\n\n\nOptional\n\n\nThis matches \none or more\n events to the given condition.\n\n\n\n\n\n\n*\n\n\nOptional\n\n\nThis matches \nzero or more\n events to the given condition.\n\n\n\n\n\n\n?\n\n\nOptional\n\n\nThis matches \nzero or one\n events to the given condition.\n\n\n\n\n\n\n\n\nExample\n\n\nThis Siddhi application identifies temperature peeks.\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nevery\n \ne1\n=\nTempStream\n,\n \ne2\n=\nTempStream\n[\ne1\n.\ntemp\n \n=\n \ntemp\n]\n+\n,\n \ne3\n=\nTempStream\n[\ne2\n[\nlast\n].\ntemp\n \n \ntemp\n]\n\n\nselect\n \ne1\n.\ntemp\n \nas\n \ninitialTemp\n,\n \ne2\n[\nlast\n].\ntemp\n \nas\n \npeakTemp\n\n\ninsert\n \ninto\n \nPeekTempStream\n;\n\n\n\n\n\n\nLogical Sequence\n\n\nLogical sequences identify logical relationships using \nand\n, \nor\n and \nnot\n on consecutively arriving events.\n\n\nSyntax\n\nThe syntax for a logical sequence is as follows:\n\n\nfrom\n \n(\nevery\n)\n?\n \n(\nnot\n)\n?\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n]\n \n          \n((\nand\n|\nor\n)\n \nevent\n \nreference\n=\ninput\n \nstream\n[\nfilter\n \ncondition\n])\n?\n \n(\nwithin\n \ntime\n \ngap\n)\n?\n,\n \n    \n...\n \n\nselect\n \nevent\n \nreference\n([\nevent\n \nindex\n])\n?\n.\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nKeywords such as \nand\n, \nor\n, or \nnot\n can be used to illustrate the logical relationship, similar to how it is done in \nLogical Patterns\n. \n\n\nExample\n\n\nThis Siddhi application notifies the state when a regulator event is immediately followed by both temperature and humidity events. \n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \ntemp\n \ndouble\n);\n\n\ndefine\n \nstream\n \nHumidStream\n(\ndeviceID\n \nlong\n,\n \nhumid\n \ndouble\n);\n\n\ndefine\n \nstream\n \nRegulatorStream\n(\ndeviceID\n \nlong\n,\n \nisOn\n \nbool\n);\n\n\n\nfrom\n \nevery\n \ne1\n=\nRegulatorStream\n,\n \ne2\n=\nTempStream\n \nand\n \ne3\n=\nHumidStream\n\n\nselect\n \ne2\n.\ntemp\n,\n \ne3\n.\nhumid\n\n\ninsert\n \ninto\n \nStateNotificationStream\n;\n\n\n\n\n\n\nOutput rate limiting\n\n\nOutput rate limiting allows queries to output events periodically based on a specified condition.\n\n\nPurpose\n\n\nThis allows you to limit the output to avoid overloading the subsequent executions, and to remove unnecessary information.\n\n\nSyntax\n\n\nThe syntax of an output rate limiting configuration is as follows:\n\n\nfrom\n \ninput\n \nstream\n \n...\n\n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\noutput\n \nrate\n \nlimiting\n \nconfiguration\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nSiddhi supports three types of output rate limiting configurations as explained in the following table: \n\n\n\n\n\n\n\n\nRate limiting configuration\n\n\nSyntax\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBased on time\n\n\noutput event\n every \ntime interval\n\n\nThis outputs \noutput event\n every \ntime interval\n time interval.\n\n\n\n\n\n\nBased on number of events\n\n\noutput event\n every \nevent interval\n events\n\n\nThis outputs \noutput event\n for every \nevent interval\n number of events.\n\n\n\n\n\n\nSnapshot based output\n\n\nsnapshot every \ntime interval\n\n\nThis outputs all events in the window (or the last event if no window is defined in the query) for every given \ntime interval\n time interval.\n\n\n\n\n\n\n\n\nHere the \noutput event\n specifies the event(s) that should be returned as the output of the query. \nThe possible values are as follows:\n\n \nfirst\n : Only the first event processed by the query during the specified time interval/sliding window is emitted.\n\n \nlast\n : Only the last event processed by the query during the specified time interval/sliding window is emitted.\n* \nall\n : All the events processed by the query during the specified time interval/sliding window are emitted. \nWhen no \noutput event\n is defined, \nall\n is used by default.\n\n\nExamples\n\n\n\n\n\n\nReturning events based on the number of events\n\n\nHere, events are emitted every time the specified number of events arrive. You can also specify whether to emit only the first event/last event, or all the events out of the events that arrived.\n\n\nIn this example, the last temperature per sensor is emitted for every 10 events.\n\n\n\nfrom TempStreamselect \nselect temp, deviceID\ngroup by deviceID\noutput last every 10 events\ninsert into LowRateTempStream;    \n\n\n\n\n\n\nReturning events based on time\n\n\nHere events are emitted for every predefined time interval. You can also specify whether to emit only the first event, last event, or all events out of the events that arrived during the specified time interval.\n\n\nIn this example, emits all temperature events every 10 seconds  \n\n\n\nfrom TempStreamoutput \noutput every 10 sec\ninsert into LowRateTempStream;    \n\n\n\n\n\n\nReturning a periodic snapshot of events\n\n\nThis method works best with windows. When an input stream is connected to a window, snapshot rate limiting emits all the current events that have arrived and do not have corresponding expired events for every predefined time interval. \nIf the input stream is not connected to a window, only the last current event for each predefined time interval is emitted.\n\n\nThis query emits a snapshot of the events in a time window of 5 seconds every 1 second. \n\n\n\nfrom TempStream#window.time(5 sec)\noutput snapshot every 1 sec\ninsert into SnapshotTempStream;    \n\n\n\n\n\n\nPartition\n\n\nPartitions divide streams and queries into isolated groups in  order to process them in parallel and in isolation. \nA partition can contain one or more queries and there can be multiple instances where the same queries and streams are replicated for each partition. \nEach partition is tagged with a partition key. Those partitions only process the events that match the corresponding partition key. \n\n\nPurpose\n \n\n\nPartitions allow you to process the events groups in isolation so that event processing can be performed using the same set of queries for each group. \n\n\nPartition key generation\n\n\nA partition key can be generated in the following two methods:\n\n\n\n\n\n\nPartition by value\n\n\nThis is created by generating unique values using input stream attributes.\n\n\nSyntax\n\n\n\npartition with ( \nexpression\n of \nstream name\n, \nexpression\n of \nstream name\n, ... )\nbegin\n    \nquery\n\n    \nquery\n\n    ...\nend; \n\n\nExample\n\n\nThis query calculates the maximum temperature recorded within the last 10 events per \ndeviceID\n.\n\n\n\npartition with ( deviceID of TempStream )\nbegin\n    from TempStream#window.length(10)\n    select roomNo, deviceID, max(temp) as maxTemp\n    insert into DeviceTempStream;\nend;\n\n\n\n\n\n\n\nPartition by range\n\n\nThis is created by mapping each partition key to a range condition of the input streams numerical attribute.\n\n\nSyntax\n\n\n\npartition with ( \ncondition\n as \npartition key\n or \ncondition\n as \npartition key\n or ... of \nstream name\n, ... )\nbegin\n    \nquery\n\n    \nquery\n\n    ...\nend;\n\n\n\nExample\n\n\nThis query calculates the average temperature for the last 10 minutes per office area.\n\n\n\npartition with ( roomNo \n= 1030 as 'serverRoom' or \n                 roomNo \n 1030 and roomNo \n= 330 as 'officeRoom' or \n                 roomNo \n 330 as 'lobby' of TempStream)\nbegin\n    from TempStream#window.time(10 min)\n    select roomNo, deviceID, avg(temp) as avgTemp\n    insert into AreaTempStream\nend;\n\n  \n\n\n\n\n\n\nInner Stream\n\n\nQueries inside a partition block can use inner streams to communicate with each other while preserving partition isolation.\nInner streams are denoted by a \"#\" placed before the stream name, and these streams cannot be accessed outside a partition block. \n\n\nPurpose\n\n\nInner streams allow you to connect queries within the partition block so that the output of a query can be used as an input only by another query \nwithin the same partition. Therefore, you do not need to repartition the streams if they are communicating within the partition.\n\n\nExample\n\n\nThis partition calculates the average temperature of every 10 events for each sensor, and sends an output to the \nDeviceTempIncreasingStream\n stream if the consecutive average temperature values increase by more than \n5 degrees.\n\n\n\npartition with ( deviceID of TempStream )\nbegin\n    from TempStream#window.lengthBatch(10)\n    select roomNo, deviceID, avg(temp) as avgTemp\n    insert into #AvgTempStream\n\n    from every (e1=#AvgTempStream),e2=#AvgTempStream[e1.avgTemp + 5 \n<\n avgTemp]\n    select e1.deviceID, e1.avgTemp as initialAvgTemp, e2.avgTemp as finalAvgTemp\n    insert into DeviceTempIncreasingStream\nend;\n\n\n\n\nTable\n\n\nA table is a stored version of an stream or a table of events. Its schema is defined via the \ntable definition\n that is\nsimilar to a stream definition. These events are by default stored \nin-memory\n, but Siddhi also provides store extensions to work with data/events stored in various data stores through the \ntable abstraction.\n\n\nPurpose\n\n\nTables allow Siddhi to work with stored events. By defining a schema for tables Siddhi enables them to be processed by queries using their defined attributes with the streaming data. You can also interactively query the state of the stored events in the table.\n\n\nSyntax\n\n\nThe syntax for a new table definition is as follows:\n\n\ndefine\n \nstream\n \nstream\n \nname\n \n(\nattribute\n \nname\n \nattribute\n \ntype\n,\n \nattribute\n \nname\n \nattribute\n \ntype\n,\n \n...\n \n);\n\n\n\n\n\n\nThe following parameters are configured in a table definition:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntable name\n\n\nThe name of the table defined. (\nPascalCase\n is used for table name as a convention.)\n\n\n\n\n\n\nattribute name\n\n\nThe schema of the table is defined by its attributes with uniquely identifiable attribute names (\ncamalCase\n is used for attribute names as a convention.)\n\n\n\n\n\n\nattribute type\n\n\nThe type of each attribute defined in the schema. \n This can be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n or \nOBJECT\n.\n\n\n\n\n\n\n\n\nExample\n\n\nThe following defines a table named \nRoomTypeTable\n with \nroomNo\n and \ntype\n attributes of data types \nint\n and \nstring\n respectively.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\n \nroomNo\n \nint\n,\n \ntype\n \nstring\n \n);\n\n\n\n\n\n\nPrimary Keys\n\n\nTables can be configured with primary keys to avoid the duplication of data. \n\n\nPrimary keys are configured by including the \n@PrimaryKey( 'key1', 'key2' )\n annotation to the table definition. \nEach event table configuration can have only one \n@PrimaryKey\n annotation. \nThe number of attributes supported differ based on the table implementations. When more than one attribute \n is used for the primary key, the uniqueness of the events stored in the table is determined based on the combination of values for those attributes.\n\n\nExamples\n\n\nThis query creates an event table with the \nsymbol\n attribute as the primary key. \nTherefore each entry in this table must have a unique value for \nsymbol\n attribute.\n\n\n@\nPrimaryKey\n(\nsymbol\n)\n\n\ndefine\n \ntable\n \nStockTable\n \n(\nsymbol\n \nstring\n,\n \nprice\n \nfloat\n,\n \nvolume\n \nlong\n);\n\n\n\n\n\n\nIndexes\n\n\nIndexes allow tables to be searched/modified much faster. \n\n\nIndexes are configured by including the \n@Index( 'key1', 'key2' )\n annotation to the table definition.\n Each event table configuration can have 0-1 \n@Index\n annotations. \n Support for the \n@Index\n annotation and the number of attributes supported differ based on the table implementations. \n When more then one attribute is used for index, each one of them is used to index the table for fast access of the data. \n Indexes can be configured together with primary keys. \n\n\nExamples\n\n\nThis query creates an indexed event table named \nRoomTypeTable\n with the \nroomNo\n attribute as the index key.\n\n\n@\nIndex\n(\nroomNo\n)\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\n\n\n\n\nOperators on Table\n\n\nThe following operators can be performed on tables.\n\n\nInsert\n\n\nThis allows events to be inserted into tables. This is similar to inserting events into streams. \n\n\n\n\nWarning\n\n\nIf the table is defined with primary keys, and if you insert duplicate data, primary key constrain violations can occur. \nIn such cases use the \nupdate or insert\n operation. \n\n\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \ntable\n\n\n\n\n\n\nSimilar to streams, you need to use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword between \ninsert\n and \ninto\n keywords in order to insert only the specific output event types. \nFor more information, see \noutput event type\n.\n\n\nExample\n\n\nThis query inserts all the events from the \nTempStream\n stream to the \nTempTable\n table.\n\n\nfrom\n \nTempStream\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nTempTable\n;\n\n\n\n\n\n\nJoin (Table)\n\n\nThis allows a stream to retrieve information from a table in a streaming manner.\n\n\n\n\nNote\n\n\nJoins can also be performed with \ntwo streams\n, \naggregation\n or against externally \ndefined windows\n.\n\n\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \njoin\n \ntable\n\n    \non\n \ncondition\n\n\nselect\n \n(\ninput\n \nstream\n|\ntable\n).\nattribute\n \nname\n,\n \n(\ninput\n \nstream\n|\ntable\n).\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\n\n\nNote\n\n\nA table can only be joint with a stream. Two tables cannot be joint because there must be at least one active \nentity to trigger the join operation.\n\n\n\n\nExample\n\n\nThis Siddhi App performs a join to retrieve the room type from \nRoomTypeTable\n table based on the room number, so that it can filter the events related to \nserver-room\ns.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n \njoin\n \nRoomTypeTable\n\n    \non\n \nRoomTypeTable\n.\nroomNo\n \n==\n \nTempStream\n.\nroomNo\n\n\nselect\n \ndeviceID\n,\n \nRoomTypeTable\n.\ntype\n \nas\n \nroomType\n,\n \ntype\n,\n \ntemp\n\n    \nhaving\n \nroomType\n \n==\n \nserver-room\n\n\ninsert\n \ninto\n \nServerRoomTempStream\n;\n\n\n\n\n\n\nDelete\n\n\nTo delete selected events that are stored in a table.\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ndelete\n \ntable\n \n(\nfor\n \noutput\n \nevent\n \ntype\n)\n?\n\n    \non\n \ncondition\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be deleted. \nWhen specifying the condition, table attributes should be referred to with the table name.\n\n\nTo execute delete for specific output event types, use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword with \nfor\n as shown\nin the syntax. For more information, see \noutput event type\n.\n\n\n\n\nNote\n\n\nTable attributes must be always referred to with the table name as follows: \n\ntable name\n.\nattibute name\n\n\n\n\nExample\n\n\nIn this example, the script deletes a record in the \nRoomTypeTable\n table if it has a value for the \nroomNo\n attribute that matches the value for the \nroomNumber\n attribute of an event in the \nDeleteStream\n stream.\n\n\ndefine\n \ntable\n \nRoomTypeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n);\n\n\n\ndefine\n \nstream\n \nDeleteStream\n \n(\nroomNumber\n \nint\n);\n\n\n\nfrom\n \nDeleteStream\n\n\ndelete\n \nRoomTypeTable\n\n    \non\n \nRoomTypeTable\n.\nroomNo\n \n==\n \nroomNumber\n;\n\n\n\n\n\n\nUpdate\n\n\nThis operator updates selected event attributes stored in a table based on a condition. \n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\nupdate\n \ntable\n \n(\nfor\n \noutput\n \nevent\n \ntype\n)\n?\n \n    \nset\n \ntable\n.\nattribute\n \nname\n \n=\n \n(\nattribute\n \nname\n|\nexpression\n)\n?\n,\n \ntable\n.\nattribute\n \nname\n \n=\n \n(\nattribute\n \nname\n|\nexpression\n)\n?\n,\n \n...\n\n    \non\n \ncondition\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be updated.\nWhen specifying the \ncondition\n, table attributes must be referred to with the table name.\n\n\nYou can use the \nset\n keyword to update selected attributes from the table. Here, for each assignment, the attribute specified in the left must be the table attribute, and the one specified in the right can be a stream/table attribute a mathematical operation, or other. When the \nset\n clause is not provided, all the attributes in the table are updated.\n\n\nTo execute an update for specific output event types use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword with \nfor\n as shown\nin the syntax. For more information, see \noutput event type\n.\n\n\n\n\nNote\n\n\nTable attributes must be always referred to with the table name as shown below:\n \ntable name\n.\nattibute name\n.\n\n\n\n\nExample\n\n\nThis Siddhi application updates the room occupancy in the \nRoomOccupancyTable\n table for each room number based on new arrivals and exits from the \nUpdateStream\n stream.\n\n\ndefine\n \ntable\n \nRoomOccupancyTable\n \n(\nroomNo\n \nint\n,\n \npeople\n \nint\n);\n\n\ndefine\n \nstream\n \nUpdateStream\n \n(\nroomNumber\n \nint\n,\n \narrival\n \nint\n,\n \nexit\n \nint\n);\n\n\n\nfrom\n \nUpdateStream\n\n\nselect\n \n*\n\n\nupdate\n \nRoomTypeTable\n\n    \nset\n \nRoomTypeTable\n.\npeople\n \n=\n \nRoomTypeTable\n.\npeople\n \n+\n \narrival\n \n-\n \nexit\n\n    \non\n \nRoomTypeTable\n.\nroomNo\n \n==\n \nroomNumber\n;\n\n\n\n\n\n\nUpdate or Insert\n\n\nThis allows you update if the event attributes already exist in the table based on a condition, or \nelse insert the entry as a new attribute.\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\nupdate\n \nor\n \ninsert\n \ntable\n \n(\nfor\n \noutput\n \nevent\n \ntype\n)\n?\n \n    \nset\n \ntable\n.\nattribute\n \nname\n \n=\n \nexpression\n,\n \ntable\n.\nattribute\n \nname\n \n=\n \nexpression\n,\n \n...\n\n    \non\n \ncondition\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected for update.\nWhen specifying the \ncondition\n, table attributes should be referred to with the table name. \nIf a record that matches the condition does not already exist in the table, the arriving event is inserted into the table.\n\n\nThe \nset\n clause is only used when the update operation is performed and it is used during the insert operation. \nWhen \nset\n clause is used the left hand side attribute should be always a table attribute and \nthe right hand side attribute can be stream/table attribute, mathematical \n operations or other. When \nset\n clause is not provided all attributes in the table will be updated.  \n\n\nTo execute update upon specific output event types use the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword with \nfor\n as shown\nin the syntax. To understand more refer \noutput event type\n section.\n\n\n\n\nNote\n\n\nTable attributes should be always referred to with the table name as \ntable name\n.\nattibute name\n.\n\n\n\n\nExample\n\n\nThe following query update for events in the \nUpdateTable\n event table that have room numbers that match the same in the \nUpdateStream\n stream. When such events are founding the event table, they are updated. When a room number available in the stream is not found in the event table, it is inserted from the stream.\n\n\ndefine\n \ntable\n \nRoomAssigneeTable\n \n(\nroomNo\n \nint\n,\n \ntype\n \nstring\n,\n \nassignee\n \nstring\n);\n\n\ndefine\n \nstream\n \nRoomAssigneeStream\n \n(\nroomNumber\n \nint\n,\n \ntype\n \nstring\n,\n \nassignee\n \nstring\n);\n\n\n\nfrom\n \nRoomAssigneeStream\n\n\nselect\n \nroomNumber\n \nas\n \nroomNo\n,\n \ntype\n,\n \nassignee\n\n\nupdate\n \nor\n \ninsert\n \nRoomAssigneeTable\n\n    \nset\n \nRoomAssigneeTable\n.\nassignee\n \n=\n \nassignee\n\n    \non\n \nRoomAssigneeTable\n.\nroomNo\n \n==\n \nroomNo\n;\n\n\n\n\n\n\nIn\n\n\nThis allows the stream to check whether the expected value exists in the table as a part of a conditional operation.\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n[\ncondition\n \nin\n \ntable\n]\n\n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nThe \ncondition\n element specifies the basis on which events are selected to be compared. \nWhen constructing the \ncondition\n, the table attribute must be always referred to with the table name as shown below:\n\ntable\n.\nattibute name\n.\n\n\nExample\n\n\nThis Siddhi application filters only room numbers that are listed in the \nServerRoomTable\n table.\n\n\ndefine\n \ntable\n \nServerRoomTable\n \n(\nroomNo\n \nint\n);\n\n\ndefine\n \nstream\n \nTempStream\n \n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n[\nServerRoomTable\n.\nroomNo\n \n==\n \nroomNo\n \nin\n \nServerRoomTable\n]\n\n\ninsert\n \ninto\n \nServerRoomTempStream\n;\n\n\n\n\n\n\nIncremental Aggregation\n\n\nIncremental aggregation allows you to obtain aggregates in an incremental manner for a specified set of time periods.\n\n\nThis not only allows you calculate aggregations with varied time granularity, but also allows you access them in an interactive\n manner for reports, dashboards, and for further processing. Its schema is defined via the \naggregation definition\n.\n\n\nPurpose\n\n\nIncremental aggregation allows you to retrieve the aggregate value for different time durations. \nThat is, it allows you to obtain aggregates such as \nsum\n, \ncount\n, \navg\n, \nmin\n, \nmax\n, and \ncount\n) \nof stream attributes for durations such as \nsec\n, \nmin\n, \nhour\n, etc. \n\n\nThis is of considerable importance in many Analytics scenarios because aggregate values are often needed for several time periods. \nFurthermore, this ensures that the aggregations are not lost due to unexpected system failures because aggregates can be stored in different persistence \nstores\n.\n\n\nSyntax\n\n\n@\nstore\n(\ntype\n=\nstore type\n,\n \n...)\n\n\ndefine\n \naggregation\n \naggregator\n \nname\n\n\nfrom\n \ninput\n \nstream\n\n\nselect\n \nattribute\n \nname\n,\n \naggregate\n \nfunction\n(\nattribute\n \nname\n)\n \nas\n \nattribute\n \nname\n,\n \n...\n\n    \ngroup\n \nby\n \nattribute\n \nname\n\n    \naggregate\n \nby\n \ntimestamp\n \nattribute\n \nevery\n \ntime\n \nperiods\n \n;\n\n\n\n\n\n\nThe above syntax includes the following:\n\n\n\n\n\n\n\n\nItem\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n@store\n\n\nThis annotation is used to refer to the data store where the calculated \naggregate results are stored. This annotation is optional. When \nno annotation is provided, the data is stored in the \nin-memory\n store.\n\n\n\n\n\n\naggregator name\n\n\nThis specifies a unique name for the aggregation so that it can be referred \nwhen accessing aggregate results.\n\n\n\n\n\n\ninput stream\n\n\nThe stream that feeds the aggregation. \nNote! this stream should be \nalready defined.\n\n\n\n\n\n\ngroup by \nattribute name\n\n\nThe \ngroup by\n clause is optional. If it is included in a Siddhi application, aggregate values \n are calculated per each \ngroup by\n attribute. If it is not used, all the\n events are aggregated together.\n\n\n\n\n\n\nby \ntimestamp attribute\n\n\nThis clause is optional. This defines the attribute that should be used as\n the timestamp. If this clause is not used, the event time is used by default.\n The timestamp could be given as either a \nstring\n or a \nlong\n value. If it is a \nlong\n value,\n the unix timestamp in milliseconds is expected (e.g. \n1496289950000\n). If it is \na \nstring\n value, the supported formats are \nyyyy\n-\nMM\n-\ndd\n \nHH\n:\nmm\n:\nss\n \n(if time is in GMT) and  \nyyyy\n-\nMM\n-\ndd\n \nHH\n:\nmm\n:\nss\n \nZ\n (if time is \nnot in GMT), here the ISO 8601 UTC offset must be provided for \nZ\n .\n(e.g., \n+05:30\n, \n-11:00\n).\n\n\n\n\n\n\ntime periods\n\n\nWhen the aggregation period is given as \nevery sec, hour, month\n, the aggregate values are calculated per second, per hour as well as per year.\n\n\n\n\n\n\n\n\nExample\n\n\nThis Siddhi Application defines an aggregation named \nTradeAggregation\n to calculate the average and sum for the \nprice\n attribute of events arriving at the \nTradeStream\n stream. These aggregates are calculated per every time granularity in the range second-year.\n\n\ndefine\n \nstream\n \nTradeStream\n \n(\nsymbol\n \nstring\n,\n \nprice\n \ndouble\n,\n \nvolume\n \nlong\n,\n \ntimestamp\n \nlong\n);\n\n\n\ndefine\n \naggregation\n \nTradeAggregation\n\n  \nfrom\n \nTradeStream\n\n  \nselect\n \nsymbol\n,\n \navg\n(\nprice\n)\n \nas\n \navgPrice\n,\n \nsum\n(\nprice\n)\n \nas\n \ntotal\n\n    \ngroup\n \nby\n \nsymbol\n\n    \naggregate\n \nby\n \ntimestamp\n \nevery\n \nsec\n \n...\n \nyear\n;\n\n\n\n\n\n\nJoin (Aggregation)\n\n\nThis allows a stream to retrieve calculated aggregate values from the aggregation. \n\n\n\n\nNote\n\n\nA join can also be performed with \ntwo streams\n, with a \ntable\n and a stream, or with a stream against externally \ndefined windows\n.\n\n\n\n\nSyntax\n\n\nA join with aggregation is similer to the join with \ntable\n, but with additional \nwithin\n and \nper\n clauses. \n\n\nfrom\n \ninput\n \nstream\n \njoin\n \naggrigation\n \n  \non\n \njoin\n \ncondition\n \n  \nwithin\n \ntime\n \nrange\n \n  \nper\n \ntime\n \ngranularity\n\n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n;\n\n\n\n\n\n\nApart from constructs of \ntable\n this includes the following :\n\n\n\n\n\n\n\n\nItem\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwithin  \ntime range\n\n\nThis allows you to specify the time interval for which the aggregate values need to be retrieved. This can be specified by providing the start and end time separated by a comma as \nstring\n or \nlong\n values, or by using the wildcard \nstring\n specifying the data range. For details refer examples.\n\n\n\n\n\n\nper \ntime granularity\n\n\nThis specifies the time granularity by which the aggregate values must be grouped and returned. e.g., If you specify \ndays\n, the retrieved aggregate values are grouped for each day within the selected time interval.\n\n\n\n\n\n\n\n\nwithin\n and \npar\n clauses also accept attribute values from the stream.\n\n\nExample\n\n\nThis query retrieves all aggregation per day within the time range \n\"2014-02-15 00:00:00 +05:30\", \"2014-03-16 00:00:00 +05:30\"\n.\n\n\ndefine\n \nstream\n \nStockStream\n \n(\nsymbol\n \nstring\n,\n \nvalue\n \nint\n);\n\n\n\nfrom\n \nStockStream\n \nas\n \nS\n \njoin\n \nTradeAggregation\n \nas\n \nT\n\n  \non\n \nS\n.\nsymbol\n \n==\n \nT\n.\nsymbol\n \n  \nwithin\n \n2014-02-15 00:00:00 +05:30\n,\n \n2014-03-16 00:00:00 +05:30\n \n  \nper\n \ndays\n \n\nselect\n \nS\n.\nsymbol\n,\n \nT\n.\ntotal\n,\n \nT\n.\navgPrice\n \n\ninsert\n \ninto\n \nAggregateStockStream\n;\n\n\n\n\n\n\nThis query retrieves all aggregation per hour within the day \n2014-02-15\n .\n\n\ndefine\n \nstream\n \nStockStream\n \n(\nsymbol\n \nstring\n,\n \nvalue\n \nint\n);\n\n\n\nfrom\n \nStockStream\n \nas\n \nS\n \njoin\n \nTradeAggregation\n \nas\n \nT\n\n  \non\n \nS\n.\nsymbol\n \n==\n \nT\n.\nsymbol\n \n  \nwithin\n \n2014-02-15 **:**:** +05:30\n\n  \nper\n \nhours\n \n\nselect\n \nS\n.\nsymbol\n,\n \nT\n.\ntotal\n,\n \nT\n.\navgPrice\n \n\ninsert\n \ninto\n \nAggregateStockStream\n;\n\n\n\n\n\n\nThis query retrieves all aggregation per value for an attribute of the stream  within the time period between timestamps \n1490918400\n and \n1490922000\n  \n\n\ndefine\n \nstream\n \nStockStream\n \n(\nsymbol\n \nstring\n,\n \nvalue\n \nint\n,\n \nperValue\n \nstring\n);\n\n\n\nfrom\n \nStockStream\n \nas\n \nS\n \njoin\n \nTradeAggregation\n \nas\n \nT\n\n  \non\n \nS\n.\nsymbol\n \n==\n \nT\n.\nsymbol\n \n  \nwithin\n \n1490918400\n,\n \n1490922000\n  \n  \nper\n \nS\n.\nperValue\n\n\nselect\n \nS\n.\nsymbol\n,\n \nT\n.\ntotal\n,\n \nT\n.\navgPrice\n \n\ninsert\n \ninto\n \nAggregateStockStream\n;\n\n\n\n\n\n\n(Defined)\n Window\n\n\nA defined window is a window that can be shared across multiple queries. \nEvents can be inserted to a defined window from one or more queries and it can produce output events based on the defined window type.\n\n\nSyntax\n\n\nThe syntax for a defined window is as follows:\n\n\ndefine\n \nwindow\n \nwindow\n \nname\n \n(\nattribute\n \nname\n \nattribute\n \ntype\n,\n \nattribute\n \nname\n \nattribute\n \ntype\n,\n \n...\n \n)\n \nwindow\n \ntype\n(\nparameter\n,\n \nparameter\n,\n \n\u2026\n)\n \noutput\n \nevent\n \ntype\n;\n\n\n\n\n\n\nThe following parameters are configured in a table definition:\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwindow name\n\n\nThe name of the window defined. (\nPascalCase\n is used for window names as a convention.)\n\n\n\n\n\n\nattribute name\n\n\nThe schema of the window is defined by its attributes with uniquely identifiable attribute names (\ncamalCase\n is used for attribute names as a convention.)\n\n\n\n\n\n\nattribute type\n\n\nThe type of each attribute defined in the schema. \n This can be \nSTRING\n, \nINT\n, \nLONG\n, \nDOUBLE\n, \nFLOAT\n, \nBOOL\n or \nOBJECT\n.\n\n\n\n\n\n\nwindow type\n(\nparameter\n, ...)\n\n\nThe window type associated with the window and its parameters.\n\n\n\n\n\n\noutput \noutput event type\n\n\nThis is optional. Keywords such as \ncurrent events\n, \nexpired events\n and \nall events\n (the default) can be used to specify when the window output should be exposed. For more information, see \noutput event type\n.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nReturning all output when events arrive and when events expire from the window.\n\n\nIn this query, the output event type is not specified. Therefore, it returns both current and expired events as the output.\n\n\n\ndefine window SensorWindow (name string, value float, roomNo int, deviceID string) timeBatch(1 second); \n\n\n\n\n\n\nReturning an output only when events expire from the window.\n\n\nIn this query, the output event type of the window is \nexpired events\n. Therefore, it only returns the events that have expired from the window as the output.\n\n\n\ndefine window SensorWindow (name string, value float, roomNo int, deviceID string) timeBatch(1 second) output expired events; \n\n\n\n\n\n\nOperators on Defined Windows\n\n\nThe following operators can be performed on defined windows.\n\n\nInsert\n\n\nThis allows events to be inserted into windows. This is similar to inserting events into streams. \n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \nwindow\n\n\n\n\n\n\nTo insert only events of a specific output event type, add the \ncurrent events\n, \nexpired events\n or the \nall events\n keyword between \ninsert\n and \ninto\n keywords (similar to how it is done for streams).\n\n\nFor more information, see \noutput event type\n.\n\n\nExample\n\n\nThis query inserts all events from the \nTempStream\n stream to the \nOneMinTempWindow\n window.\n\n\nfrom\n \nTempStream\n\n\nselect\n \n*\n\n\ninsert\n \ninto\n \nOneMinTempWindow\n;\n\n\n\n\n\n\nJoin (Window)\n\n\nTo allow a stream to retrieve information from a window based on a condition.\n\n\n\n\nNote\n\n\nA join can also be performed with \ntwo streams\n, \naggregation\n or with tables \ntables\n.\n\n\n\n\nSyntax\n\n\nfrom\n \ninput\n \nstream\n \njoin\n \nwindow\n\n    \non\n \ncondition\n\n\nselect\n \n(\ninput\n \nstream\n|\nwindow\n).\nattribute\n \nname\n,\n \n(\ninput\n \nstream\n|\nwindow\n).\nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nExample\n\n\nThis Siddhi Application performs a join count the number of temperature events having more then 40 degrees \n within the last 2 minutes. \n\n\ndefine\n \nwindow\n \nTwoMinTempWindow\n \n(\nroomNo\n \nint\n,\n \ntemp\n \ndouble\n)\n \ntime\n(\n2 min\n);\n\n\ndefine\n \nstream\n \nCheckStream\n \n(\nrequestId\n \nstring\n);\n\n\n\nfrom\n \nCheckStream\n \nas\n \nC\n \njoin\n \nTwoMinTempWindow\n \nas\n \nT\n\n    \non\n \nT\n.\ntemp\n \n \n40\n\n\nselect\n \nrequestId\n,\n \ncount\n(\nT\n.\ntemp\n)\n \nas\n \ncount\n\n\ninsert\n \ninto\n \nHighTempCountStream\n;\n\n\n\n\n\n\nFrom\n\n\nA window can be an input to a query, similar to streams. \n\n\nNote !!!\n     When window is used as an input to a query, another window cannot be applied on top of this.\n\n\nSyntax\n\n\nfrom\n \nwindow\n \n\nselect\n \nattribute\n \nname\n,\n \nattribute\n \nname\n,\n \n...\n\n\ninsert\n \ninto\n \noutput\n \nstream\n\n\n\n\n\n\nExample\n\nThis Siddhi Application calculates the maximum temperature within the last 5 minutes.\n\n\ndefine\n \nwindow\n \nFiveMinTempWindow\n \n(\nroomNo\n \nint\n,\n \ntemp\n \ndouble\n)\n \ntime\n(\n5 min\n);\n\n\n\n\nfrom\n \nFiveMinTempWindow\n\n\nselect\n \nname\n,\n \nmax\n(\nvalue\n)\n \nas\n \nmaxValue\n,\n \nroomNo\n\n\ninsert\n \ninto\n \nMaxSensorReadingStream\n;\n\n\n\n\n\n\nTrigger\n\n\nTriggers allow events to be periodically generated. \nTrigger definition\n can be used to define a trigger. \nA trigger also works like a stream with a predefined schema.\n\n\nPurpose\n\n\nFor some use cases the system should be able to periodically generate events based on a specified time interval to perform \nsome periodic executions. \n\n\nA trigger can be performed for a \n'start'\n operation, for a given \ntime interval\n, or for a given \n'\ncron expression\n'\n.\n\n\nSyntax\n\n\nThe syntax for a trigger definition is as follows.\n\n\ndefine\n \ntrigger\n \ntrigger\n \nname\n \nat\n \n(\nstart\n|\n \nevery\n \ntime\n \ninterval\n|\n \ncron expression\n);\n\n\n\n\n\n\nSimilar to streams, triggers can be used as inputs. They adhere to the following stream definition and produce the \ntriggered_time\n attribute of the \nlong\n type.\n\n\ndefine\n \nstream\n \ntrigger\n \nname\n \n(\ntriggered_time\n \nlong\n);\n\n\n\n\n\n\nThe following types of triggeres are currently supported:\n\n\n\n\n\n\n\n\nTrigger type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n'start'\n\n\nAn event is triggered when Siddhi is started.\n\n\n\n\n\n\nevery \ntime interval\n\n\nAn event is triggered periodically at the given time interval.\n\n\n\n\n\n\n'\ncron expression\n'\n\n\nAn event is triggered periodically based on the given cron expression. For configuration details, see \nquartz-scheduler\n.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\nTriggering events regularly at specific time intervals\n\n\nThe following query triggers events every 5 minutes.\n\n\nsql\n define trigger FiveMinTriggerStream at every 5 min;\n\n\n\n\n\n\nTriggering events at a specific time on specified days\n\n\nThe following query triggers an event at 10.15 AM on every weekdays.\n\n\n```sql\n define trigger FiveMinTriggerStream at '0 15 10 ? * MON-FRI';\n\n\n```\n\n\n\n\n\n\nScript\n\n\nScripts allow you to write functions in other programming languages and execute them within Siddhi queries. \nFunctions defined via scripts can be accessed in queries similar to any other inbuilt function. \n\nFunction definitions\n can be used to define these scripts.\n\n\nFunction parameters are passed into the function logic as \nObject[]\n and with the name \ndata\n . \n\n\nPurpose\n\n\nScripts allow you to define a function operation that is not provided in Siddhi core or its extension. It is not required to write an extension to define the function logic.\n\n\nSyntax\n\n\nThe syntax for a Script definition is as follows.\n\n\ndefine\n \nfunction\n \nfunction\n \nname\n[\nlanguage\n \nname\n]\n \nreturn\n \nreturn\n \ntype\n \n{\n\n    \noperation\n \nof\n \nthe\n \nfunction\n\n\n}\n;\n\n\n\n\n\n\nThe following parameters are configured when defining a script.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfunction name\n\n\nThe name of the function (\ncamalCase\n is used for the function name) as a convention.\n\n\n\n\n\n\nlanguage name\n\n\nThe name of the programming language used to define the script, such as \njavascript\n, \nr\n and \nscala\n.\n\n\n\n\n\n\nreturn type\n\n\nThe attribute type of the function\u2019s return. This can be \nint\n, \nlong\n, \nfloat\n, \ndouble\n, \nstring\n, \nbool\n or \nobject\n. Here the function implementer should be responsible for returning the output attribute on the defined return type for proper functionality.\n\n\n\n\n\n\noperation of the function\n\n\nHere, the execution logic of the function is added. This logic should be written in the language specified under the \nlanguage name\n, and it should return the output in the data type specified via the \nreturn type\n parameter.\n\n\n\n\n\n\n\n\nExamples\n\n\nThis query performs concatenation using JavaScript, and returns the output as a string.\n\n\ndefine\n \nfunction\n \nconcatFn\n[\njavascript\n]\n \nreturn\n \nstring\n \n{\n\n    \nvar\n \nstr1\n \n=\n \ndata\n[\n0\n];\n\n    \nvar\n \nstr2\n \n=\n \ndata\n[\n1\n];\n\n    \nvar\n \nstr3\n \n=\n \ndata\n[\n2\n];\n\n    \nvar\n \nresponce\n \n=\n \nstr1\n \n+\n \nstr2\n \n+\n \nstr3\n;\n\n    \nreturn\n \nresponce\n;\n\n\n}\n;\n\n\n\ndefine\n \nstream\n \nTempStream\n(\ndeviceID\n \nlong\n,\n \nroomNo\n \nint\n,\n \ntemp\n \ndouble\n);\n\n\n\nfrom\n \nTempStream\n\n\nselect\n \nconcatFn\n(\nroomNo\n,\n-\n,\ndeviceID\n)\n \nas\n \nid\n,\n \ntemp\n \n\ninsert\n \ninto\n \nDeviceTempStream\n;\n\n\n\n\n\n\nExtensions\n\n\nSiddhi supports an extension architecture to enhance its functionality by incorporating other libraries in a seamless manner. \n\n\nPurpose\n\n\nExtensions are supported because, Siddhi core cannot have all the functionality that's needed for all the use cases, mostly use cases require \ndifferent type of functionality, and for come cases there can be gaps and you need to write the functionality by yourself.\n\n\nAll extensions have a namespace. This is used to identify the relevant extensions together, and to let you specifically call the extension.\n\n\nSyntax\n\n\nExtensions follow the following syntax;\n\n\nnamespace\n:\nfunction\n \nname\n(\nparameter\n,\n \nparameter\n,\n \n...\n \n)\n\n\n\n\n\n\nThe following parameters are configured when referring a script function.\n\n\n\n\n\n\n\n\nParameter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnamespace\n\n\nAllows Siddhi to identify the extension without conflict\n\n\n\n\n\n\nfunction name\n\n\nThe name of the function referred.\n\n\n\n\n\n\nparameter\n\n\nThe function input parameter for function execution.\n\n\n\n\n\n\n\n\nExtension types\n\n\nSiddhi supports following extension types:\n\n\n\n\n\n\nFunction\n\n\nFor each event, it consumes zero or more parameters as input parameters and returns a single attribute. This can be used to manipulate existing event attributes to generate new attributes like any Function operation.\n\n\nThis is implemented by extending \norg.wso2.siddhi.core.executor.function.FunctionExecutor\n.\n\n\nExample : \n\n\nmath:sin(x)\n \n\n\nHere, the \nsin\n function of \nmath\n extension returns the sin value for the \nx\n parameter.\n\n\n\n\n\n\nAggregate Function\n\n\nFor each event, it consumes zero or more parameters as input parameters and returns a single attribute with aggregated results. This can be used in conjunction with a window in order to find the aggregated results based on the given window like any Aggregate Function operation. \n\n\nThis is implemented by extending \norg.wso2.siddhi.core.query.selector.attribute.aggregator.AttributeAggregator\n.\n\n\nExample : \n\n\ncustom:std(x)\n \n\n\nHere, the \nstd\n aggregate function of \ncustom\n extension returns the standard deviation of the \nx\n value based on its assigned window query. \n\n\n\n\n\n\nWindow\n \n\n\nThis allows events to be \ncollected, generated, dropped and expired anytime\n \nwithout altering\n the event format based on the given input parameters, similar to any other Window operator. \n\n\nThis is implemented by extending \norg.wso2.siddhi.core.query.processor.stream.window.WindowProcessor\n.\n\n\nExample : \n\n\ncustom:unique(key)\n \n\n\nHere, the \nunique\n window of the \ncustom\n extension retains one event for each unique \nkey\n parameter.\n\n\n\n\n\n\nStream Function\n\n\nThis allows events to be  \ngenerated or dropped only during event arrival\n and \naltered\n by adding one or more attributes to it. \n\n\nThis is implemented by extending  \norg.wso2.siddhi.core.query.processor.stream.function.StreamFunctionProcessor\n.\n\n\nExample :  \n\n\ncustom:pol2cart(theta,rho)\n \n\n\nHere, the \npol2cart\n function of the \ncustom\n extension returns all the events by calculating the cartesian coordinates \nx\n \n \ny\n and adding them as new attributes to the events.\n\n\n\n\n\n\nStream Processor\n\n\nThis allows events to be \ncollected, generated, dropped and expired anytime\n by \naltering\n the event format by adding one or more attributes to it based on the given input parameters. \n\n\nImplemented by extending \"org.wso2.siddhi.core.query.processor.stream.StreamProcessor\".\n\n\nExample :  \n\n\ncustom:perMinResults(\nparameter\n, \nparameter\n, ...)\n \n\n\nHere, the \nperMinResults\n function of the \ncustom\n extension returns all events by adding one or more attributes to the events based on the conversion logic. Altered events are output every minute regardless of event arrivals.\n\n\n\n\n\n\nSink\n\n\n\n\n\n\nSource\n\n\n\n\n\n\nStore\n\n\n\n\n\n\nScript\n\n\n\n\n\n\nExample\n\n\nA window extension created with namespace \nfoo\n and function name \nunique\n can be referred as follows:\n\n\nfrom\n \nStockExchangeStream\n[\nprice\n \n=\n \n20\n]\n#\nwindow\n.\nfoo\n:\nunique\n(\nsymbol\n)\n\n\nselect\n \nsymbol\n,\n \nprice\n\n\ninsert\n \ninto\n \nStockQuote\n\n\n\n\n\n\nAvailable Extensions\n\n\nSiddhi currently has several pre written extensions that are available \nhere\n\n\nWe value your contribution on improving Siddhi and its extensions further.\n\n\nWriting Custom Extensions\n\n\nCustom extensions can be written in order to cater use case specific logic that are not available in Siddhi out of the box or as an existing extension. \n\n\nMore information on this will be available soon.", 
            "title": "Siddhi Query Guide"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#siddhi-streaming-sql-guide-40", 
            "text": "", 
            "title": "Siddhi Streaming SQL Guide 4.0"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#introduction", 
            "text": "Siddhi Streaming SQL is designed to process event streams in a streaming manner, detect complex event occurrences, \nand notify them in real-time.", 
            "title": "Introduction"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#siddhi-application", 
            "text": "Streaming processing and Complex Event Processing rules can be written is Siddhi Streaming SQL and they can be put \ntogether as a  SiddhiApp  in a single file.   Purpose  Each Siddhi Application is an isolated processing unit that allows you to deploy and execute queries independent of other Siddhi applications in the system.  The following diagram depicts how  event flows  work with some of the key Siddhi Streaming SQL elements \nof the Siddhi Application.   Below table provides brief description of a few key elements in the Siddhi Streaming SQL Language.     Elements  Description      Stream  A logical series of events ordered in time with a uniquely identifiable name, and set of defined attributes with specific data types defining its schema.    Event  An event is associated with only one stream, and all events of that stream have an identical set of attributes that are assigned specific types (or the same schema). An event contains a timestamp and set of attribute values according to the schema.    Table  A structured representation of data stored with a defined schema. Stored data can be backed by  In-Memory ,  RDBMs ,  MongoDB , etc. to be accessed and manipulated at runtime.    Query  A logical construct that processes events in streaming manner by combining existing streams and/or tables, and generates events to an output stream or table. A query consumes one or more input streams, and zero or one table. Then it processes these events in a streaming manner and publishes the output events to streams or tables for further processing or to generate notifications.    Source  A contract that consumes data from external sources (such as  TCP ,  Kafka ,  HTTP , etc)in the form of events, then converts each event (which can be in  XML ,  JSON ,  binary , etc. format) to a Siddhi event, and passes that to a Stream for processing.    Sink  A contract that takes events arriving at a stream, maps them to a predefined data format (such as  XML ,  JSON ,  binary , etc), and publishes them to external endpoints (such as  E-mail ,  TCP ,  Kafka ,  HTTP , etc).    Input Handler  A mechanism to programmatically inject events into streams.    Stream/Query Callback  A mechanism to programmatically consume output events from streams and queries.    Partition  A logical container that isolates the processing of queries based on partition keys. Here, a separate instance of queries is generated for each partition key to achieve isolation.    Inner Stream  A positionable stream that connects portioned queries within their partitions, preserving isolation.     Grammar  An element of Siddhi SQL can be composed together as a script in a Siddhi application, Here each construct must be separated \nby a semicolon  ( ; )  as shown in the below syntax.   siddhi app   : \n         app annotation  * \n        (  stream definition  |  table definition  | ... ) + \n        (  query  |  partition  ) +\n        ;", 
            "title": "Siddhi Application"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#stream", 
            "text": "A stream is a logical series of events ordered in time. Its schema is defined via the  stream definition .\nA stream definition contains a unique name and a set of attributes with specific types and uniquely identifiable names within the stream.\nAll the events that are selected to be received into a specific stream have the same schema (i.e., have the same attributes in the same order).   Purpose  By defining a schema it unifies common types of events together. This enables them to be processed via queries using their defined attributes in a streaming manner, and allow sinks and sources to map events to/from various data formats.  Syntax  The syntax for defining a new stream is as follows.  define   stream   stream   name   ( attribute   name   attribute   type ,   attribute   name   attribute   type ,   ...   );   The following parameters are configured in a stream definition.     Parameter  Description      stream name  The name of the stream created. (It is recommended to define a stream name in  PascalCase .)    attribute name  The schema of an stream is defined by its attributes with uniquely identifiable attribute names. (It is recommended to define attribute names in  camalCase .)    attribute type  The type of each attribute defined in the schema.   This can be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL  or  OBJECT .     Example  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );   The above creates a stream named  TempStream  with the following attributes.   deviceID  of type  long  roomNo  of type  int    temp  of type  double", 
            "title": "Stream"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#source", 
            "text": "Sources receive events via multiple transports and in various data formats, and direct them into streams for processing.  A source configuration allows you to define a mapping in order to convert each incoming event from its native data format to a Siddhi event. When customizations to such mappings are not provided, Siddhi assumes that the arriving event adheres to the predefined format based on the stream definition and the selected message format.   Purpose  Source allows Siddhi to consume events from external systems, and map the events to adhere to the associated stream.   Syntax  To configure a stream that consumes events via a source, add the source configuration to a stream definition by adding the  @source  annotation with the required parameter values. \nThe source syntax is as follows:  @ source ( type = source_type ,   static . option . key1 = static_option_value1 ,   static . option . keyN = static_option_valueN , \n     @ map ( type = map_type ,   static . option_key1 = static_option_value1 ,   static . option . keyN = static_option_valueN , \n         @ attributes (   attributeN = attribute_mapping_N ,   attribute1 = attribute_mapping_1 ) \n     )  )  define   stream   stream_name   ( attribute1   Type1 ,   attributeN   TypeN );   This syntax includes the following annotations. Source  The  type  parameter of  @source  defines the source type that receives events. The other parameters to be configured \ndepends on the source type selected, some of the the parameters are optional.   For detailed information about the parameters see the documentation for the relevant source.  The following is the list of source types that are currently supported:   HTTP   (Only works in WSO2 Stream Processor)  Kafka  TCP  In-memory  WSO2Event  Email   (Only works in WSO2 Stream Processor)  JMS   (Only works in WSO2 Stream Processor)  File   (Only works in WSO2 Stream Processor)  RabbitMQ  MQTT   Source Mapper  Each  @source  configuration has a mapping denoted by the  @map  annotation that converts the incoming messages format to Siddhi events.  The  type  parameter of the  @map  defines the map type to be used to map the data. The other parameters to be \nconfigured depends on the mapper selected. Some of these parameters are optional.  \nFor detailed information about the parameters see the documentation for the relevant mapper.   Tip  When the  @map  annotation is not provided,  @map(type='passThrough')  is used as default. This default mapper type can be used when source consumes Siddhi events and when it does not need any mappings.   Map Attributes  @attributes  is an optional annotation used with  @map  to define custom mapping. When  @attributes  is not provided, each mapper\nassumes that the incoming events  adhere to its own default data format. By adding the  @attributes  annotation, you \ncan configure mappers to extract data from the incoming message selectively, and assign them to attributes.   There are two ways you can configure map attributes.    Defining attributes as keys and mapping content as values in the following format:   @attributes( attributeN='mapping_N', attribute1='mapping_1')    Defining the mapping content of all attributes in the same order as how the attributes are defined in stream definition:   @attributes( 'mapping_1', 'mapping_N')     Supported Mapping Types  The following is a list of currently supported source mapping types:   WSO2Event  XML  TEXT  JSON  Binary  Key Value   Example  This query receives events via the  HTTP  source in the  JSON  data format, and directs them to the  InputStream  stream for processing. \nHere the HTTP source is configured to receive events on all network interfaces on the  8080 port, on the  foo  context, and \nit is secured via basic authentication.  @ source ( type = http ,   receiver . url = http://0.0.0.0:8080/foo ,   is . basic . auth . enabled = true ,  \n   @ map ( type = json ))  define   stream   InputStream   ( name   string ,   age   int ,   country   string );", 
            "title": "Source"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#sink", 
            "text": "Sinks publish events from the streams via multiple transports to external endpoints in various data formats.  A sink configuration allows you to define a mapping to convert the Siddhi event to the required output data format (such as  JSON ,  TEXT ,  XML , etc.).\nWhen customization to such mappings is not provided, Siddhi converts events to its default format based on the stream definition and \nthe selected data format to publish the events.  Purpose  Sinks provide a way to publish Siddhi events to external systems in the preferred data format.   Syntax  To configure a stream to publish events via a sink, add the sink configuration to a stream definition by adding the  @sink  \nannotation with the required parameter values. The sink syntax is as follows:  @ sink ( type = sink_type ,   static_option_key1 = static_option_value1 ,   dynamic_option_key1 = {{dynamic_option_value1}} , \n     @ map ( type = map_type ,   static_option_key1 = static_option_value1 ,   dynamic_option_key1 = {{dynamic_option_value1}} , \n         @ payload ( payload_mapping ) \n     )  )  define   stream   stream_name   ( attribute1   Type1 ,   attributeN   TypeN );    Dynamic Properties  The sink and sink mapper properties that are categorized as  dynamic  have the ability to absorb attributes values \nfrom their associated streams. This can be done by using the attribute names in double curly braces as  {{...}}  when configuring the property value.   Some valid dynamic properties values are:    '{{attribute1}}'  'This is {{attribute1}}'    {{attribute1}}   {{attributeN}}      Here the attribute names in the double curly braces will be replaced with event values during execution.    This syntax includes the following annotations.  Sink  The  type  parameter of the  @sink  annotation defines the sink type that publishes the events. The other parameters to be configured \ndepends on the sink type selected. Some of these parameters are optional, and some can have dynamic values.   For detailed information about the parameters see documentation for the relevant sink.  The following is a list of currently supported sink types.   HTTP   (Only works in WSO2 Stream Processor)  Kafka  TCP  In-memory  WSO2Event  Email   (Only works in WSO2 Stream Processor)  JMS   (Only works in WSO2 Stream Processor)  File   (Only works in WSO2 Stream Processor)  RabbitMQ  MQTT   Sink Mapper  Each  @sink  annotation has a mapping denoted by the   @map  annotation that converts the Siddhi event to an outgoing message format.  The  type  parameter of the  @map  annotation defines the map type based on which the event is mapped. The other parameters to be configured depends on the mapper selected. Some of these parameters are optional and some have dynamic values.     For detailed information about the parameters see the documentation for the relevant mapping type.   Tip  When the  @map  annotation is not provided,  @map(type='passThrough')  is used by default. This can be used when the sink publishes in the Siddhi event format, or when it does not need any mappings.   Map Payload  @payload  is an optional annotation used with the  @map  annotation to define a custom mapping. When the  @payload  annotation is not provided, each mapper\nmaps the outgoing events to its own default data format. By defining the  @payload  annotation you can configure mappers to produce the output payload with attribute names of your choice, using dynamic properties by selectively assigning \nthe attributes in your preferred format.   There are two ways you can configure the  @payload  annotation.    Some mappers such as  XML ,  JSON , and  Test  accept only one output payload using the following format:   @payload( 'This is a test message from {{user}}.' )    Some mappers such  key-value  accept series of mapping values defined as follows:   @payload( key1='mapping_1', key2='user : {{user}}')     Supported Mapping Types  The following is a list of currently supported sink mapping types:   WSO2Event  XML  TEXT  JSON  Binary  Key Value   Example  This query publishes events from the  OutputStream  stream via the  HTTP  sink. Here the events are mapped to the default  JSON  payloads and sent to  http://localhost:8005/endpoint \n using the  POST  method, with the Accept  header, and secured via basic authentication where  admin  is both the username and the password.  @ sink ( type = http ,   publisher . url = http://localhost:8005/endpoint ,   method = POST ,   headers = Accept-Date:20/02/2017 ,  \n   basic . auth . username = admin ,   basic . auth . password = admin ,   basic . auth . enabled = true , \n   @ map ( type = json ))  define   stream   OutputStream   ( name   string ,   ang   int ,   country   string );", 
            "title": "Sink"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#query", 
            "text": "Each Siddhi query can consume one or more streams, and 0-1 tables, process the events in a streaming manner, and then generate an\n output event to a stream or perform a CRUD operation to a table.  Purpose  A query enables you to perform complex event rrocessing and stream processing operations by processing incoming events one by one in the order they arrive.  Syntax  All queries contain an input and an output section. Some also contain a projection section. A simple query with all three sections is as follows.  from   input   stream   select   attribute   name ,   attribute   name ,   ...  insert   into   output   stream / table   Example  This query included in a Siddhi Application consumes events from the  TempStream  stream (that is already defined) and outputs the room temperature and the room number to the  RoomTempStream  stream.  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream   select   roomNo ,   temp  insert   into   RoomTempStream ;    Inferred Stream  Here, the  RoomTempStream  is an inferred Stream, which means it can be used as any other defined stream \nwithout explicitly defining its stream definition. The definition of the  RoomTempStream  is inferred from the \nfirst query that produces the stream.", 
            "title": "Query"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#query-projection", 
            "text": "Siddhi queries supports the following for query projections.  \n     \n         Action \n         Description \n     \n     \n         Selecting required objects for projection \n         This involves selecting only some of the attributes from the input stream to be inserted into an output stream.\n             \n            E.g., The following query selects only the `roomNo` and `temp` attributes from the `TempStream` stream.\n             from TempStream select roomNo, temp insert into RoomTempStream; \n         \n     \n     \n         Selecting all attributes for projection \n         Selecting all the attributes in an input stream to be inserted into an output stream. This can be done by using asterisk ( * ) or by omitting the `select` statement.\n             \n            E.g., Both the following queries select all the attributes in the `NewTempStream` stream.\n             from TempStream select * insert into NewTempStream; \n            or\n             from TempStream insert into NewTempStream; \n         \n     \n     \n         Renaming attributes \n         This selects attributes from the input streams and inserts them into the output stream with different names.\n             \n            E.g., This query renames `roomNo` to `roomNumber` and `temp` to `temperature`.\n             from TempStream  select roomNo as roomNumber, temp as temperature insert into RoomTempStream; \n         \n     \n     \n         Introducing the constant value \n         This adds constant values by assigning it to an attribute using `as`.\n             \n            E.g., This query specifies 'C' to be used as the constant value for `scale` attribute. \n             from TempStream select roomNo, temp, 'C' as scale insert into RoomTempStream; \n         \n     \n     \n         Using mathematical and logical expressions \n         This uses attributes with mathematical and logical expressions in the precedence order given below, and assigns them to the output attribute using `as`.\n             \n             Operator precedence \n             \n                 \n                     Operator \n                     Distribution \n                     Example \n                 \n                 \n                     \n                        ()\n                     \n                     \n                        Scope\n                     \n                     \n                         (cost + tax) * 0.05 \n                     \n                 \n                 \n                     \n                         IS NULL\n                     \n                     \n                        Null check\n                     \n                     \n                         deviceID is null \n                     \n                 \n                 \n                     \n                        NOT\n                     \n                     \n                        Logical NOT\n                     \n                     \n                         not (price > 10) \n                     \n                 \n                 \n                     \n                         *   /   %  \n                     \n                     \n                        Multiplication, division, modulo\n                     \n                     \n                         temp * 9/5 + 32 \n                     \n                 \n                 \n                     \n                        +   -  \n                     \n                     \n                        Addition, substraction\n                     \n                     \n                         temp * 9/5 - 32 \n                     \n                 \n                 \n                     \n                         <     < =   >   >=\n                     \n                     \n                        Comparators: less-than, greater-than-equal, greater-than, less-than-equal\n                     \n                     \n                         totalCost >= price * quantity \n                     \n                 \n                 \n                     \n                        ==   !=  \n                     \n                     \n                        Comparisons: equal, not equal\n                     \n                     \n                         totalCost !=  price * quantity \n                     \n                 \n                 \n                     \n                        IN\n                     \n                     \n                        Contains in table\n                     \n                     \n                         roomNo in ServerRoomsTable \n                     \n                 \n                 \n                     \n                        AND\n                     \n                     \n                        Logical AND\n                     \n                     \n                         temp  <  40 and (humidity  <  40 or humidity >= 60) \n                     \n                 \n                 \n                     \n                        OR\n                     \n                     \n                        Logical OR\n                     \n                     \n                         temp  <  40 or (humidity  <  40 and humidity >= 60) \n                     \n                 \n             \n            E.g., Converting Celsius to Fahrenheit and identifying rooms with room number between 10 and 15 as server rooms.\n             from TempStream select roomNo, temp * 9/5 + 32 as temp, 'F' as scale, roomNo > 10 and roomNo  <  15 as isServerRoom insert into RoomTempStream;", 
            "title": "Query Projection"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#function", 
            "text": "A function consumes zero, one or more parameters and always produces a result value. It can be used in any location where\n an attribute can be used.   Purpose  Functions encapsulates complex execution logic that makes Siddhi applications simple and easy to understand.   Function Parameters  Functions parameters can be attributes, constant values, results of other functions, results of mathematical or logical expressions or time parameters. \nFunction parameters vary depending on the function being called.  Time is a special parameter that can be defined using the integer time value followed by its unit as  int   unit . \nFollowing are the supported unit types. Upon execution, time returns the value in the scale of milliseconds as a long value.   \n     \n         \n            Unit  \n         \n         \n            Syntax\n         \n     \n     \n         \n            Year\n         \n         \n            year | years\n         \n     \n     \n         \n            Month\n         \n         \n            month | months\n         \n     \n     \n         \n            Week\n         \n         \n            week | weeks\n         \n     \n     \n         \n            Day\n         \n         \n            day | days\n         \n     \n     \n         \n            Hour\n         \n         \n           hour | hours\n         \n     \n     \n         \n           Minutes\n         \n         \n           minute | minutes | min\n         \n     \n     \n         \n           Seconds\n         \n         \n           second | seconds | sec\n         \n     \n     \n         \n           Milliseconds\n         \n         \n           millisecond | milliseconds\n         \n       E.g. Passing 1 hour and 25 minutes to  test()  function.  test(1 hour 25 min)   Note  Functions, mathematical expressions, and logical expressions can be used in a nested manner.   Following are some inbuilt functions shipped with Siddhi, for more functions refer execution  extensions .   eventTimestamp  log  UUID  default  cast  convert  ifThenElse  minimum  maximum  coalesce  instanceOfBoolean  instanceOfDouble  instanceOfFloat  instanceOfInteger  instanceOfLong  instanceOfString   Example  The following configuration converts the  roomNo  to  string  and adds a  messageID  to each event using the  convert  and  UUID  functions.  from   TempStream  select   convert ( roomNo ,   string )   as   roomNo ,   temp ,   UUID ()   as   messageID  insert   into   RoomTempStream ;", 
            "title": "Function"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#filter", 
            "text": "Filters are included in queries to filter information from input streams based on a specified condition.  Purpose  A filter allows you to separate events that match a specific condition as the output, or for further processing.  Syntax  Filter conditions should be defined in square brackets next to the input stream name as shown below.  from   input   stream [ filter   condition ]  select   attribute   name ,   attribute   name ,   ...  insert   into   output   stream   Example  This query filters all server rooms of which the room number is within the range of 100-210, and having temperature greater than 40 degrees \nfrom the  TempStream  stream, and inserts the results into the  HighTempStream  stream.  from   TempStream [( roomNo   =   100   and   roomNo     210 )   and   temp     40 ]  select   roomNo ,   temp  insert   into   HighTempStream ;", 
            "title": "Filter"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#window", 
            "text": "Windows allow you to capture a subset of events based on a specific criterion from an input stream for calculation. \nEach input stream can only have a maximum of one window.  Purpose  To create subsets of events within a stream based on time duration, number of events, etc for processing. \nA window can operate in a sliding or tumbling (batch) manner.  Syntax  The  #window  prefix should be inserted next to the relevant stream in order to use a window.  from   input   stream # window . window   name ( parameter ,   parameter ,   ...   )  select   attribute   name ,   attribute   name ,   ...  insert   event   type   into   output   stream    Note  Filter condition can be applied both before and/or after the window   Example  If you want to identify the maximum temperature out of the last 10 events, you need to define a  length  window of 10 events.\n This window operates in a sliding mode where the following 3 subsets are calculated when a list of 12 events are received in a sequential order.     Subset  Event Range      1  1-10    2  2-11    3  3-12     The following query finds the maximum temperature out of  last 10 events  from the  TempStream  stream, \nand inserts the results into the  MaxTempStream  stream.  from   TempStream # window . length ( 10 )  select   max ( temp )   as   maxTemp  insert   into   MaxTempStream ;   If you define the maximum temperature reading out of every 10 events, you need to define a  lengthBatch  window of 10 events.\nThis window operates as a batch/tumbling mode where the following 3 subsets are calculated when a list of 30 events are received in a sequential order.     Subset  Event Range      1  1-10    2  11-20    3  21-30     The following query finds the maximum temperature out of  every 10 events  from the  TempStream  stream, \nand inserts the results into the  MaxTempStream  stream.  from   TempStream # window . lengthBatch ( 10 )  select   max ( temp )   as   maxTemp  insert   into   MaxTempStream ;    Note  Similar operations can be done based on time via  time  windows and  timeBatch  windows and for others. \nCode segments such as  #window.time(10 min)  considers events that arrive during the last 10 minutes in a sliding manner, and the  #window.timeBatch(2 min)  considers events that arrive every 2 minutes in a tumbling manner.    Following are some inbuilt windows shipped with Siddhi. For more window types, see execution  extensions .    time  timeBatch  length  lengthBatch  sort  frequent  lossyFrequent  cron  externalTime  externalTimeBatch   Output event types    Projection of the query depends on the output event types such as,  current  and  expired  event types.\n By default all queries produce  current  events and only queries with windows produce  expired  events \n when events expire from the window. You can specify whether the output of a query should be only current events, only expired events or both current and expired events.  Note!  Controlling the output event types does not alter the execution within the query, and it does not affect the accuracy of the query execution.    The following keywords can be used with the output stream to manipulate output.      Output event types  Description      current events  Outputs events when incoming events arrive to be processed by the query.   This is default when no specific output event type is specified.    expired events  Outputs events when events expires from the window.    all events  Outputs events when incoming events arrive to be processed by the query as well as   when events expire from the window.     The output event type keyword can be used between  insert  and  into  as shown in the following example.  Example  This query delays all events in a stream by 1 minute.    from   TempStream # window . time ( 1   min )  select   *  insert   expired   events   into   DelayedTempStream", 
            "title": "Window"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#aggregate-function", 
            "text": "Aggregate functions perform aggregate calculations in the query. \nWhen a window is defined the aggregation is restricted within that window. If no window is provided aggregation is performed from the start of the Siddhi application.  Syntax  from   input   stream # window . window   name ( parameter ,   parameter ,   ...   )  select   aggregate   function ( parameter ,   parameter ,   ...   )   as   attribute   name ,   attribute2   name ,   ...  insert   into   output   stream ;   Aggregate Parameters  Aggregate parameters can be attributes, constant values, results of other functions or aggregates, results of mathematical or logical expressions, or time parameters. \nAggregate parameters configured in a query  depends on the aggregate function being called.  Example  The following query calculates the average value for the  temp  attribute of the  TempStream  stream. This calculation is done for the last 10 minutes in a sliding manner, and the result is output as  avgTemp  to the  AvgTempStream  output stream.  from   TempStream # window . time ( 10   min )  select   avg ( temp )   as   avgTemp ,   roomNo ,   deviceID  insert   into   AvgTempStream ;   Following are some inbuilt aggregation functions shipped with Siddhi, for more aggregation functions, see execution  extensions .    avg  sum  max  min  count  distinctCount  maxForever  minForever  stdDev", 
            "title": "Aggregate function"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#group-by", 
            "text": "Group By allows you to group the aggregate based on specified attributes.  Syntax \nThe syntax for the Group By aggregate function is as follows:  from   input   stream # window . window   name (...)  select   aggregate   function (   parameter ,   parameter ,   ...)   as   attribute1   name ,   attribute2   name ,   ...  group   by   attribute1   name ,   attribute2   name   ...  insert   into   output   stream ;   Example \nThe following query calculates the average temperature per  roomNo  and  deviceID  combination, for events that arrive at the  TempStream  stream\nfor a sliding time window of 10 minutes.  from   TempStream # window . time ( 10   min )  select   avg ( temp )   as   avgTemp ,   roomNo ,   deviceID  group   by   roomNo ,   deviceID  insert   into   AvgTempStream ;", 
            "title": "Group By"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#having", 
            "text": "Having allows you to filter events after processing the  select  statement.  Purpose \nThis allows you to filter the aggregation output.  Syntax \nThe syntax for the Having aggregate function is as follows:  from   input   stream # window . window   name (   ...   )  select   aggregate   function (   parameter ,   parameter ,   ...)   as   attribute1   name ,   attribute2   name ,   ...  group   by   attribute1   name ,   attribute2   name   ...  having   condition  insert   into   output   stream ;   Example  The following query calculates the average temperature per room for the last 10 minutes, and alerts if it exceeds 30 degrees.  from   TempStream # window . time ( 10   min )  select   avg ( temp )   as   avgTemp ,   roomNo  group   by   roomNo  having   avgTemp     30  insert   into   AlertStream ;", 
            "title": "Having"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#join-stream", 
            "text": "Joins allow you to get a combined result from two streams in real-time based on a specified condition.   Purpose \nStreams are stateless. Therefore, in order to join two streams, they need to be connected to a window so that there is a pool of events that can be used for joining. Joins also accept conditions to join the appropriate events from each stream.  During the joining process each incoming event of each stream is matched against all the events in the other \nstream's window based on the given condition, and the output events are generated for all the matching event pairs.   Note  Join can also be performed with  stored data ,  aggregation  or externally  defined windows .   Syntax  The syntax for a join is as follows:  from   input   stream # window . window   name ( parameter ,   ...   )   { unidirectional }   { as   reference } \n          join   input   stream # window . window   name ( parameter ,    ...   )   { unidirectional }   { as   reference } \n     on   join   condition  select   attribute   name ,   attribute   name ,   ...  insert   into   output   stream   Here, the  join condition  allows you to match the attributes from both the streams.   Unidirectional join operation  By default, events arriving at either stream can trigger the joining process. However, if you want to control the \njoin execution, you can add the  unidirectional  keyword next to a stream in the join definition as depicted in the \nsyntax in order to enable that stream to trigger the join operation. Here, events arriving at other stream only update the \n window of that stream, and this stream does not trigger the join operation.   Note  The  unidirectional  keyword cannot be applied to both the input streams because the default behaviour already allows both streams to trigger the join operation.   Example  Assuming that the temperature of regulators are updated every minute. \nFollowing is a Siddhi App the controls the temperature regulators if they are not already  on  for all the rooms with a room temperature greater than 30 degrees.    define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  define   stream   RegulatorStream ( deviceID   long ,   roomNo   int ,   isOn   bool );  from   TempStream [ temp     30 . 0 ] # window . time ( 1   min )   as   T \n   join   RegulatorStream [ isOn   ==   false ] # window . length ( 1 )   as   R \n   on   T . roomNo   ==   R . roomNo  select   T . roomNo ,   R . deviceID ,   start   as   action  insert   into   RegulatorActionStream ;   Supported join types    Following are the supported operations of a join clause.    Inner join (join)    This is the default behaviour of a join operation.  join  is used as the keyword to join both the streams. The output is generated only if there is a matching event in both the streams.    Left outer join    The left outer join operation allows you to join two streams to be merged based on a condition.  left outer join  is used as the keyword to join both the streams.  Here, it returns all the events of left stream even if there are no matching events in the right stream by \nhaving null values for the attributes of the right stream.  Example  The following query generates output events for all events from the  StockStream  stream regardless of whether a matching \nsymbol exists in the  TwitterStream  stream or not.  \nfrom StockStream#window.time(1 min) as S\n  left outer join TwitterStream#window.length(1) as T\n  on S.symbol== T.symbol\nselect S.symbol as symbol, T.tweet, S.price\ninsert into outputStream ;        Right outer join    This is similar to a left outer join.  Right outer join  is used as the keyword to join both the streams.\nIt returns all the events of the right stream even if there are no matching events in the left stream.     Full outer join    The full outer join combines the results of left outer join and right outer join.  full outer join  is used as the keyword to join both the streams.\nHere, output event are generated for each incoming event even if there are no matching events in the other stream.  Example  The following query generates output events for all the incoming events of each stream regardless of whether there is a \nmatch for the  symbol  attribute in the other stream or not.  \nfrom StockStream#window.time(1 min) as S\n  full outer join TwitterStream#window.length(1) as T\n  on S.symbol== T.symbol\nselect S.symbol as symbol, T.tweet, S.price\ninsert into outputStream ;", 
            "title": "Join (Stream)"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#pattern", 
            "text": "This is a state machine implementation that allows you to detect patterns in the events that arrive over time. This can correlate events within a single stream or between multiple streams.   Purpose    Patterns allow you to identify trends in events over a time period.  Syntax  The following is the syntax for a pattern query:  from   ( every ) ?   event   reference = input   stream [ filter   condition ]   -  \n     ( every ) ?   event   reference = input   stream   [ filter   condition ]   -  \n     ...  \n     ( within   time   gap ) ?       select   event   reference . attribute   name ,   event   reference . attribute   name ,   ...  insert   into   output   stream      Items  Description      -  This is used to indicate an event that should be following another event. The subsequent event does not necessarily have to occur immediately after the preceding event. The condition to be met by the preceding event should be added before the sign, and the condition to be met by the subsequent event should be added after the sign.    event reference  This allows you to add a reference to the the matching event so that it can be accessed later for further processing.    (within  time gap )?  The  within  clause is optional. It defines the time duration within which all the matching events should occur.    every  every  is an optional keyword. This defines whether the event matching should be triggered for every event arrival in the specified stream with the matching condition.   When this keyword is not used, the matching is carried out only once.     Siddhi also supports pattern matching with counting events and matching events in a logical order such as ( and ,  or , and  not ). These are described in detail further below in this guide.  Example  This query sends an alert if the temperature of a room increases by 5 degrees within 10 min.  from   every (   e1 = TempStream   )   -   e2 = TempStream [   e1 . roomNo   ==   roomNo   and   ( e1 . temp   +   5 )   =   temp   ] \n     within   10   min  select   e1 . roomNo ,   e1 . temp   as   initialTemp ,   e2 . temp   as   finalTemp  insert   into   AlertStream ;   Here, the matching process begins for each event in the  TempStream  stream (because  every  is used with  e1=TempStream ), \nand if  another event arrives within 10 minutes with a value for the  temp  attribute that is greater than or equal to  e1.temp + 5  \nof the event e1, an output is generated via the  AlertStream .", 
            "title": "Pattern"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#counting-pattern", 
            "text": "Counting patterns allow you to match multiple events that may have been received for the same matching condition.\nThe number of events matched per condition can be limited via condition postfixes.  Syntax  Each matching condition can contain a collection of events with the minimum and maximum number of events to be matched as shown in the syntax below.   from   ( every ) ?   event   reference = input   stream [ filter   condition ]   ( min   count : max   count ) ?   -   \n     ...  \n     ( within   time   gap ) ?       select   event   reference ([ event   index ]) ? . attribute   name ,   ...  insert   into   output   stream      Postfix  Description  Example       n1:n2  This matches  n1  to  n2  events (including  n1  and not more than  n2 ).  1:4  matches 1 to 4 events.     n:  This matches  n  or more events (including  n ).  2:  matches 2 or more events.     :n  This matches up to  n  events (excluding  n ).  :5  matches up to 5 events.     n  This matches exactly  n  events.  5  matches exactly 5 events.      Specific occurrences of the event in a collection can be retrieved by using an event index with its reference.\nSquare brackets can be used to indicate the event index where  1  can be used as the index of the first event and  last  can be used as the index\n for the  last  available event in the event collection. If you provide an index greater then the last event index,\n the system returns  null . The following are some valid examples.   e1[3]  refers to the 3rd event.  e1[last]  refers to the last event.  e1[last - 1]  refers to the event before the last event.   Example  The following Siddhi App calculates the temperature difference between two regulator events.  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  define   stream   RegulatorStream   ( deviceID   long ,   roomNo   int ,   tempSet   double ,   isOn   bool );  from   every (   e1 = RegulatorStream )   -   e2 = TempStream [ e1 . roomNo == roomNo ] 1 :   -   e3 = RegulatorStream [ e1 . roomNo == roomNo ]  select   e1 . roomNo ,   e2 [ 0 ]. temp   -   e2 [ last ]. temp   as   tempDiff  insert   into   TempDiffStream ;", 
            "title": "Counting Pattern"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#logical-patterns", 
            "text": "Logical patterns match events that arrive in temporal order and correlate them with logical relationships such as  and ,  or  and  not .   Syntax  from   ( every ) ?   ( not ) ?   event   reference = input   stream [ filter   condition ]  \n           (( and | or )   event   reference = input   stream [ filter   condition ]) ?   ( within   time   gap ) ?   -   \n     ...   select   event   reference ([ event   index ]) ? . attribute   name ,   ...  insert   into   output   stream   Keywords such as  and ,  or , or  not  can be used to illustrate the logical relationship.     Key Word  Description      and  This allows both conditions of  and  to be matched by two events in any order.    or  The state succeeds if either condition of  or  is satisfied. Here the event reference of the other condition is  null .    not  condition1  and  condition2  When  not  is included with  and , it identifies the events that match   arriving before any event that match  . is identified.    not  condition  for  time period  When  not  is included with  for , it allows you to identify a situation where no event that matches  condition1  arrives during the specified  time period .  e.g., from not TemperatureStream[temp   60] for 5 sec .     Example  Following Siddhi App, sends the  stop  control action to the regulator when the key is removed from the hotel room.   define   stream   RegulatorStateChangeStream ( deviceID   long ,   roomNo   int ,   tempSet   double ,   action   string );  define   stream   RoomKeyStream ( deviceID   long ,   roomNo   int ,   action   string );  from   every (   e1 = RegulatorStateChangeStream [   action   ==   on   ]   )   -  \n       e2 = RoomKeyStream [   e1 . roomNo   ==   roomNo   and   action   ==   removed   ]   or   e3 = RegulatorStateChangeStream [   e1 . roomNo   ==   roomNo   and   action   ==   off ]  select   e1 . roomNo ,   ifThenElse (   e2   is   null ,   none ,   stop   )   as   action  having   action   !=   none  insert   into   RegulatorActionStream ;   This Siddhi Application generates an alert if we have switch off the regulator before the temperature reaches 12 degrees.    define   stream   RegulatorStateChangeStream ( deviceID   long ,   roomNo   int ,   tempSet   double ,   action   string );  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   e1 = RegulatorStateChangeStream [ action   ==   start ]   -   not   TempStream [ e1 . roomNo   ==   roomNo   and   temp     12 ]   and   e2 = RegulatorStateChangeStream [ action   ==   off ]  select   e1 . roomNo   as   roomNo  insert   into   AlertStream ;   This Siddhi Application generates an alert if the temperature does not reduce to 12 degrees within 5 minutes of switching on the regulator.    define   stream   RegulatorStateChangeStream ( deviceID   long ,   roomNo   int ,   tempSet   double ,   action   string );  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   e1 = RegulatorStateChangeStream [ action   ==   start ]   -   not   TempStream [ e1 . roomNo   ==   roomNo   and   temp     12 ]   for   5 min  select   e1 . roomNo   as   roomNo  insert   into   AlertStream ;", 
            "title": "Logical Patterns"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#sequence", 
            "text": "Sequence is a state machine implementation that allows you to detect the sequence of event occurrences over time. \nHere  all matching events need to arrive consecutively  to match the sequence condition, and there cannot be any non-matching events arriving within a matching sequence of events.\nThis can correlate events within a single stream or between multiple streams.   Purpose    This allows you to detect a specified event sequence over a specified time period.   Syntax  The syntax for a sequence query is as follows:  from   ( every ) ?   event   reference = input   stream [ filter   condition ],  \n     event   reference = input   stream   [ filter   condition ],  \n     ...  \n     ( within   time   gap ) ?       select   event   reference . attribute   name ,   event   reference . attribute   name ,   ...  insert   into   output   stream      Items  Description      ,  This represents the immediate next event i.e., when an event that matches the first condition arrives, the event that arrives immediately after it should match the second condition.    event reference  This allows you toadd a reference to the the matching event so that it can be accessed later for further processing.    (within  time gap )?  The  within  clause is optional. It defines the time duration within which all the matching events should occur.    every  every  is an optional keyword. This defines whether the matching event should be triggered for every event that arrives at the specified stream with the matching condition.   When this keyword is not used, the matching is carried out only once.     Example  This query generates an alert if the increase in the temperature between two consecutive temperature events exceeds one degree.  from   every   e1 = TempStream ,   e2 = TempStream [ e1 . temp   +   1     temp ]  select   e1 . temp   as   initialTemp ,   e2 . temp   as   finalTemp  insert   into   AlertStream ;   Counting Sequence  Counting sequences allow you to match multiple events for the same matching condition.\nThe number of events matched per condition can be limited via condition postfixes such as  Counting Patterns , or by using the  * ,  + , and  ?  operators.  The matching events can also be retrieved using event indexes, similar to how it is done in  Counting Patterns .  Syntax  Each matching condition in a sequence can contain a collection of events as shown below.   from   ( every ) ?   event   reference = input   stream [ filter   condition ]( +|*|? ) ? ,  \n     event   reference = input   stream   [ filter   condition ]( +|*|? ) ? ,  \n     ...  \n     ( within   time   gap ) ?       select   event   reference . attribute   name ,   event   reference . attribute   name ,   ...  insert   into   output   stream      Postfix symbol  Required/Optional  Description      +  Optional  This matches  one or more  events to the given condition.    *  Optional  This matches  zero or more  events to the given condition.    ?  Optional  This matches  zero or one  events to the given condition.     Example  This Siddhi application identifies temperature peeks.  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  from   every   e1 = TempStream ,   e2 = TempStream [ e1 . temp   =   temp ] + ,   e3 = TempStream [ e2 [ last ]. temp     temp ]  select   e1 . temp   as   initialTemp ,   e2 [ last ]. temp   as   peakTemp  insert   into   PeekTempStream ;   Logical Sequence  Logical sequences identify logical relationships using  and ,  or  and  not  on consecutively arriving events.  Syntax \nThe syntax for a logical sequence is as follows:  from   ( every ) ?   ( not ) ?   event   reference = input   stream [ filter   condition ]  \n           (( and | or )   event   reference = input   stream [ filter   condition ]) ?   ( within   time   gap ) ? ,  \n     ...   select   event   reference ([ event   index ]) ? . attribute   name ,   ...  insert   into   output   stream   Keywords such as  and ,  or , or  not  can be used to illustrate the logical relationship, similar to how it is done in  Logical Patterns .   Example  This Siddhi application notifies the state when a regulator event is immediately followed by both temperature and humidity events.   define   stream   TempStream ( deviceID   long ,   temp   double );  define   stream   HumidStream ( deviceID   long ,   humid   double );  define   stream   RegulatorStream ( deviceID   long ,   isOn   bool );  from   every   e1 = RegulatorStream ,   e2 = TempStream   and   e3 = HumidStream  select   e2 . temp ,   e3 . humid  insert   into   StateNotificationStream ;", 
            "title": "Sequence"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#output-rate-limiting", 
            "text": "Output rate limiting allows queries to output events periodically based on a specified condition.  Purpose  This allows you to limit the output to avoid overloading the subsequent executions, and to remove unnecessary information.  Syntax  The syntax of an output rate limiting configuration is as follows:  from   input   stream   ...  select   attribute   name ,   attribute   name ,   ...  output   rate   limiting   configuration  insert   into   output   stream   Siddhi supports three types of output rate limiting configurations as explained in the following table:      Rate limiting configuration  Syntax  Description      Based on time  output event  every  time interval  This outputs  output event  every  time interval  time interval.    Based on number of events  output event  every  event interval  events  This outputs  output event  for every  event interval  number of events.    Snapshot based output  snapshot every  time interval  This outputs all events in the window (or the last event if no window is defined in the query) for every given  time interval  time interval.     Here the  output event  specifies the event(s) that should be returned as the output of the query. \nThe possible values are as follows:   first  : Only the first event processed by the query during the specified time interval/sliding window is emitted.   last  : Only the last event processed by the query during the specified time interval/sliding window is emitted.\n*  all  : All the events processed by the query during the specified time interval/sliding window are emitted.  When no  output event  is defined,  all  is used by default.  Examples    Returning events based on the number of events  Here, events are emitted every time the specified number of events arrive. You can also specify whether to emit only the first event/last event, or all the events out of the events that arrived.  In this example, the last temperature per sensor is emitted for every 10 events.  \nfrom TempStreamselect \nselect temp, deviceID\ngroup by deviceID\noutput last every 10 events\ninsert into LowRateTempStream;        Returning events based on time  Here events are emitted for every predefined time interval. You can also specify whether to emit only the first event, last event, or all events out of the events that arrived during the specified time interval.  In this example, emits all temperature events every 10 seconds    \nfrom TempStreamoutput \noutput every 10 sec\ninsert into LowRateTempStream;        Returning a periodic snapshot of events  This method works best with windows. When an input stream is connected to a window, snapshot rate limiting emits all the current events that have arrived and do not have corresponding expired events for every predefined time interval. \nIf the input stream is not connected to a window, only the last current event for each predefined time interval is emitted.  This query emits a snapshot of the events in a time window of 5 seconds every 1 second.   \nfrom TempStream#window.time(5 sec)\noutput snapshot every 1 sec\ninsert into SnapshotTempStream;", 
            "title": "Output rate limiting"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#partition", 
            "text": "Partitions divide streams and queries into isolated groups in  order to process them in parallel and in isolation. \nA partition can contain one or more queries and there can be multiple instances where the same queries and streams are replicated for each partition. \nEach partition is tagged with a partition key. Those partitions only process the events that match the corresponding partition key.   Purpose    Partitions allow you to process the events groups in isolation so that event processing can be performed using the same set of queries for each group.   Partition key generation  A partition key can be generated in the following two methods:    Partition by value  This is created by generating unique values using input stream attributes.  Syntax  \npartition with (  expression  of  stream name ,  expression  of  stream name , ... )\nbegin\n     query \n     query \n    ...\nend;   Example  This query calculates the maximum temperature recorded within the last 10 events per  deviceID .  \npartition with ( deviceID of TempStream )\nbegin\n    from TempStream#window.length(10)\n    select roomNo, deviceID, max(temp) as maxTemp\n    insert into DeviceTempStream;\nend;    Partition by range  This is created by mapping each partition key to a range condition of the input streams numerical attribute.  Syntax  \npartition with (  condition  as  partition key  or  condition  as  partition key  or ... of  stream name , ... )\nbegin\n     query \n     query \n    ...\nend;  Example  This query calculates the average temperature for the last 10 minutes per office area.  \npartition with ( roomNo  = 1030 as 'serverRoom' or \n                 roomNo   1030 and roomNo  = 330 as 'officeRoom' or \n                 roomNo   330 as 'lobby' of TempStream)\nbegin\n    from TempStream#window.time(10 min)\n    select roomNo, deviceID, avg(temp) as avgTemp\n    insert into AreaTempStream\nend;", 
            "title": "Partition"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#inner-stream", 
            "text": "Queries inside a partition block can use inner streams to communicate with each other while preserving partition isolation.\nInner streams are denoted by a \"#\" placed before the stream name, and these streams cannot be accessed outside a partition block.   Purpose  Inner streams allow you to connect queries within the partition block so that the output of a query can be used as an input only by another query \nwithin the same partition. Therefore, you do not need to repartition the streams if they are communicating within the partition.  Example  This partition calculates the average temperature of every 10 events for each sensor, and sends an output to the  DeviceTempIncreasingStream  stream if the consecutive average temperature values increase by more than \n5 degrees.  \npartition with ( deviceID of TempStream )\nbegin\n    from TempStream#window.lengthBatch(10)\n    select roomNo, deviceID, avg(temp) as avgTemp\n    insert into #AvgTempStream\n\n    from every (e1=#AvgTempStream),e2=#AvgTempStream[e1.avgTemp + 5  <  avgTemp]\n    select e1.deviceID, e1.avgTemp as initialAvgTemp, e2.avgTemp as finalAvgTemp\n    insert into DeviceTempIncreasingStream\nend;", 
            "title": "Inner Stream"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#table", 
            "text": "A table is a stored version of an stream or a table of events. Its schema is defined via the  table definition  that is\nsimilar to a stream definition. These events are by default stored  in-memory , but Siddhi also provides store extensions to work with data/events stored in various data stores through the \ntable abstraction.  Purpose  Tables allow Siddhi to work with stored events. By defining a schema for tables Siddhi enables them to be processed by queries using their defined attributes with the streaming data. You can also interactively query the state of the stored events in the table.  Syntax  The syntax for a new table definition is as follows:  define   stream   stream   name   ( attribute   name   attribute   type ,   attribute   name   attribute   type ,   ...   );   The following parameters are configured in a table definition:     Parameter  Description      table name  The name of the table defined. ( PascalCase  is used for table name as a convention.)    attribute name  The schema of the table is defined by its attributes with uniquely identifiable attribute names ( camalCase  is used for attribute names as a convention.)    attribute type  The type of each attribute defined in the schema.   This can be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL  or  OBJECT .     Example  The following defines a table named  RoomTypeTable  with  roomNo  and  type  attributes of data types  int  and  string  respectively.  define   table   RoomTypeTable   (   roomNo   int ,   type   string   );   Primary Keys  Tables can be configured with primary keys to avoid the duplication of data.   Primary keys are configured by including the  @PrimaryKey( 'key1', 'key2' )  annotation to the table definition. \nEach event table configuration can have only one  @PrimaryKey  annotation. \nThe number of attributes supported differ based on the table implementations. When more than one attribute \n is used for the primary key, the uniqueness of the events stored in the table is determined based on the combination of values for those attributes.  Examples  This query creates an event table with the  symbol  attribute as the primary key. \nTherefore each entry in this table must have a unique value for  symbol  attribute.  @ PrimaryKey ( symbol )  define   table   StockTable   ( symbol   string ,   price   float ,   volume   long );   Indexes  Indexes allow tables to be searched/modified much faster.   Indexes are configured by including the  @Index( 'key1', 'key2' )  annotation to the table definition.\n Each event table configuration can have 0-1  @Index  annotations. \n Support for the  @Index  annotation and the number of attributes supported differ based on the table implementations. \n When more then one attribute is used for index, each one of them is used to index the table for fast access of the data. \n Indexes can be configured together with primary keys.   Examples  This query creates an indexed event table named  RoomTypeTable  with the  roomNo  attribute as the index key.  @ Index ( roomNo )  define   table   RoomTypeTable   ( roomNo   int ,   type   string );   Operators on Table  The following operators can be performed on tables.", 
            "title": "Table"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#insert", 
            "text": "This allows events to be inserted into tables. This is similar to inserting events into streams.    Warning  If the table is defined with primary keys, and if you insert duplicate data, primary key constrain violations can occur. \nIn such cases use the  update or insert  operation.    Syntax  from   input   stream   select   attribute   name ,   attribute   name ,   ...  insert   into   table   Similar to streams, you need to use the  current events ,  expired events  or the  all events  keyword between  insert  and  into  keywords in order to insert only the specific output event types. \nFor more information, see  output event type .  Example  This query inserts all the events from the  TempStream  stream to the  TempTable  table.  from   TempStream  select   *  insert   into   TempTable ;", 
            "title": "Insert"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#join-table", 
            "text": "This allows a stream to retrieve information from a table in a streaming manner.   Note  Joins can also be performed with  two streams ,  aggregation  or against externally  defined windows .   Syntax  from   input   stream   join   table \n     on   condition  select   ( input   stream | table ). attribute   name ,   ( input   stream | table ). attribute   name ,   ...  insert   into   output   stream    Note  A table can only be joint with a stream. Two tables cannot be joint because there must be at least one active \nentity to trigger the join operation.   Example  This Siddhi App performs a join to retrieve the room type from  RoomTypeTable  table based on the room number, so that it can filter the events related to  server-room s.  define   table   RoomTypeTable   ( roomNo   int ,   type   string );  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream   join   RoomTypeTable \n     on   RoomTypeTable . roomNo   ==   TempStream . roomNo  select   deviceID ,   RoomTypeTable . type   as   roomType ,   type ,   temp \n     having   roomType   ==   server-room  insert   into   ServerRoomTempStream ;", 
            "title": "Join (Table)"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#delete", 
            "text": "To delete selected events that are stored in a table.  Syntax  from   input   stream   select   attribute   name ,   attribute   name ,   ...  delete   table   ( for   output   event   type ) ? \n     on   condition   The  condition  element specifies the basis on which events are selected to be deleted. \nWhen specifying the condition, table attributes should be referred to with the table name.  To execute delete for specific output event types, use the  current events ,  expired events  or the  all events  keyword with  for  as shown\nin the syntax. For more information, see  output event type .   Note  Table attributes must be always referred to with the table name as follows:  table name . attibute name   Example  In this example, the script deletes a record in the  RoomTypeTable  table if it has a value for the  roomNo  attribute that matches the value for the  roomNumber  attribute of an event in the  DeleteStream  stream.  define   table   RoomTypeTable   ( roomNo   int ,   type   string );  define   stream   DeleteStream   ( roomNumber   int );  from   DeleteStream  delete   RoomTypeTable \n     on   RoomTypeTable . roomNo   ==   roomNumber ;", 
            "title": "Delete"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#update", 
            "text": "This operator updates selected event attributes stored in a table based on a condition.   Syntax  from   input   stream   select   attribute   name ,   attribute   name ,   ...  update   table   ( for   output   event   type ) ?  \n     set   table . attribute   name   =   ( attribute   name | expression ) ? ,   table . attribute   name   =   ( attribute   name | expression ) ? ,   ... \n     on   condition   The  condition  element specifies the basis on which events are selected to be updated.\nWhen specifying the  condition , table attributes must be referred to with the table name.  You can use the  set  keyword to update selected attributes from the table. Here, for each assignment, the attribute specified in the left must be the table attribute, and the one specified in the right can be a stream/table attribute a mathematical operation, or other. When the  set  clause is not provided, all the attributes in the table are updated.  To execute an update for specific output event types use the  current events ,  expired events  or the  all events  keyword with  for  as shown\nin the syntax. For more information, see  output event type .   Note  Table attributes must be always referred to with the table name as shown below:\n  table name . attibute name .   Example  This Siddhi application updates the room occupancy in the  RoomOccupancyTable  table for each room number based on new arrivals and exits from the  UpdateStream  stream.  define   table   RoomOccupancyTable   ( roomNo   int ,   people   int );  define   stream   UpdateStream   ( roomNumber   int ,   arrival   int ,   exit   int );  from   UpdateStream  select   *  update   RoomTypeTable \n     set   RoomTypeTable . people   =   RoomTypeTable . people   +   arrival   -   exit \n     on   RoomTypeTable . roomNo   ==   roomNumber ;", 
            "title": "Update"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#update-or-insert", 
            "text": "This allows you update if the event attributes already exist in the table based on a condition, or \nelse insert the entry as a new attribute.  Syntax  from   input   stream   select   attribute   name ,   attribute   name ,   ...  update   or   insert   table   ( for   output   event   type ) ?  \n     set   table . attribute   name   =   expression ,   table . attribute   name   =   expression ,   ... \n     on   condition   The  condition  element specifies the basis on which events are selected for update.\nWhen specifying the  condition , table attributes should be referred to with the table name. \nIf a record that matches the condition does not already exist in the table, the arriving event is inserted into the table.  The  set  clause is only used when the update operation is performed and it is used during the insert operation. \nWhen  set  clause is used the left hand side attribute should be always a table attribute and \nthe right hand side attribute can be stream/table attribute, mathematical \n operations or other. When  set  clause is not provided all attributes in the table will be updated.    To execute update upon specific output event types use the  current events ,  expired events  or the  all events  keyword with  for  as shown\nin the syntax. To understand more refer  output event type  section.   Note  Table attributes should be always referred to with the table name as  table name . attibute name .   Example  The following query update for events in the  UpdateTable  event table that have room numbers that match the same in the  UpdateStream  stream. When such events are founding the event table, they are updated. When a room number available in the stream is not found in the event table, it is inserted from the stream.  define   table   RoomAssigneeTable   ( roomNo   int ,   type   string ,   assignee   string );  define   stream   RoomAssigneeStream   ( roomNumber   int ,   type   string ,   assignee   string );  from   RoomAssigneeStream  select   roomNumber   as   roomNo ,   type ,   assignee  update   or   insert   RoomAssigneeTable \n     set   RoomAssigneeTable . assignee   =   assignee \n     on   RoomAssigneeTable . roomNo   ==   roomNo ;", 
            "title": "Update or Insert"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#in", 
            "text": "This allows the stream to check whether the expected value exists in the table as a part of a conditional operation.  Syntax  from   input   stream [ condition   in   table ]  select   attribute   name ,   attribute   name ,   ...  insert   into   output   stream   The  condition  element specifies the basis on which events are selected to be compared. \nWhen constructing the  condition , the table attribute must be always referred to with the table name as shown below: table . attibute name .  Example  This Siddhi application filters only room numbers that are listed in the  ServerRoomTable  table.  define   table   ServerRoomTable   ( roomNo   int );  define   stream   TempStream   ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream [ ServerRoomTable . roomNo   ==   roomNo   in   ServerRoomTable ]  insert   into   ServerRoomTempStream ;", 
            "title": "In"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#incremental-aggregation", 
            "text": "Incremental aggregation allows you to obtain aggregates in an incremental manner for a specified set of time periods.  This not only allows you calculate aggregations with varied time granularity, but also allows you access them in an interactive\n manner for reports, dashboards, and for further processing. Its schema is defined via the  aggregation definition .  Purpose  Incremental aggregation allows you to retrieve the aggregate value for different time durations. \nThat is, it allows you to obtain aggregates such as  sum ,  count ,  avg ,  min ,  max , and  count ) \nof stream attributes for durations such as  sec ,  min ,  hour , etc.   This is of considerable importance in many Analytics scenarios because aggregate values are often needed for several time periods. \nFurthermore, this ensures that the aggregations are not lost due to unexpected system failures because aggregates can be stored in different persistence  stores .  Syntax  @ store ( type = store type ,   ...)  define   aggregation   aggregator   name  from   input   stream  select   attribute   name ,   aggregate   function ( attribute   name )   as   attribute   name ,   ... \n     group   by   attribute   name \n     aggregate   by   timestamp   attribute   every   time   periods   ;   The above syntax includes the following:     Item  Description      @store  This annotation is used to refer to the data store where the calculated  aggregate results are stored. This annotation is optional. When  no annotation is provided, the data is stored in the  in-memory  store.    aggregator name  This specifies a unique name for the aggregation so that it can be referred  when accessing aggregate results.    input stream  The stream that feeds the aggregation.  Note! this stream should be  already defined.    group by  attribute name  The  group by  clause is optional. If it is included in a Siddhi application, aggregate values   are calculated per each  group by  attribute. If it is not used, all the  events are aggregated together.    by  timestamp attribute  This clause is optional. This defines the attribute that should be used as  the timestamp. If this clause is not used, the event time is used by default.  The timestamp could be given as either a  string  or a  long  value. If it is a  long  value,  the unix timestamp in milliseconds is expected (e.g.  1496289950000 ). If it is  a  string  value, the supported formats are  yyyy - MM - dd   HH : mm : ss   (if time is in GMT) and   yyyy - MM - dd   HH : mm : ss   Z  (if time is  not in GMT), here the ISO 8601 UTC offset must be provided for  Z  . (e.g.,  +05:30 ,  -11:00 ).    time periods  When the aggregation period is given as  every sec, hour, month , the aggregate values are calculated per second, per hour as well as per year.     Example  This Siddhi Application defines an aggregation named  TradeAggregation  to calculate the average and sum for the  price  attribute of events arriving at the  TradeStream  stream. These aggregates are calculated per every time granularity in the range second-year.  define   stream   TradeStream   ( symbol   string ,   price   double ,   volume   long ,   timestamp   long );  define   aggregation   TradeAggregation \n   from   TradeStream \n   select   symbol ,   avg ( price )   as   avgPrice ,   sum ( price )   as   total \n     group   by   symbol \n     aggregate   by   timestamp   every   sec   ...   year ;", 
            "title": "Incremental Aggregation"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#join-aggregation", 
            "text": "This allows a stream to retrieve calculated aggregate values from the aggregation.    Note  A join can also be performed with  two streams , with a  table  and a stream, or with a stream against externally  defined windows .   Syntax  A join with aggregation is similer to the join with  table , but with additional  within  and  per  clauses.   from   input   stream   join   aggrigation  \n   on   join   condition  \n   within   time   range  \n   per   time   granularity  select   attribute   name ,   attribute   name ,   ...  insert   into   output   stream ;   Apart from constructs of  table  this includes the following :     Item  Description      within   time range  This allows you to specify the time interval for which the aggregate values need to be retrieved. This can be specified by providing the start and end time separated by a comma as  string  or  long  values, or by using the wildcard  string  specifying the data range. For details refer examples.    per  time granularity  This specifies the time granularity by which the aggregate values must be grouped and returned. e.g., If you specify  days , the retrieved aggregate values are grouped for each day within the selected time interval.     within  and  par  clauses also accept attribute values from the stream.  Example  This query retrieves all aggregation per day within the time range  \"2014-02-15 00:00:00 +05:30\", \"2014-03-16 00:00:00 +05:30\" .  define   stream   StockStream   ( symbol   string ,   value   int );  from   StockStream   as   S   join   TradeAggregation   as   T \n   on   S . symbol   ==   T . symbol  \n   within   2014-02-15 00:00:00 +05:30 ,   2014-03-16 00:00:00 +05:30  \n   per   days   select   S . symbol ,   T . total ,   T . avgPrice   insert   into   AggregateStockStream ;   This query retrieves all aggregation per hour within the day  2014-02-15  .  define   stream   StockStream   ( symbol   string ,   value   int );  from   StockStream   as   S   join   TradeAggregation   as   T \n   on   S . symbol   ==   T . symbol  \n   within   2014-02-15 **:**:** +05:30 \n   per   hours   select   S . symbol ,   T . total ,   T . avgPrice   insert   into   AggregateStockStream ;   This query retrieves all aggregation per value for an attribute of the stream  within the time period between timestamps  1490918400  and  1490922000     define   stream   StockStream   ( symbol   string ,   value   int ,   perValue   string );  from   StockStream   as   S   join   TradeAggregation   as   T \n   on   S . symbol   ==   T . symbol  \n   within   1490918400 ,   1490922000   \n   per   S . perValue  select   S . symbol ,   T . total ,   T . avgPrice   insert   into   AggregateStockStream ;", 
            "title": "Join (Aggregation)"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#defined-window", 
            "text": "A defined window is a window that can be shared across multiple queries. \nEvents can be inserted to a defined window from one or more queries and it can produce output events based on the defined window type.  Syntax  The syntax for a defined window is as follows:  define   window   window   name   ( attribute   name   attribute   type ,   attribute   name   attribute   type ,   ...   )   window   type ( parameter ,   parameter ,   \u2026 )   output   event   type ;   The following parameters are configured in a table definition:     Parameter  Description      window name  The name of the window defined. ( PascalCase  is used for window names as a convention.)    attribute name  The schema of the window is defined by its attributes with uniquely identifiable attribute names ( camalCase  is used for attribute names as a convention.)    attribute type  The type of each attribute defined in the schema.   This can be  STRING ,  INT ,  LONG ,  DOUBLE ,  FLOAT ,  BOOL  or  OBJECT .    window type ( parameter , ...)  The window type associated with the window and its parameters.    output  output event type  This is optional. Keywords such as  current events ,  expired events  and  all events  (the default) can be used to specify when the window output should be exposed. For more information, see  output event type .     Examples    Returning all output when events arrive and when events expire from the window.  In this query, the output event type is not specified. Therefore, it returns both current and expired events as the output.  \ndefine window SensorWindow (name string, value float, roomNo int, deviceID string) timeBatch(1 second);     Returning an output only when events expire from the window.  In this query, the output event type of the window is  expired events . Therefore, it only returns the events that have expired from the window as the output.  \ndefine window SensorWindow (name string, value float, roomNo int, deviceID string) timeBatch(1 second) output expired events;     Operators on Defined Windows  The following operators can be performed on defined windows.", 
            "title": "(Defined) Window"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#insert_1", 
            "text": "This allows events to be inserted into windows. This is similar to inserting events into streams.   Syntax  from   input   stream   select   attribute   name ,   attribute   name ,   ...  insert   into   window   To insert only events of a specific output event type, add the  current events ,  expired events  or the  all events  keyword between  insert  and  into  keywords (similar to how it is done for streams).  For more information, see  output event type .  Example  This query inserts all events from the  TempStream  stream to the  OneMinTempWindow  window.  from   TempStream  select   *  insert   into   OneMinTempWindow ;", 
            "title": "Insert"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#join-window", 
            "text": "To allow a stream to retrieve information from a window based on a condition.   Note  A join can also be performed with  two streams ,  aggregation  or with tables  tables .   Syntax  from   input   stream   join   window \n     on   condition  select   ( input   stream | window ). attribute   name ,   ( input   stream | window ). attribute   name ,   ...  insert   into   output   stream   Example  This Siddhi Application performs a join count the number of temperature events having more then 40 degrees \n within the last 2 minutes.   define   window   TwoMinTempWindow   ( roomNo   int ,   temp   double )   time ( 2 min );  define   stream   CheckStream   ( requestId   string );  from   CheckStream   as   C   join   TwoMinTempWindow   as   T \n     on   T . temp     40  select   requestId ,   count ( T . temp )   as   count  insert   into   HighTempCountStream ;", 
            "title": "Join (Window)"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#from", 
            "text": "A window can be an input to a query, similar to streams.   Note !!!\n     When window is used as an input to a query, another window cannot be applied on top of this.  Syntax  from   window   select   attribute   name ,   attribute   name ,   ...  insert   into   output   stream   Example \nThis Siddhi Application calculates the maximum temperature within the last 5 minutes.  define   window   FiveMinTempWindow   ( roomNo   int ,   temp   double )   time ( 5 min );  from   FiveMinTempWindow  select   name ,   max ( value )   as   maxValue ,   roomNo  insert   into   MaxSensorReadingStream ;", 
            "title": "From"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#trigger", 
            "text": "Triggers allow events to be periodically generated.  Trigger definition  can be used to define a trigger. \nA trigger also works like a stream with a predefined schema.  Purpose  For some use cases the system should be able to periodically generate events based on a specified time interval to perform \nsome periodic executions.   A trigger can be performed for a  'start'  operation, for a given  time interval , or for a given  ' cron expression ' .  Syntax  The syntax for a trigger definition is as follows.  define   trigger   trigger   name   at   ( start |   every   time   interval |   cron expression );   Similar to streams, triggers can be used as inputs. They adhere to the following stream definition and produce the  triggered_time  attribute of the  long  type.  define   stream   trigger   name   ( triggered_time   long );   The following types of triggeres are currently supported:     Trigger type  Description      'start'  An event is triggered when Siddhi is started.    every  time interval  An event is triggered periodically at the given time interval.    ' cron expression '  An event is triggered periodically based on the given cron expression. For configuration details, see  quartz-scheduler .     Examples    Triggering events regularly at specific time intervals  The following query triggers events every 5 minutes.  sql\n define trigger FiveMinTriggerStream at every 5 min;    Triggering events at a specific time on specified days  The following query triggers an event at 10.15 AM on every weekdays.  ```sql\n define trigger FiveMinTriggerStream at '0 15 10 ? * MON-FRI';  ```", 
            "title": "Trigger"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#script", 
            "text": "Scripts allow you to write functions in other programming languages and execute them within Siddhi queries. \nFunctions defined via scripts can be accessed in queries similar to any other inbuilt function.  Function definitions  can be used to define these scripts.  Function parameters are passed into the function logic as  Object[]  and with the name  data  .   Purpose  Scripts allow you to define a function operation that is not provided in Siddhi core or its extension. It is not required to write an extension to define the function logic.  Syntax  The syntax for a Script definition is as follows.  define   function   function   name [ language   name ]   return   return   type   { \n     operation   of   the   function  } ;   The following parameters are configured when defining a script.     Parameter  Description      function name  The name of the function ( camalCase  is used for the function name) as a convention.    language name  The name of the programming language used to define the script, such as  javascript ,  r  and  scala .    return type  The attribute type of the function\u2019s return. This can be  int ,  long ,  float ,  double ,  string ,  bool  or  object . Here the function implementer should be responsible for returning the output attribute on the defined return type for proper functionality.    operation of the function  Here, the execution logic of the function is added. This logic should be written in the language specified under the  language name , and it should return the output in the data type specified via the  return type  parameter.     Examples  This query performs concatenation using JavaScript, and returns the output as a string.  define   function   concatFn [ javascript ]   return   string   { \n     var   str1   =   data [ 0 ]; \n     var   str2   =   data [ 1 ]; \n     var   str3   =   data [ 2 ]; \n     var   responce   =   str1   +   str2   +   str3 ; \n     return   responce ;  } ;  define   stream   TempStream ( deviceID   long ,   roomNo   int ,   temp   double );  from   TempStream  select   concatFn ( roomNo , - , deviceID )   as   id ,   temp   insert   into   DeviceTempStream ;", 
            "title": "Script"
        }, 
        {
            "location": "/documentation/siddhi-4.0/#extensions", 
            "text": "Siddhi supports an extension architecture to enhance its functionality by incorporating other libraries in a seamless manner.   Purpose  Extensions are supported because, Siddhi core cannot have all the functionality that's needed for all the use cases, mostly use cases require \ndifferent type of functionality, and for come cases there can be gaps and you need to write the functionality by yourself.  All extensions have a namespace. This is used to identify the relevant extensions together, and to let you specifically call the extension.  Syntax  Extensions follow the following syntax;  namespace : function   name ( parameter ,   parameter ,   ...   )   The following parameters are configured when referring a script function.     Parameter  Description      namespace  Allows Siddhi to identify the extension without conflict    function name  The name of the function referred.    parameter  The function input parameter for function execution.     Extension types  Siddhi supports following extension types:    Function  For each event, it consumes zero or more parameters as input parameters and returns a single attribute. This can be used to manipulate existing event attributes to generate new attributes like any Function operation.  This is implemented by extending  org.wso2.siddhi.core.executor.function.FunctionExecutor .  Example :   math:sin(x)    Here, the  sin  function of  math  extension returns the sin value for the  x  parameter.    Aggregate Function  For each event, it consumes zero or more parameters as input parameters and returns a single attribute with aggregated results. This can be used in conjunction with a window in order to find the aggregated results based on the given window like any Aggregate Function operation.   This is implemented by extending  org.wso2.siddhi.core.query.selector.attribute.aggregator.AttributeAggregator .  Example :   custom:std(x)    Here, the  std  aggregate function of  custom  extension returns the standard deviation of the  x  value based on its assigned window query.     Window    This allows events to be  collected, generated, dropped and expired anytime   without altering  the event format based on the given input parameters, similar to any other Window operator.   This is implemented by extending  org.wso2.siddhi.core.query.processor.stream.window.WindowProcessor .  Example :   custom:unique(key)    Here, the  unique  window of the  custom  extension retains one event for each unique  key  parameter.    Stream Function  This allows events to be   generated or dropped only during event arrival  and  altered  by adding one or more attributes to it.   This is implemented by extending   org.wso2.siddhi.core.query.processor.stream.function.StreamFunctionProcessor .  Example :    custom:pol2cart(theta,rho)    Here, the  pol2cart  function of the  custom  extension returns all the events by calculating the cartesian coordinates  x     y  and adding them as new attributes to the events.    Stream Processor  This allows events to be  collected, generated, dropped and expired anytime  by  altering  the event format by adding one or more attributes to it based on the given input parameters.   Implemented by extending \"org.wso2.siddhi.core.query.processor.stream.StreamProcessor\".  Example :    custom:perMinResults( parameter ,  parameter , ...)    Here, the  perMinResults  function of the  custom  extension returns all events by adding one or more attributes to the events based on the conversion logic. Altered events are output every minute regardless of event arrivals.    Sink    Source    Store    Script    Example  A window extension created with namespace  foo  and function name  unique  can be referred as follows:  from   StockExchangeStream [ price   =   20 ] # window . foo : unique ( symbol )  select   symbol ,   price  insert   into   StockQuote   Available Extensions  Siddhi currently has several pre written extensions that are available  here  We value your contribution on improving Siddhi and its extensions further.  Writing Custom Extensions  Custom extensions can be written in order to cater use case specific logic that are not available in Siddhi out of the box or as an existing extension.   More information on this will be available soon.", 
            "title": "Extensions"
        }, 
        {
            "location": "/documentation/siddhi-architecture/", 
            "text": "Siddhi Architecture\n\n\nWSO2 Siddhi is a software library that can be utilized in any of the following ways:\n\n\n\n\nRun as a server on its own\n\n\nRun within WSO2 SP as a service\n\n\nEmbedded into any Java or Python based application\n\n\nRun on an Android application\n\n\n\n\nIt provides analytical operators, orchestrates data flows, calculates analytics, and detects\npatterns on event data from multiple disparate live data sources. This allows developers to build applications that collect data, \nanalyze it, and communicate the results in real time.\n\n\nThis section illustrates the architecture of Siddhi and guides you through its key functionality. We hope this article \nhelps developers to understand Siddhi and its the codebase better, and also contribute to improve Siddhi by reporting and fixing bugs.\n\n\nMain Design Decisions\n\n\n\n\nEvent by event processing of real-time streaming data to achieve low latency. \n\n\nEase of use with Streaming SQL providing an intuitive way to express stream processing logic and complex \nevent processing constructs such as Patterns.  \n\n\nAchieve high performance by processing all events in-memory and by storing their states in-memory. \n\n\nOptimizing performance by enforcing a strict schema for event streams and by pre-compiling the queries.\n\n\nOptimizing memory consumption by having only the absolutly necessary information in-memory and \ndropping the rest as soon as possible. \n\n\nSupporting multiple extension points to accommodate a diverse set of functionality such as supporting multiple sources, sinks, functions, \naggregation operations, windows, etc.\n\n\n\n\nHigh Level Architecture\n\n\n\n\nAt a high level, Siddhi consumes events from various events sources, processes them according to the defined Siddhi application, \nand produces results to the subscribed event sinks. \nSiddhi can store and consume events from in-memory tables or from external data stores such as \nRDBMS\n, \nMongoDB\n, \n\nHazelcast\n in-memory grid, etc. (i.e., when configured to do so). Siddhi also allows applications and users to query Siddhi via its Store Query API to interactively \nretrieve data from its in-memory and other stores.\n\n\nMain Modules in Siddhi\n\n\nSiddhi comprises four main modules, they are: \n\n\n\n\n\n\nSiddhi Query API\n : This allows you to define the execution logic of the Siddhi application as queries and definitions using POJO classes. \nInternally, Siddhi uses these objects to identify the tasks that it is expected to perform. \n\n\n\n\n\n\nSiddhi Query Compiler\n : This allows you to define the Siddhi application using the Siddhi Streaming SQL, \n and then it converts the Streaming SQL script to Siddhi Query POJO Objects so that Siddhi can execute them. \n\n\n\n\n\n\nSiddhi Core\n : This builds the execution runtime based on the defined Siddhi Application and processes the events as and when they arrive. \n\n\n\n\n\n\nSiddhi Annotation\n : This is a helper module that allows all extensions to be annotated, so that they can be \npicked by Siddhi Core for processing. This also helps Siddhi to generate the extension documentation. \n\n\n\n\n\n\nSiddhi Component Architecture\n\n\nThe following diagram illustrates the main components of Siddhi and how they work together. \n\n\n\n\nHere the \nSiddhi Core\n module maintains\nthe execution logic. It also interacts with the external environment and systems \nfor consuming and publishing events. To achieve these tasks, it uses the following components:  \n\n\n\n\n\n\nSiddhiManager\n : \n  This is a key component of Siddhi Core that manages Siddhi Application Runtimes \n  and facilitates their functionality via Siddhi Context with periodic state persistence, statistics reporting and extension loading. \n\n\n\n\n\n\nSiddhiAppRuntime\n : \n A Siddhi Application Runtime is generated for each Siddhi Application deployed. Siddhi Application Runtimes\n provide an isolated execution environment for each Siddhi Application defined.\n These Siddhi Application Runtimes are based on the logic of their Siddhi Application, and they consume and publish events from various external systems and Java or Python programmes. \n\n\n\n\n\n\nSiddhiContext\n : \nThis is a shared object for all the Siddhi Application Runtimes within the a Siddhi manager, and it contains references \nto the persistence store for periodic persistence, statistics manager to report performance statistics of Siddhi Application Runtimes, \nand extension holders for loading Siddhi extensions. \n\n\n\n\n\n\nSiddhi Application Creation\n\n\nExecution logic in Siddhi is composed as a Siddhi Application, and this is passed as a string to \n\nSiddhiManager\n to create the \nSiddhiAppRuntime\n for execution. \n\n\nWhen a Siddhi Application is passed to the \nSiddhiManager.createSiddhiAppRuntime()\n, it is processed internally with the \n\nSiddhiCompiler\n. \nHere, the \nSiddhiApp\n String is converted to \nSiddhiApp\n\n object model by the \nSiddhiQLBaseVisitorImpl\n class. \nThe model is then passed to the \nSiddhiAppParser\n \nfor the \nSiddhiAppRuntime\n creation.\n\n\nSiddhi App Execution Flow\n\n\nFollowing diagram depicts the execution flow within a Siddhi App Runtime. \n\n\n\n\nThe path taken by events within Siddhi is indicated in blue. \n\n\nThe components that are involved in handling the events are as follows: \n\n\n\n\n\n\nStreamJunction\n\n\nThis routes events to various components within the Siddhi App Runtime. A stream junction is\ngenerated for each stream defined or inferred in the Siddhi Application. A stream junction by default uses the incoming event's thread\nfor processing subscribed components, but it can also be configured via the \n@Async\n annotation to buffer the events and \nuse a different thread for subsequent execution.\n\n\n\n\n\n\nInputHandler\n \n\n\nAn instance of input handler is created for each stream junction, and this is used for pushing \nEvent\n and\n \nEvent[]\n objects into stream junctions from sources, and Java/Python programmes. \n\n\n\n\n\n\nStreamCallback\n \n\n\nThis receives \nEvent[]\ns from stream junction and passes them to sinks to publish to external endpoints, \nor passes them to subscribed Java/Python programmes for further processing. \n\n\n\n\n\n\nQueries\n \n \nPartitions\n \n\n\nThese components process the events by filtering, transforming, joining, patten matching, \netc. They consume events from one or more stream junctions, process them and publish the processed events \ninto stream junctions based on the defined query or partition. \n\n\n\n\n\n\nSource\n \n\n\nSources consume events from external sources in various data formats, convert them into Siddhi events\nand pass them to corresponding Stream Junctions via their Input Handlers. A source is generated \nfor each \n@Source\n annotation defined above a stream definition. Each source consumes events from an external source in the data format configured for it. \n\n\n\n\n\n\nSourceMapper\n \n\n\nA source mapper needs to be configured for each source in order to convert the format of each incoming event to that of a Siddhi event. \nThe source mapper type can be configured using the \n@Map\n annotation within the \n@Source\n annotation. When the \n@Map\n annotation is\nnot defined, Siddhi uses the \nPassThroughSourceMapper\n,\nwhere it assumes that the incoming message is already in the Siddhi Event format, and therefore makes no changes to the event format.\n\n\n\n\n\n\nSink\n \n\n\nSinks convert the Siddhi Events to various data formats and publish them to external endpoints. \nA Sink generated for each \n@Sink\n annotation defined above a stream definition to publish the events arriving \nto that stream. \n\n\n\n\n\n\nSinkMapper\n\n\nA sink mapper is configured for each Sink in order to map the Siddhi events to the specified data format so that they \ncan be published via the sink. The sink mapper type can be configured using the \n@Map\n annotation within the \n@Sink\n\nannotation. When the \n@Map\n annotation is not defined, Siddhi uses \nPassThroughSinkMapper\n, \nwhere it  passes the Siddhi events in the existing format (i.e., the Siddhi event format) to the Sink.\n\n\n\n\n\n\nTable\n\n\nTables store events. By default, Siddhi uses the \nInMemoryTable\n \nimplementation to store events in-memory. When \n@Store\n annotation\nis used, it loads the associated Table implantation based on the defined \nstore\n type. Most table implementations are \nextended from the \nAbstractRecordTable\n \nabstract class for the ease of development.\n\n\n\n\n\n\nWindow\n\n\nWindows store events and determine when events can be considered expired based on the given window constrain. Multiple types of windows are\ncan be implemented by extending the \nWindowProcessor\n \nabstract class. \n\n\n\n\n\n\nIncrementalAggregation\n \n\n\nThis allows you to obtain aggregates in an incremental manner for a specified set of time periods.\nIncremental aggregation functions can be implemented by extending \nIncrementalAttributeAggregator\n. \n\n\n\n\n\n\nTrigger\n\n\nA triggers triggers events at a given interval to the stream junction that has the same name as the trigger.\n\n\n\n\n\n\nQueryCallback\n\n\nA query callback receives notifications when events are emitted from queries. Then it notifies the event occurrence \ntimestamp\n, and classifies \nthe events into \ncurrentEvents\n, and \nexpiredEvents\n. \n\n\n\n\n\n\nSiddhi Query Execution\n\n\nSiddhi \nQueryRuntimes\n\n can be categorized in to three main types: \n\n\n\n\n\n\nSingleInputStream\n: \n Queries that consist of query types such as filters and windows.\n\n\n\n\n\n\nJoinInputStream\n:\n  Queries that consist of joins.\n\n\n\n\n\n\nStateInputStream\n: \n   Queries that consist of patterns and sequences. \n\n\n\n\n\n\nFollowing section explains the internals of each query type. \n\n\nSingleInputStream\n Query Runtime (Filter \n Windows)\n\n\n\n\nA single input stream query runtime is generated for filter and window queries. They consume events from a stream junction or a window\nand convert the incoming events according to the expected output stream format at the \nProcessStreamReceiver\n\nby dropping all the unrelated incoming stream attributes.\n\n\nThen the converted events are passed through a few Processors such as \nFilterProcessor\n,\n\nStreamProcessor\n, \n\nStreamFunctionProcessor\n, \n\nWindowProcessor\n\n and \nQuerySelector\n. \nHere, the \nStreamProcessor\n, \nStreamFunctionProcessor\n, and \nWindowProcessor\n can be extended with \nvarious stream processing capabilities. The last processor of the chain of processors must always be a \nQuerySelector\n, and each chain can \nhave only one \nWindowProcessor\n. When the query runtime consumes events from a window, its chain of processors cannot \ncontain a \nWindowProcessor\n.\n\n\nThe \nFilterProcessor\n is implemented with an \nExpressionExecutor\n \nthat returns a boolean value. Expressions have a tree structure, and \nthey are processed based on the Depth First Search algorithm. To achieve high performance,  Siddhi currently depends on the user\nto formulate the least successful case in the leftmost side of the condition, thereby increasing the chance of an early \nfalse\n detection.\n\n\nThe condition expression \nprice \n= 100 and ( Symbol == 'IBM' or Symbol == 'MSFT' )\n is represented as shown below.\n\n\n\n\nThese expressions also support the execution of user defined functions (UDFs), and they can be implemented by extending the \nFunctionExecutor\n class. \n\n\nAfter getting processed by each processor, each event reaches the \nQuerySelector\n for transformation. At the \nQuerySelector\n,\nevents are transformed based on the \nselect\n clause of the query. If there is a \nGroup By\n defined, then the \nGroupByKeyGenerator\n\nidentifies the group by key, and then each \nAttributeProcessor\n\nis executed based on that group-by key. \nAttributeProcessors\n can contain any expression including \nconstant values, variables and user defined functions. They can also contain \nAttributeAggregator\ns\nfor processing aggregation operations such as \nsum\n, \ncount\n, etc. Here, an \nAttributeAggregator\n is generated to \nkeep track of the aggregation state. When it becomes obsolete, it is destroyed. The events are transformed to the expected output format through this operation.  \n\n\nAfter an event is transformed to the output format, it is evaluated against the \nHavingConditionExecutor\n if a \nhaving\n clause is \nprovided. Only the succeeding events are pushed to the \nOutputRateLimiter\n.   \n\n\nAt \nOutputRateLimiter\n, the event output is controlled before sending the events to the stream junction or to the query callback. \nWhen the \noutput\n clause is not defined, the \nPassThroughOutputRateLimiter\n is used by passing all the events without any rate limiting. \n\n\nTemporal Processing with Windows\n\n\nThe temporal event processing aspect is achieved via \nWindow\n\nand \nAttributeAggregators\n\n\nTo achieve temporal processing,Siddhi uses the following four type of events: \n\n\n\n\n\n\nCurrent Events\n: Events that are newly arriving to a query from streams.\n\n\n\n\n\n\nExpired Events\n: Events that have expired from a window. \n\n\n\n\n\n\nTimer Events\n: Events that inform the query about an update of execution time. These events are usually generated by schedulers. \n\n\n\n\n\n\nReset Events\n: Events that resets the Siddhi query states.\n\n\n\n\n\n\nIn Siddhi, when an event comes into a \nWindowProcessor\n, \nit creates an appropriate expired event corresponding to the incoming current event with the expiring timestamp, and stores that \nevent in the window. The \nWindowProcessor\n  also forwards the current event to the next processor for further processing. \nIt uses a scheduler or such to determine when to emit the events it has in memory. During that time, it emits these events as expired events. If it needs to emit all the events in the memory at once, it emits a single reset event interred of sending one expired event for each event it has stored, such that it can reset the states in one go. For each current event emitted from a window, a corresponding expired event must be emitted. If not, a common reset event must be emitted.\n\nThis is vital in Siddhi because Siddhi relies on these events to calculate the Aggregations at the \nQuerySelector\n. \nIn the \nQuerySelector\n, the arrived current events increase the aggregation values, expired events decrease the values, and \nreset events reset the aggregation calculation.\n\n\nFor example, the sliding \nTimeWindow\n\ncreates a corresponding expired event for each current event that arrives,  adds that to \nthe window, adds an entry to the scheduler to notify when that event need to be expired by sending it a timer event, and \nfinally sends the current event to the next processor for subsequent processing.\n\nWhen the window receives an indication that the expected expiry time has come for the oldest event in the window via a \na timer event or other means, it removes the expired event from the window and passes that to the next processor. \n\n\n\n\nJoinInputStream\n Query Runtime (Join)\n\n\n\n\nJoin input stream query runtime is generated for join queries. This can consume events from two stream junctions and perform a join operation as depicted above. \nIt can also perform a join by consuming events from one stream junction and join against itself, or it can join against a \ntable, window or an incremental aggregation. When a join is performed with a table, window or incremental aggregation,\nthe \nWindowProcessor\n in the image is replaced with the table, window or incremental aggregation. No\n\nbasic processors are used on their side. \n\n\nThe joining operation is triggered by the events that arrive from the stream junction.\nHere, when an event from one stream reaches the pre \nJoinProcessor\n, it matches against all the available events of the other stream's \nWindowProcessor\n. \nWhen a match is found, those matched events are sent to the \nQuerySelector\n as current events, and at the same time, \nthe original event is added to the \nWindowProcessor\n where it remains until it expires. Similarly, when an \nevent expires from the \nWindowProcessor\n, it matches against all the available events of the other stream's \nWindowProcessor\n, and \nwhen a match is found, those matched events are sent to the \nQuerySelector\n as expired events.\n\n\nNote: Despite the optimizations, a join query is quite expensive when it comes to performance. This is because\n the \nWindowProcessor\n is locked during the matching process to avoid race conditions and to achieve accuracy while \n joining. Therefore, avoid matching large windows in high volume streams. Based on the scenario, \n using appropriate window sizes (by time or length) helps to achieve maximum performance.\n\n\nStateInputStream\n Query Runtime (Pattern \n Sequence)\n\n\n\n\nThe state input stream query runtime is generated for pattern and sequence queries. This consumes events from one or more stream junctions \nvia \nProcessStreamReceivers\n. A \nProcessStreamReceiver\n and a set of basic processors is defined in the query for each condition.\nWhen a \nProcessStreamReceiver\n consumes the events, it updates the states with the incoming events that are generated by previous conditions. If the condition applied\nis the first condition in the query, then it creates a new state and updates that with the incoming event. This is then passed \nto basic processors to perform filtering and transformation operations. The states \nthat pass the basic processors are consumed by the \nPostStateProcessor\n and stored at the \nPreStateProcessor\n of the following pattern or \nsequence condition. When the state reaches the final condition's \nPostStateProcessor\n, \nthe output event is generated and emitted by \nQuerySelector\n. \n\n\nSiddhi Partition Execution\n\n\n\n\nA partition is a wrapper around one or more Siddhi queries and inner streams that connect them. \nA partition is implemented in Siddhi as a \nPartitionRuntime\n,\nand each unique partition instance is implemented as a \nPartitionInstanceRuntime\n\nEach partitioned stream entering the partition\ngoes through the appropriate \nPartitionStreamReceiver\n.\nThe \nPartitionExecutor\n\n of stream receiver evaluates \n\nthe incoming events to identify the partition key using the \nRangePartitionExecutor\n\n or the \nValuePartitionExecutor\n,\n  and passes \nthe events to the \nQueryRuntimes\n of the appropriate \nPartitionInstanceRuntime\n based on the partition key. \nIf a \nPartitionInstanceRuntime\n is not available for the given partition key, it is dynamically generated via the relevant \nQueryRuntimes\n and \nInnerStreamJunctions\n. \n\n\nBased on the partition definition, the \nQueryRuntimes\n in the \nPartitionInstanceRuntime\n wire themselves via inner \nStreamJunctions\n or using \n\nStreamJunctions\n outside the partitions. \nWhen a partition query consumes a non partitioned global stream, all instances of its \nQueryRuntime\n that are part of multiple \nPartitionInstanceRuntimes\n\nreceive the same event as depicted in the above diagram. \n\n\nSiddhi Event Formats\n\n\nSiddhi has three event formats. \n\n\n\n\n\n\nEvent\n \n\n\nThis is the format exposed to end users when they send events via Input Handler, and consume events via Stream Callback or Query Callback.\nThis consists of an \nObject[]\n that contains all the values in accordance to the corresponding stream. \n\n\n\n\n\n\nStreamEvent\n (Subtype of \nComplexEvent\n)\n\n\nThis is used within queries. This contains the following three \nObject[]\ns: \n- \nbeforeWindowData\n: This contains values that are only used in processors that are executed before the \nWindowProcessor\n.\n- \nonAfterWindowData\n: This contains values that are only used by the \nWindowProcessor\n and the other processors that follow it, but not sent as output.\n- \noutputData\n: This contains the values that comply with the output stream of the query.\n\n\n\n\n\n\nIn order to optimize the amount of data that is stored in the in-memory at windows, the content in \nbeforeWindowData\n is cleared before the \n    event enters the \nWindowProcessor\n. StreamEvents can also be chained by linking each other via the \nnext\n property in them.  \n\n\n\n\n\n\nStateEvent\n (Subtype of \nComplexEvent\n)\n\n\nThis is used in Joins, Patterns and Sequences when we need to associate events of multiple streams, tables, windows and aggregations of different types together.\nThis has a collection of \nStreamEvents\n representing different streams, tables, etc, that are used in the query, and \noutputData\n to contain the values that are needed for the query output. \n\nStreamEvents\n can also be chained by linking each other with the \nnext\n property in them. \n\n\n\n\n\n\nEvent Chunks\n\n\nEvent Chunks provide an easier way of manipulating the chain of \nStreamEvents\n and \nStateEvents\n so that they are be easily iterated, inserted and removed. \n\n\nSummary\n\n\nThis article focuses on describing the architecture of Siddhi and rationalizing the architectural decisions made. It\nalso explains the key features of Siddhi.\n\nThis is possibly a great starting point for new developers to understand Siddhi and to start contributing to it.", 
            "title": "Siddhi Architecture"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-architecture", 
            "text": "WSO2 Siddhi is a software library that can be utilized in any of the following ways:   Run as a server on its own  Run within WSO2 SP as a service  Embedded into any Java or Python based application  Run on an Android application   It provides analytical operators, orchestrates data flows, calculates analytics, and detects\npatterns on event data from multiple disparate live data sources. This allows developers to build applications that collect data, \nanalyze it, and communicate the results in real time.  This section illustrates the architecture of Siddhi and guides you through its key functionality. We hope this article \nhelps developers to understand Siddhi and its the codebase better, and also contribute to improve Siddhi by reporting and fixing bugs.", 
            "title": "Siddhi Architecture"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#main-design-decisions", 
            "text": "Event by event processing of real-time streaming data to achieve low latency.   Ease of use with Streaming SQL providing an intuitive way to express stream processing logic and complex \nevent processing constructs such as Patterns.    Achieve high performance by processing all events in-memory and by storing their states in-memory.   Optimizing performance by enforcing a strict schema for event streams and by pre-compiling the queries.  Optimizing memory consumption by having only the absolutly necessary information in-memory and \ndropping the rest as soon as possible.   Supporting multiple extension points to accommodate a diverse set of functionality such as supporting multiple sources, sinks, functions, \naggregation operations, windows, etc.", 
            "title": "Main Design Decisions"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#high-level-architecture", 
            "text": "At a high level, Siddhi consumes events from various events sources, processes them according to the defined Siddhi application, \nand produces results to the subscribed event sinks. \nSiddhi can store and consume events from in-memory tables or from external data stores such as  RDBMS ,  MongoDB ,  Hazelcast  in-memory grid, etc. (i.e., when configured to do so). Siddhi also allows applications and users to query Siddhi via its Store Query API to interactively \nretrieve data from its in-memory and other stores.", 
            "title": "High Level Architecture"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#main-modules-in-siddhi", 
            "text": "Siddhi comprises four main modules, they are:     Siddhi Query API  : This allows you to define the execution logic of the Siddhi application as queries and definitions using POJO classes. \nInternally, Siddhi uses these objects to identify the tasks that it is expected to perform.     Siddhi Query Compiler  : This allows you to define the Siddhi application using the Siddhi Streaming SQL, \n and then it converts the Streaming SQL script to Siddhi Query POJO Objects so that Siddhi can execute them.     Siddhi Core  : This builds the execution runtime based on the defined Siddhi Application and processes the events as and when they arrive.     Siddhi Annotation  : This is a helper module that allows all extensions to be annotated, so that they can be \npicked by Siddhi Core for processing. This also helps Siddhi to generate the extension documentation.", 
            "title": "Main Modules in Siddhi"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-component-architecture", 
            "text": "The following diagram illustrates the main components of Siddhi and how they work together.    Here the  Siddhi Core  module maintains\nthe execution logic. It also interacts with the external environment and systems \nfor consuming and publishing events. To achieve these tasks, it uses the following components:      SiddhiManager  : \n  This is a key component of Siddhi Core that manages Siddhi Application Runtimes \n  and facilitates their functionality via Siddhi Context with periodic state persistence, statistics reporting and extension loading.     SiddhiAppRuntime  : \n A Siddhi Application Runtime is generated for each Siddhi Application deployed. Siddhi Application Runtimes\n provide an isolated execution environment for each Siddhi Application defined.\n These Siddhi Application Runtimes are based on the logic of their Siddhi Application, and they consume and publish events from various external systems and Java or Python programmes.     SiddhiContext  : \nThis is a shared object for all the Siddhi Application Runtimes within the a Siddhi manager, and it contains references \nto the persistence store for periodic persistence, statistics manager to report performance statistics of Siddhi Application Runtimes, \nand extension holders for loading Siddhi extensions.", 
            "title": "Siddhi Component Architecture"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-application-creation", 
            "text": "Execution logic in Siddhi is composed as a Siddhi Application, and this is passed as a string to  SiddhiManager  to create the  SiddhiAppRuntime  for execution.   When a Siddhi Application is passed to the  SiddhiManager.createSiddhiAppRuntime() , it is processed internally with the  SiddhiCompiler . \nHere, the  SiddhiApp  String is converted to  SiddhiApp \n object model by the  SiddhiQLBaseVisitorImpl  class. \nThe model is then passed to the  SiddhiAppParser  \nfor the  SiddhiAppRuntime  creation.", 
            "title": "Siddhi Application Creation"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-app-execution-flow", 
            "text": "Following diagram depicts the execution flow within a Siddhi App Runtime.    The path taken by events within Siddhi is indicated in blue.   The components that are involved in handling the events are as follows:     StreamJunction  This routes events to various components within the Siddhi App Runtime. A stream junction is\ngenerated for each stream defined or inferred in the Siddhi Application. A stream junction by default uses the incoming event's thread\nfor processing subscribed components, but it can also be configured via the  @Async  annotation to buffer the events and \nuse a different thread for subsequent execution.    InputHandler    An instance of input handler is created for each stream junction, and this is used for pushing  Event  and\n  Event[]  objects into stream junctions from sources, and Java/Python programmes.     StreamCallback    This receives  Event[] s from stream junction and passes them to sinks to publish to external endpoints, \nor passes them to subscribed Java/Python programmes for further processing.     Queries     Partitions    These components process the events by filtering, transforming, joining, patten matching, \netc. They consume events from one or more stream junctions, process them and publish the processed events \ninto stream junctions based on the defined query or partition.     Source    Sources consume events from external sources in various data formats, convert them into Siddhi events\nand pass them to corresponding Stream Junctions via their Input Handlers. A source is generated \nfor each  @Source  annotation defined above a stream definition. Each source consumes events from an external source in the data format configured for it.     SourceMapper    A source mapper needs to be configured for each source in order to convert the format of each incoming event to that of a Siddhi event. \nThe source mapper type can be configured using the  @Map  annotation within the  @Source  annotation. When the  @Map  annotation is\nnot defined, Siddhi uses the  PassThroughSourceMapper ,\nwhere it assumes that the incoming message is already in the Siddhi Event format, and therefore makes no changes to the event format.    Sink    Sinks convert the Siddhi Events to various data formats and publish them to external endpoints. \nA Sink generated for each  @Sink  annotation defined above a stream definition to publish the events arriving \nto that stream.     SinkMapper  A sink mapper is configured for each Sink in order to map the Siddhi events to the specified data format so that they \ncan be published via the sink. The sink mapper type can be configured using the  @Map  annotation within the  @Sink \nannotation. When the  @Map  annotation is not defined, Siddhi uses  PassThroughSinkMapper , \nwhere it  passes the Siddhi events in the existing format (i.e., the Siddhi event format) to the Sink.    Table  Tables store events. By default, Siddhi uses the  InMemoryTable  \nimplementation to store events in-memory. When  @Store  annotation\nis used, it loads the associated Table implantation based on the defined  store  type. Most table implementations are \nextended from the  AbstractRecordTable  \nabstract class for the ease of development.    Window  Windows store events and determine when events can be considered expired based on the given window constrain. Multiple types of windows are\ncan be implemented by extending the  WindowProcessor  \nabstract class.     IncrementalAggregation    This allows you to obtain aggregates in an incremental manner for a specified set of time periods.\nIncremental aggregation functions can be implemented by extending  IncrementalAttributeAggregator .     Trigger  A triggers triggers events at a given interval to the stream junction that has the same name as the trigger.    QueryCallback  A query callback receives notifications when events are emitted from queries. Then it notifies the event occurrence  timestamp , and classifies \nthe events into  currentEvents , and  expiredEvents .", 
            "title": "Siddhi App Execution Flow"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-query-execution", 
            "text": "Siddhi  QueryRuntimes \n can be categorized in to three main types:     SingleInputStream : \n Queries that consist of query types such as filters and windows.    JoinInputStream :\n  Queries that consist of joins.    StateInputStream : \n   Queries that consist of patterns and sequences.     Following section explains the internals of each query type.", 
            "title": "Siddhi Query Execution"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#singleinputstream-query-runtime-filter-windows", 
            "text": "A single input stream query runtime is generated for filter and window queries. They consume events from a stream junction or a window\nand convert the incoming events according to the expected output stream format at the  ProcessStreamReceiver \nby dropping all the unrelated incoming stream attributes.  Then the converted events are passed through a few Processors such as  FilterProcessor , StreamProcessor ,  StreamFunctionProcessor ,  WindowProcessor \n and  QuerySelector . \nHere, the  StreamProcessor ,  StreamFunctionProcessor , and  WindowProcessor  can be extended with \nvarious stream processing capabilities. The last processor of the chain of processors must always be a  QuerySelector , and each chain can \nhave only one  WindowProcessor . When the query runtime consumes events from a window, its chain of processors cannot \ncontain a  WindowProcessor .  The  FilterProcessor  is implemented with an  ExpressionExecutor  \nthat returns a boolean value. Expressions have a tree structure, and \nthey are processed based on the Depth First Search algorithm. To achieve high performance,  Siddhi currently depends on the user\nto formulate the least successful case in the leftmost side of the condition, thereby increasing the chance of an early  false  detection.  The condition expression  price  = 100 and ( Symbol == 'IBM' or Symbol == 'MSFT' )  is represented as shown below.   These expressions also support the execution of user defined functions (UDFs), and they can be implemented by extending the  FunctionExecutor  class.   After getting processed by each processor, each event reaches the  QuerySelector  for transformation. At the  QuerySelector ,\nevents are transformed based on the  select  clause of the query. If there is a  Group By  defined, then the  GroupByKeyGenerator \nidentifies the group by key, and then each  AttributeProcessor \nis executed based on that group-by key.  AttributeProcessors  can contain any expression including \nconstant values, variables and user defined functions. They can also contain  AttributeAggregator s\nfor processing aggregation operations such as  sum ,  count , etc. Here, an  AttributeAggregator  is generated to \nkeep track of the aggregation state. When it becomes obsolete, it is destroyed. The events are transformed to the expected output format through this operation.    After an event is transformed to the output format, it is evaluated against the  HavingConditionExecutor  if a  having  clause is \nprovided. Only the succeeding events are pushed to the  OutputRateLimiter .     At  OutputRateLimiter , the event output is controlled before sending the events to the stream junction or to the query callback. \nWhen the  output  clause is not defined, the  PassThroughOutputRateLimiter  is used by passing all the events without any rate limiting.", 
            "title": "SingleInputStream Query Runtime (Filter &amp; Windows)"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#temporal-processing-with-windows", 
            "text": "The temporal event processing aspect is achieved via  Window \nand  AttributeAggregators  To achieve temporal processing,Siddhi uses the following four type of events:     Current Events : Events that are newly arriving to a query from streams.    Expired Events : Events that have expired from a window.     Timer Events : Events that inform the query about an update of execution time. These events are usually generated by schedulers.     Reset Events : Events that resets the Siddhi query states.    In Siddhi, when an event comes into a  WindowProcessor , \nit creates an appropriate expired event corresponding to the incoming current event with the expiring timestamp, and stores that \nevent in the window. The  WindowProcessor   also forwards the current event to the next processor for further processing. \nIt uses a scheduler or such to determine when to emit the events it has in memory. During that time, it emits these events as expired events. If it needs to emit all the events in the memory at once, it emits a single reset event interred of sending one expired event for each event it has stored, such that it can reset the states in one go. For each current event emitted from a window, a corresponding expired event must be emitted. If not, a common reset event must be emitted. \nThis is vital in Siddhi because Siddhi relies on these events to calculate the Aggregations at the  QuerySelector . \nIn the  QuerySelector , the arrived current events increase the aggregation values, expired events decrease the values, and \nreset events reset the aggregation calculation.  For example, the sliding  TimeWindow \ncreates a corresponding expired event for each current event that arrives,  adds that to \nthe window, adds an entry to the scheduler to notify when that event need to be expired by sending it a timer event, and \nfinally sends the current event to the next processor for subsequent processing. \nWhen the window receives an indication that the expected expiry time has come for the oldest event in the window via a \na timer event or other means, it removes the expired event from the window and passes that to the next processor.", 
            "title": "Temporal Processing with Windows"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#joininputstream-query-runtime-join", 
            "text": "Join input stream query runtime is generated for join queries. This can consume events from two stream junctions and perform a join operation as depicted above. \nIt can also perform a join by consuming events from one stream junction and join against itself, or it can join against a \ntable, window or an incremental aggregation. When a join is performed with a table, window or incremental aggregation,\nthe  WindowProcessor  in the image is replaced with the table, window or incremental aggregation. No \nbasic processors are used on their side.   The joining operation is triggered by the events that arrive from the stream junction.\nHere, when an event from one stream reaches the pre  JoinProcessor , it matches against all the available events of the other stream's  WindowProcessor . \nWhen a match is found, those matched events are sent to the  QuerySelector  as current events, and at the same time, \nthe original event is added to the  WindowProcessor  where it remains until it expires. Similarly, when an \nevent expires from the  WindowProcessor , it matches against all the available events of the other stream's  WindowProcessor , and \nwhen a match is found, those matched events are sent to the  QuerySelector  as expired events.  Note: Despite the optimizations, a join query is quite expensive when it comes to performance. This is because\n the  WindowProcessor  is locked during the matching process to avoid race conditions and to achieve accuracy while \n joining. Therefore, avoid matching large windows in high volume streams. Based on the scenario, \n using appropriate window sizes (by time or length) helps to achieve maximum performance.", 
            "title": "JoinInputStream Query Runtime (Join)"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#stateinputstream-query-runtime-pattern-sequence", 
            "text": "The state input stream query runtime is generated for pattern and sequence queries. This consumes events from one or more stream junctions \nvia  ProcessStreamReceivers . A  ProcessStreamReceiver  and a set of basic processors is defined in the query for each condition.\nWhen a  ProcessStreamReceiver  consumes the events, it updates the states with the incoming events that are generated by previous conditions. If the condition applied\nis the first condition in the query, then it creates a new state and updates that with the incoming event. This is then passed \nto basic processors to perform filtering and transformation operations. The states \nthat pass the basic processors are consumed by the  PostStateProcessor  and stored at the  PreStateProcessor  of the following pattern or \nsequence condition. When the state reaches the final condition's  PostStateProcessor , \nthe output event is generated and emitted by  QuerySelector .", 
            "title": "StateInputStream Query Runtime (Pattern &amp; Sequence)"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-partition-execution", 
            "text": "A partition is a wrapper around one or more Siddhi queries and inner streams that connect them. \nA partition is implemented in Siddhi as a  PartitionRuntime ,\nand each unique partition instance is implemented as a  PartitionInstanceRuntime \nEach partitioned stream entering the partition\ngoes through the appropriate  PartitionStreamReceiver .\nThe  PartitionExecutor \n of stream receiver evaluates  \nthe incoming events to identify the partition key using the  RangePartitionExecutor \n or the  ValuePartitionExecutor ,\n  and passes \nthe events to the  QueryRuntimes  of the appropriate  PartitionInstanceRuntime  based on the partition key. \nIf a  PartitionInstanceRuntime  is not available for the given partition key, it is dynamically generated via the relevant  QueryRuntimes  and  InnerStreamJunctions .   Based on the partition definition, the  QueryRuntimes  in the  PartitionInstanceRuntime  wire themselves via inner  StreamJunctions  or using  StreamJunctions  outside the partitions. \nWhen a partition query consumes a non partitioned global stream, all instances of its  QueryRuntime  that are part of multiple  PartitionInstanceRuntimes \nreceive the same event as depicted in the above diagram.", 
            "title": "Siddhi Partition Execution"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#siddhi-event-formats", 
            "text": "Siddhi has three event formats.     Event    This is the format exposed to end users when they send events via Input Handler, and consume events via Stream Callback or Query Callback.\nThis consists of an  Object[]  that contains all the values in accordance to the corresponding stream.     StreamEvent  (Subtype of  ComplexEvent )  This is used within queries. This contains the following three  Object[] s: \n-  beforeWindowData : This contains values that are only used in processors that are executed before the  WindowProcessor .\n-  onAfterWindowData : This contains values that are only used by the  WindowProcessor  and the other processors that follow it, but not sent as output.\n-  outputData : This contains the values that comply with the output stream of the query.    In order to optimize the amount of data that is stored in the in-memory at windows, the content in  beforeWindowData  is cleared before the \n    event enters the  WindowProcessor . StreamEvents can also be chained by linking each other via the  next  property in them.      StateEvent  (Subtype of  ComplexEvent )  This is used in Joins, Patterns and Sequences when we need to associate events of multiple streams, tables, windows and aggregations of different types together.\nThis has a collection of  StreamEvents  representing different streams, tables, etc, that are used in the query, and  outputData  to contain the values that are needed for the query output.  StreamEvents  can also be chained by linking each other with the  next  property in them.     Event Chunks  Event Chunks provide an easier way of manipulating the chain of  StreamEvents  and  StateEvents  so that they are be easily iterated, inserted and removed.", 
            "title": "Siddhi Event Formats"
        }, 
        {
            "location": "/documentation/siddhi-architecture/#summary", 
            "text": "This article focuses on describing the architecture of Siddhi and rationalizing the architectural decisions made. It\nalso explains the key features of Siddhi. \nThis is possibly a great starting point for new developers to understand Siddhi and to start contributing to it.", 
            "title": "Summary"
        }, 
        {
            "location": "/extensions/", 
            "text": "Siddhi Extensions\n\n\nAvailable Extensions\n\n\nFollowing are some prewritten extensions that are supported with Siddhi;\n\n\nExtensions released under Apache 2.0 License\n\n\n\n\nexecution string\n\n\nexecution math\n\n\nexecution time\n\n\nexecution streamingml\n\n\nexecution regex\n\n\nexecution markov\n\n\nexecution unique\n\n\nexecution map\n\n\nexecution unitconversion\n\n\nexecution extrema\n\n\nexecution timeseries\n\n\nexecution var\n\n\nexecution priority\n\n\nexecution reorder\n\n\nexecution sentiment\n\n\nexecution stats\n\n\nexecution geo\n\n\nexecution kalmanfilter\n\n\nio http\n\n\nio kafka\n\n\nio tcp\n\n\nio wso2event\n\n\nio email\n\n\nio jms\n\n\nio file\n\n\nio rabbitmq\n\n\nio mqtt\n\n\nmap json\n\n\nmap xml\n\n\nmap binary\n\n\nmap text\n\n\nmap wso2event\n\n\nmap keyvalue\n\n\nstore rdbms\n\n\nstore solr\n\n\nstore mongodb\n\n\nscript js\n\n\nscript scala\n\n\n\n\nExtensions released under GPL License\n\n\n\n\nexecution pmml\n\n\nexecution geo\n\n\nexecution nlp\n\n\nexecution r\n\n\nexecution streamingml\n\n\nscript r\n\n\n\n\nExtension Repositories\n\n\nAll the extension repositories maintained by WSO2 can be found \nhere", 
            "title": "Extensions"
        }, 
        {
            "location": "/extensions/#siddhi-extensions", 
            "text": "", 
            "title": "Siddhi Extensions"
        }, 
        {
            "location": "/extensions/#available-extensions", 
            "text": "Following are some prewritten extensions that are supported with Siddhi;", 
            "title": "Available Extensions"
        }, 
        {
            "location": "/extensions/#extensions-released-under-apache-20-license", 
            "text": "execution string  execution math  execution time  execution streamingml  execution regex  execution markov  execution unique  execution map  execution unitconversion  execution extrema  execution timeseries  execution var  execution priority  execution reorder  execution sentiment  execution stats  execution geo  execution kalmanfilter  io http  io kafka  io tcp  io wso2event  io email  io jms  io file  io rabbitmq  io mqtt  map json  map xml  map binary  map text  map wso2event  map keyvalue  store rdbms  store solr  store mongodb  script js  script scala", 
            "title": "Extensions released under Apache 2.0 License"
        }, 
        {
            "location": "/extensions/#extensions-released-under-gpl-license", 
            "text": "execution pmml  execution geo  execution nlp  execution r  execution streamingml  script r", 
            "title": "Extensions released under GPL License"
        }, 
        {
            "location": "/extensions/#extension-repositories", 
            "text": "All the extension repositories maintained by WSO2 can be found  here", 
            "title": "Extension Repositories"
        }, 
        {
            "location": "/api/4.0.0-M106/", 
            "text": "API Docs - v4.0.0-M106\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "4.0.0-M106"
        }, 
        {
            "location": "/api/4.0.0-M106/#api-docs-v400-m106", 
            "text": "", 
            "title": "API Docs - v4.0.0-M106"
        }, 
        {
            "location": "/api/4.0.0-M106/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M106/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M106/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M106/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M106/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M106/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M106/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M106/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M106/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M106/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M106/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M106/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M105/", 
            "text": "API Docs - v4.0.0-M105\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nCore\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M105"
        }, 
        {
            "location": "/api/4.0.0-M105/#api-docs-v400-m105", 
            "text": "", 
            "title": "API Docs - v4.0.0-M105"
        }, 
        {
            "location": "/api/4.0.0-M105/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M105/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M105/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M105/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M105/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M105/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M105/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M105/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M105/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M105/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M105/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M105/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M105/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/", 
            "text": "API Docs - v4.0.0-M104\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nCore\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M104"
        }, 
        {
            "location": "/api/4.0.0-M104/#api-docs-v400-m104", 
            "text": "", 
            "title": "API Docs - v4.0.0-M104"
        }, 
        {
            "location": "/api/4.0.0-M104/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M104/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M104/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M104/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M104/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M104/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M104/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M104/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M104/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M104/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M104/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M104/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M104/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/", 
            "text": "API Docs - v4.0.0-M103\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nCore\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M103"
        }, 
        {
            "location": "/api/4.0.0-M103/#api-docs-v400-m103", 
            "text": "", 
            "title": "API Docs - v4.0.0-M103"
        }, 
        {
            "location": "/api/4.0.0-M103/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M103/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M103/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M103/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M103/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M103/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M103/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M103/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M103/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M103/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M103/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M103/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M103/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/", 
            "text": "API Docs - v4.0.0-M100\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M100"
        }, 
        {
            "location": "/api/4.0.0-M100/#api-docs-v400-m100", 
            "text": "", 
            "title": "API Docs - v4.0.0-M100"
        }, 
        {
            "location": "/api/4.0.0-M100/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M100/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M100/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M100/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M100/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M100/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M100/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M100/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M100/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M100/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M100/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M100/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M100/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/", 
            "text": "API Docs - v4.0.0-M99\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M99"
        }, 
        {
            "location": "/api/4.0.0-M99/#api-docs-v400-m99", 
            "text": "", 
            "title": "API Docs - v4.0.0-M99"
        }, 
        {
            "location": "/api/4.0.0-M99/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M99/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M99/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M99/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M99/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M99/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M99/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M99/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M99/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M99/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M99/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M99/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M99/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/", 
            "text": "API Docs - v4.0.0-M98\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M98"
        }, 
        {
            "location": "/api/4.0.0-M98/#api-docs-v400-m98", 
            "text": "", 
            "title": "API Docs - v4.0.0-M98"
        }, 
        {
            "location": "/api/4.0.0-M98/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M98/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M98/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M98/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M98/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M98/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M98/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M98/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M98/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M98/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M98/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M98/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M98/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/", 
            "text": "API Docs - v4.0.0-M97\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M97"
        }, 
        {
            "location": "/api/4.0.0-M97/#api-docs-v400-m97", 
            "text": "", 
            "title": "API Docs - v4.0.0-M97"
        }, 
        {
            "location": "/api/4.0.0-M97/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M97/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M97/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M97/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M97/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M97/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M97/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M97/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M97/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M97/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M97/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M97/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M97/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/", 
            "text": "API Docs - v4.0.0-M96\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M96"
        }, 
        {
            "location": "/api/4.0.0-M96/#api-docs-v400-m96", 
            "text": "", 
            "title": "API Docs - v4.0.0-M96"
        }, 
        {
            "location": "/api/4.0.0-M96/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M96/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M96/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M96/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M96/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M96/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M96/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M96/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M96/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M96/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M96/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M96/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M96/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/", 
            "text": "API Docs - v4.0.0-M95\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M95"
        }, 
        {
            "location": "/api/4.0.0-M95/#api-docs-v400-m95", 
            "text": "", 
            "title": "API Docs - v4.0.0-M95"
        }, 
        {
            "location": "/api/4.0.0-M95/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M95/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M95/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M95/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M95/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M95/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M95/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M95/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M95/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M95/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M95/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M95/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M95/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/", 
            "text": "API Docs - v4.0.0-M94\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M94"
        }, 
        {
            "location": "/api/4.0.0-M94/#api-docs-v400-m94", 
            "text": "", 
            "title": "API Docs - v4.0.0-M94"
        }, 
        {
            "location": "/api/4.0.0-M94/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M94/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/4.0.0-M94/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M94/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M94/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M94/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/4.0.0-M94/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M94/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/4.0.0-M94/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M94/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/4.0.0-M94/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/4.0.0-M94/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/4.0.0-M94/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/4.0.0-M93/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M93"
        }, 
        {
            "location": "/api/4.0.0-M93/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M93/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M93/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M93/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M93/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M93/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M93/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M93/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M93/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M93/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M93/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M93/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M93/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M93/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M92/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M92"
        }, 
        {
            "location": "/api/4.0.0-M92/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M92/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M92/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M92/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M92/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M92/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M92/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M92/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M92/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M92/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M92/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M92/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M92/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M92/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M91/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M91"
        }, 
        {
            "location": "/api/4.0.0-M91/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M91/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M91/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M91/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M91/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M91/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M91/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M91/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M91/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M91/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M91/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M91/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M91/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M91/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M90/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M90"
        }, 
        {
            "location": "/api/4.0.0-M90/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M90/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M90/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M90/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M90/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M90/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M90/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M90/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M90/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M90/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M90/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M90/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M90/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M90/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M89/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M89"
        }, 
        {
            "location": "/api/4.0.0-M89/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M89/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M89/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M89/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M89/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M89/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M89/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M89/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M89/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M89/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M89/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M89/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M89/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M89/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M88/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M88"
        }, 
        {
            "location": "/api/4.0.0-M88/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M88/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M88/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M88/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M88/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M88/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M88/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M88/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M88/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M88/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M88/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M88/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M88/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M88/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M87/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M87"
        }, 
        {
            "location": "/api/4.0.0-M87/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M87/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M87/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M87/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M87/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M87/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M87/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M87/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M87/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M87/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M87/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M87/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M87/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M87/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M86/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M86"
        }, 
        {
            "location": "/api/4.0.0-M86/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M86/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M86/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M86/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M86/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M86/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M86/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M86/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M86/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M86/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M86/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M86/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M86/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M86/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M85/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M85"
        }, 
        {
            "location": "/api/4.0.0-M85/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M85/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M85/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M85/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M85/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M85/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M85/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M85/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M85/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M85/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M85/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M85/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M85/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M85/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M84/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M84"
        }, 
        {
            "location": "/api/4.0.0-M84/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M84/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M84/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M84/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M84/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M84/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M84/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M84/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M84/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M84/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M84/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M84/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M84/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M84/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M83/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M83"
        }, 
        {
            "location": "/api/4.0.0-M83/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M83/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M83/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M83/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M83/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M83/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M83/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M83/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M83/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M83/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M83/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M83/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M83/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M83/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M82/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M82"
        }, 
        {
            "location": "/api/4.0.0-M82/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M82/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M82/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M82/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M82/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M82/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M82/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M82/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M82/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M82/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M82/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M82/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M82/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M82/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M81/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M81"
        }, 
        {
            "location": "/api/4.0.0-M81/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M81/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M81/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M81/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M81/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M81/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M81/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M81/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M81/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M81/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M81/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M81/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M81/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M81/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M80/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M80"
        }, 
        {
            "location": "/api/4.0.0-M80/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M80/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M80/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M80/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M80/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M80/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M80/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M80/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M80/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M80/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M80/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M80/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M80/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M80/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/4.0.0-M79/", 
            "text": "API Docs\n\n\nSink\n\n\ninMemory \n(\nSink\n)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(\nSink Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.\n\n\n\nSourcemapper\n\n\npassThrough \n(\nSource Mapper\n)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSource\n\n\ninMemory \n(\nSource\n)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nCore\n\n\nsort \n(\nWindow\n)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\nlossyFrequent \n(\nWindow\n)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\ntimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\nlength \n(\nWindow\n)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\ntime \n(\nWindow\n)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\nfrequent \n(\nWindow\n)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\ntimeLength \n(\nWindow\n)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ncron \n(\nWindow\n)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTime \n(\nWindow\n)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nlengthBatch \n(\nWindow\n)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nexternalTimeBatch \n(\nWindow\n)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nifThenElse \n(\nFunction\n)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\nUUID \n(\nFunction\n)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nminimum \n(\nFunction\n)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\ncast \n(\nFunction\n)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ninstanceOfDouble \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\nconvert \n(\nFunction\n)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ninstanceOfLong \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfInteger \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ndefault \n(\nFunction\n)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\nmaximum \n(\nFunction\n)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\neventTimestamp \n(\nFunction\n)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\ninstanceOfBoolean \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ncoalesce \n(\nFunction\n)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\ncurrentTimeMillis \n(\nFunction\n)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ninstanceOfString \n(\nFunction\n)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nlog \n(\nStream Processor\n)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\nmax \n(\nAggregate Function\n)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\navg \n(\nAggregate Function\n)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ndistinctCount \n(\nAggregate Function\n)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmaxForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nstdDev \n(\nAggregate Function\n)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\ncount \n(\nAggregate Function\n)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\nmin \n(\nAggregate Function\n)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nsum \n(\nAggregate Function\n)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\nminForever \n(\nAggregate Function\n)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\npol2Cart \n(\nStream Function\n)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "4.0.0-M79"
        }, 
        {
            "location": "/api/4.0.0-M79/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/4.0.0-M79/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/4.0.0-M79/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink"
        }, 
        {
            "location": "/api/4.0.0-M79/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/4.0.0-M79/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper"
        }, 
        {
            "location": "/api/4.0.0-M79/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/4.0.0-M79/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper"
        }, 
        {
            "location": "/api/4.0.0-M79/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/4.0.0-M79/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source"
        }, 
        {
            "location": "/api/4.0.0-M79/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/4.0.0-M79/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window"
        }, 
        {
            "location": "/api/4.0.0-M79/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor"
        }, 
        {
            "location": "/api/4.0.0-M79/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function"
        }, 
        {
            "location": "/api/4.0.0-M79/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v4.0.0-M107-SNAPSHOT\n\n\nCore\n\n\ncron \n(Window)\n\n\nThis window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.\n\n\n\nSyntax\n\n\ncron(\nSTRING\n cron.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncron.expression\n\n        \nThe cron expression that represents a time schedule.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int)cron(\n*/5 * * * * ?\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;\n\n\n\n\n\nThis will processed events as the output every 5 seconds.\n\n\n\nexternalTimeBatch \n(Window)\n\n\nA batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.\n\n\n\nSyntax\n\n\nexternalTimeBatch(\nLONG\n timestamp, \nINT|LONG|TIME\n window.time, \nINT|LONG|TIME\n start.time, \nINT|LONG|TIME\n timeout)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntimestamp\n\n        \nThe time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing.\n\n        \n\n        \nLONG\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nUser defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntimeout\n\n        \nTime to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch.\n\n        \n0\n\n        \nINT\nLONG\nTIME\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime.\n\n\n\nEXAMPLE 2\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.\n\n\n\nEXAMPLE 3\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;\n\n\n\n\n\nThis will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.\n\n\n\nexternalTime \n(Window)\n\n\nA sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.\n\n\n\nSyntax\n\n\nexternalTime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;\n\n\n\n\n\nprocessing events arrived within the last 20 seconds from the eventTime and output expired events.\n\n\n\nfrequent \n(Window)\n\n\nThis window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.\n\n\n\nSyntax\n\n\nfrequent(\nINT\n event.count, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.count\n\n        \nThe number of most frequent events to be emitted to the stream.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 most frequent events.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom purchase[price \n= 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nThis will returns the 2 latest events with the most frequently appeared card numbers.\n\n\n\nlengthBatch \n(Window)\n\n\nA batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.\n\n\n\nSyntax\n\n\nlengthBatch(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events the window should tumble.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events as a batch and out put all events.\n\n\n\nlength \n(Window)\n\n\nA sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.\n\n\n\nSyntax\n\n\nlength(\nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be included in a sliding length window.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing 10 events and out put all events.\n\n\n\nlossyFrequent \n(Window)\n\n\nThis window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.\n\n\n\nSyntax\n\n\nlossyFrequent(\nDOUBLE\n support.threshold, \nDOUBLE\n error.bound, \nSTRING\n attribute)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nsupport.threshold\n\n        \nThe support threshold value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nerror.bound\n\n        \nThe error bound value.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.\n\n\n\nEXAMPLE 2\n\n\ndefine stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name = \nquery0\n)\nfrom purchase[price \n= 30]\ninsert into purchaseWindow;\n@info(name = \nquery1\n)\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;\n\n\n\n\n\nlossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.\n\n\n\nsort \n(Window)\n\n\nThis window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.\n\n\n\nSyntax\n\n\nsort(\nINT\n window.length, \nSTRING\n attribute, \nSTRING\n order)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe size of the window length.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that should be checked for the order.\n\n        \nThe concatenation of all the attributes of the event is considered.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \norder\n\n        \nThe order define as \"asc\" or \"desc\".\n\n        \nasc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume, \nasc\n);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;\n\n\n\n\n\nsort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.\n\n\n\ntimeBatch \n(Window)\n\n\nA batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.\n\n\n\nSyntax\n\n\ntimeBatch(\nINT|LONG|TIME\n window.time, \nINT\n start.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe batch time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nstart.time\n\n        \nThis specifies an offset in milliseconds in order to start the window at a time different to the standard time.\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events arrived every 20 milliseconds as a batch and out put all events.\n\n\n\ntimeLength \n(Window)\n\n\nA sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.\n\n\n\nSyntax\n\n\ntimeLength(\nINT|LONG|TIME\n window.time, \nINT\n window.length)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nwindow.length\n\n        \nThe number of events that should be be included in a sliding length window..\n\n        \n\n        \nINT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;\n\n\n\n\n\nwindow.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.\n\n\n\ntime \n(Window)\n\n\nA sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.\n\n\n\nSyntax\n\n\ntime(\nINT|LONG|TIME\n window.time)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nwindow.time\n\n        \nThe sliding time period for which the window should hold events.\n\n        \n\n        \nINT\nLONG\nTIME\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name = \nquery0\n)\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name = \nquery1\n)\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;\n\n\n\n\n\nThis will processing events that arrived within the last 20 milliseconds.\n\n\n\ncast \n(Function)\n\n\nConverts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n cast(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n to.be.caster, \nSTRING\n cast.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.caster\n\n        \nThis specifies the attribute to be casted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ncast.to\n\n        \nA string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, cast(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will cast the fooStream temp field value into 'double' format.\n\n\n\ncoalesce \n(Function)\n\n\nReturns the value of the first input parameter that is not null, and all input parameters have to be on the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n coalesce(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n args)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nargs\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect coalesce(\n123\n, null, \n789\n) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 123.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns first null value 76.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;\n\n\n\n\n\nThis will returns null as there are no notnull values.\n\n\n\nconvert \n(Function)\n\n\nConverts the first input parameter according to the convertedTo parameter.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n convert(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL\n to.be.converted, \nSTRING\n converted.to)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nto.be.converted\n\n        \nThis specifies the value to be converted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconverted.to\n\n        \nA string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect convert(temp, \ndouble\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'double'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect convert(temp, \nint\n) as temp\ninsert into barStream;\n\n\n\n\n\nThis will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").\n\n\n\ncurrentTimeMillis \n(Function)\n\n\nReturns the current timestamp of siddhi application in milliseconds.\n\n\n\nSyntax\n\n\nLONG\n currentTimeMillis()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current siddhi application timestamp.\n\n\n\ndefault \n(Function)\n\n\nChecks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n attribute, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n default)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nattribute\n\n        \nThe attribute that could be null.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \ndefault\n\n        \nThe default value that will be used when 'attribute' parameter is null\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;\n\n\n\n\n\nThis will replace TempStream's temp attribute with default value if the temp is null.\n\n\n\neventTimestamp \n(Function)\n\n\nReturns the timestamp of the processed event.\n\n\n\nSyntax\n\n\nLONG\n eventTimestamp()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;\n\n\n\n\n\nThis will extract current events timestamp.\n\n\n\nifThenElse \n(Function)\n\n\nEvaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n ifThenElse(\nBOOL\n condition, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n if.expression, \nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n else.expression)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ncondition\n\n        \nThis specifies the if then else condition value.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nif.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is true.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nelse.expression\n\n        \nThis specifies the value to be returned if the value of the condition parameter is false.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue\n35,\nHigh\n,\nLow\n) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns High if sensorValue = 50.\n\n\n\nEXAMPLE 2\n\n\n@info(name = \nquery1\n)\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage \n 5, 0, 1) as status\ninsert into outputStream;\n\n\n\n\n\nThis will returns 1 if voltage= 12.\n\n\n\nEXAMPLE 3\n\n\n@info(name = \nquery1\n)\nfrom userEventStream\nselect userName, ifThenElse(password == \nadmin\n, true, false) as passwordState\ninsert into outputStream;\n\n\n\n\n\nThis will returns  passwordState as true if password = admin.\n\n\n\ninstanceOfBoolean \n(Function)\n\n\nChecks whether the parameter is an instance of Boolean or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfBoolean(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value of switchState is true.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;\n\n\n\n\n\nif the value = 32 then this will returns false as the value is not an instance of the boolean.\n\n\n\ninstanceOfDouble \n(Function)\n\n\nChecks whether the parameter is an instance of Double or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfDouble(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is double ex : 56.45.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is not an instance of the double.\n\n\n\ninstanceOfFloat \n(Function)\n\n\nChecks whether the parameter is an instance of Float or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfFloat(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is float ex : 56.45f.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a float.\n\n\n\ninstanceOfInteger \n(Function)\n\n\nChecks whether the parameter is an instance of Integer or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfInteger(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is integer.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfLong \n(Function)\n\n\nChecks whether the parameter is an instance of Long or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfLong(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is long ex : 56456l.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a long.\n\n\n\ninstanceOfString \n(Function)\n\n\nChecks whether the parameter is an instance of String or not.\n\n\n\nSyntax\n\n\nBOOL\n instanceOfString(\nINT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe parameter to be checked.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\nBOOL\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect instanceOfString(value) as state\ninsert into barStream;\n\n\n\n\n\nThis will return true if the value field format is string ex : 'test'.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;\n\n\n\n\n\nif the switchState = true then this will returns false as the value is an instance of the boolean not a string.\n\n\n\nmaximum \n(Function)\n\n\nReturns the maximum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maximum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the maximum value of the input parameters price1, price2, price3.\n\n\n\nminimum \n(Function)\n\n\nReturns the minimum value of the input parameters.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minimum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThis function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@info(name = \nquery1\n) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;\n\n\n\n\n\nThis will returns the minimum value of the input parameters price1, price2, price3.\n\n\n\nUUID \n(Function)\n\n\nGenerates a UUID (Universally Unique Identifier).\n\n\n\nSyntax\n\n\nSTRING\n UUID()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom TempStream\nselect convert(roomNo, \nstring\n) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\n\n\nThis will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8\nfrom TempStream\nselect convert(roomNo, 'string') as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;\n\n\n\nlog \n(Stream Processor)\n\n\nThe logger stream processor logs the message with or without event for the given log priority.\n\n\n\nSyntax\n\n\nlog(\nSTRING\n priority, \nSTRING\n log.message, \nBOOL\n is.event.logged)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \npriority\n\n        \nThe priority/type of this log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nlog.message\n\n        \nThis submit the log message.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nis.event.logged\n\n        \nUse this command to enable the logging of one or more events.\n\n        \n\n        \nBOOL\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#log(\nINFO\n, \nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log as INFO with the message \"Sample Event :\" + fooStream:events.\n\n\n\nEXAMPLE 2\n\n\nfrom fooStream#log(\nSample Event :\n, true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will logs with default log level as INFO.\n\n\n\nEXAMPLE 3\n\n\nfrom fooStream#log(\nSample Event :\n, fasle)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log message.\n\n\n\nEXAMPLE 4\n\n\nfrom fooStream#log(true)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will only log fooStream:events.\n\n\n\nEXAMPLE 5\n\n\nfrom fooStream#log(\nSample Event :\n)\nselect *\ninsert into barStream;\n\n\n\n\n\nThis will log message and fooStream:events.\n\n\n\navg \n(Aggregate Function)\n\n\nCalculates the average for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n avg(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that need to be averaged.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;\n\n\n\n\n\navg(temp) returns the average temp value for all the events based on their arrival and expiry.\n\n\n\ncount \n(Aggregate Function)\n\n\nReturns the count of all the events.\n\n\n\nSyntax\n\n\nLONG\n count()\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;\n\n\n\n\n\nThis will return the count of all the events for time batch in 10 seconds.\n\n\n\ndistinctCount \n(Aggregate Function)\n\n\nReturns the count of distinct occurrences for a given arg.\n\n\n\nSyntax\n\n\nLONG\n distinctCount(\nINT|LONG|DOUBLE|FLOAT|STRING\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be counted.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;\n\n\n\n\n\ndistinctcount(pageID) for the following output returns 3.\n\"WEB_PAGE_1\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\"WEB_PAGE_3\"\n\"WEB_PAGE_1\"\n\"WEB_PAGE_2\"\n\n\n\nmax \n(Aggregate Function)\n\n\nReturns the maximum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n max(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;\n\n\n\n\n\nmax(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nmaxForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n maxForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the maximum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect maxForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nmaxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.\n\n\n\nmin \n(Aggregate Function)\n\n\nReturns the minimum value for all the events.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n min(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect min(temp) as minTemp\ninsert into outputStream;\n\n\n\n\n\nmin(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.\n\n\n\nminForever \n(Aggregate Function)\n\n\nThis is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.\n\n\n\nSyntax\n\n\nINT|LONG|DOUBLE|FLOAT\n minForever(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be compared to find the minimum value.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect minForever(temp) as max\ninsert into outputStream;\n\n\n\n\n\nminForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.\n\n\n\nstdDev \n(Aggregate Function)\n\n\nReturns the calculated standard deviation for all the events.\n\n\n\nSyntax\n\n\nDOUBLE\n stdDev(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that should be used to calculate the standard deviation.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;\n\n\n\n\n\nstddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.\n\n\n\nsum \n(Aggregate Function)\n\n\nReturns the sum for all the events.\n\n\n\nSyntax\n\n\nLONG|DOUBLE\n sum(\nINT|LONG|DOUBLE|FLOAT\n arg)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \narg\n\n        \nThe value that needs to be summed.\n\n        \n\n        \nINT\nLONG\nDOUBLE\nFLOAT\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;\n\n\n\n\n\nThis will returns the sum of volume values as a long value for each event arrival and expiry.\n\n\n\npol2Cart \n(Stream Function)\n\n\nThe pol2Cart function calculating the cartesian coordinates x \n&\n y for the given theta, rho coordinates and adding them as new attributes to the existing events.\n\n\n\nSyntax\n\n\npol2Cart(\nDOUBLE\n theta, \nDOUBLE\n rho, \nDOUBLE\n z)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntheta\n\n        \nThe theta value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrho\n\n        \nThe rho value of the coordinates.\n\n        \n\n        \nDOUBLE\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nz\n\n        \nz value of the cartesian coordinates.\n\n        \nIf z value is not given, drop the third parameter of the output.\n\n        \nDOUBLE\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\nfrom PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.\n\n\n\nEXAMPLE 2\n\n\nfrom PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;\n\n\n\n\n\nThis will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.\n\n\n\nSource\n\n\ninMemory \n(Source)\n\n\nIn-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@source(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nSubscribes to sent on the given topic.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which passes the received event internally without using external transport.\n\n\n\nSourcemapper\n\n\npassThrough \n(Source Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type=\ntcp\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.\n\n\n\nSink\n\n\ninMemory \n(Sink)\n\n\nIn-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).\n\n\n\nSyntax\n\n\n@sink(type=\ninMemory\n, topic=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ntopic\n\n        \nEvent will be delivered to allthe subscribers of the same topic\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long)\n\n\n\n\n\nIn this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.\n\n\n\nSinkmapper\n\n\npassThrough \n(Sink Mapper)\n\n\nPass-through mapper passed events (Event[]) through without any mapping or modifications.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\npassThrough\n)\n\n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type=\ninMemory\n, @map(type=\npassThrough\n),\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\n\nIn the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v400-m107-snapshot", 
            "text": "", 
            "title": "API Docs - v4.0.0-M107-SNAPSHOT"
        }, 
        {
            "location": "/api/latest/#core", 
            "text": "", 
            "title": "Core"
        }, 
        {
            "location": "/api/latest/#cron-window", 
            "text": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing.  Syntax  cron( STRING  cron.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         cron.expression \n         The cron expression that represents a time schedule. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int)cron( */5 * * * * ? );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow \nselect symbol,price,volume\ninsert into outputStream ;  This will processed events as the output every 5 seconds.", 
            "title": "cron (Window)"
        }, 
        {
            "location": "/api/latest/#externaltimebatch-window", 
            "text": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime.  Syntax  externalTimeBatch( LONG  timestamp,  INT|LONG|TIME  window.time,  INT|LONG|TIME  start.time,  INT|LONG|TIME  timeout)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         timestamp \n         The time which the window determines as current time and will act upon. The value of this parameter should be monotonically increasing. \n         \n         LONG \n         No \n         No \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         User defined start time. This could either be a constant (of type int, long or time) or an attribute of the corresponding stream (of type long). If an attribute is provided, initial value of attribute would be considered as startTime. When startTime is not given, initial value of timestamp is used as the default. \n         0 \n         INT LONG TIME \n         Yes \n         No \n     \n     \n         timeout \n         Time to wait for arrival of new event, before flushing and giving output for events belonging to a specific batch. If timeout is not provided, system waits till an event from next batch arrives to flush current batch. \n         0 \n         INT LONG TIME \n         Yes \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 1 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  This will processing events that arrive every 1 seconds from the eventTime.  EXAMPLE 2  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 20 sec, 0) output expired events;  This will processing events that arrive every 1 seconds from the eventTime. Starts on 0th millisecond of an hour.  EXAMPLE 3  define window cseEventWindow (symbol string, price float, volume int) externalTimeBatch(eventTime, 2 sec, eventTimestamp, 100) output expired events;  This will processing events that arrive every 2 seconds from the eventTim. Considers the first event's eventTimestamp value as startTime. Waits 100 milliseconds for the arrival of a new event before flushing current batch.", 
            "title": "externalTimeBatch (Window)"
        }, 
        {
            "location": "/api/latest/#externaltime-window", 
            "text": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp.  Syntax  externalTime( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) externalTime(eventTime, 20 sec) output expired events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert expired events into outputStream ;  processing events arrived within the last 20 seconds from the eventTime and output expired events.", 
            "title": "externalTime (Window)"
        }, 
        {
            "location": "/api/latest/#frequent-window", 
            "text": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm.  Syntax  frequent( INT  event.count,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.count \n         The number of most frequent events to be emitted to the stream. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 most frequent events.  EXAMPLE 2  @info(name =  query1 )\nfrom purchase[price  = 30]#window.frequent(2, cardNo)\nselect cardNo, price\ninsert all events into PotentialFraud;  This will returns the 2 latest events with the most frequently appeared card numbers.", 
            "title": "frequent (Window)"
        }, 
        {
            "location": "/api/latest/#lengthbatch-window", 
            "text": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives.  Syntax  lengthBatch( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events the window should tumble. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) lengthBatch(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events as a batch and out put all events.", 
            "title": "lengthBatch (Window)"
        }, 
        {
            "location": "/api/latest/#length-window", 
            "text": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry.  Syntax  length( INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The number of events that should be included in a sliding length window. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) length(10) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing 10 events and out put all events.", 
            "title": "length (Window)"
        }, 
        {
            "location": "/api/latest/#lossyfrequent-window", 
            "text": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter.  Syntax  lossyFrequent( DOUBLE  support.threshold,  DOUBLE  error.bound,  STRING  attribute)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         support.threshold \n         The support threshold value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         error.bound \n         The error bound value. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         attribute \n         The attributes to group the events. If no attributes are given, the concatenation of all the attributes of the event is considered. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.1, 0.01);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.1, 0.01) returns all the events of which the current frequency exceeds 0.1, with an error bound of 0.01.  EXAMPLE 2  define stream purchase (cardNo string, price float);\ndefine window purchaseWindow (cardNo string, price float) lossyFrequent(0.3, 0.05, cardNo);\n@info(name =  query0 )\nfrom purchase[price  = 30]\ninsert into purchaseWindow;\n@info(name =  query1 )\nfrom purchaseWindow\nselect cardNo, price\ninsert all events into PotentialFraud;  lossyFrequent(0.3, 0.05, cardNo) returns all the events of which the cardNo attributes frequency exceeds 0.3, with an error bound of 0.05.", 
            "title": "lossyFrequent (Window)"
        }, 
        {
            "location": "/api/latest/#sort-window", 
            "text": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order.  Syntax  sort( INT  window.length,  STRING  attribute,  STRING  order)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.length \n         The size of the window length. \n         \n         INT \n         No \n         No \n     \n     \n         attribute \n         The attribute that should be checked for the order. \n         The concatenation of all the attributes of the event is considered. \n         STRING \n         Yes \n         No \n     \n     \n         order \n         The order define as \"asc\" or \"desc\". \n         asc \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume long);\ndefine window cseEventWindow (symbol string, price float, volume long) sort(2,volume,  asc );\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect volume\ninsert all events into outputStream ;  sort(5, price, 'asc') keeps the events sorted by price in the ascending order. Therefore, at any given time, the window contains the 5 lowest prices.", 
            "title": "sort (Window)"
        }, 
        {
            "location": "/api/latest/#timebatch-window", 
            "text": "A batch (tumbling) time window that holds events that arrive during window.time periods, and gets updated for each window.time.  Syntax  timeBatch( INT|LONG|TIME  window.time,  INT  start.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The batch time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         start.time \n         This specifies an offset in milliseconds in order to start the window at a time different to the standard time. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) timeBatch(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events arrived every 20 milliseconds as a batch and out put all events.", 
            "title": "timeBatch (Window)"
        }, 
        {
            "location": "/api/latest/#timelength-window", 
            "text": "A sliding time window that, at a given time holds the last window.length events that arrived during last window.time period, and gets updated for every event arrival and expiry.  Syntax  timeLength( INT|LONG|TIME  window.time,  INT  window.length)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n     \n     \n         window.length \n         The number of events that should be be included in a sliding length window.. \n         \n         INT \n         No \n         No \n       Examples  EXAMPLE 1  define stream cseEventStream (symbol string, price float, volume int);\ndefine window cseEventWindow (symbol string, price float, volume int) timeLength(2 sec, 10);\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow select symbol, price, volume\ninsert all events into outputStream;  window.timeLength(2 sec, 10) holds the last 10 events that arrived during last 2 seconds and gets updated for every event arrival and expiry.", 
            "title": "timeLength (Window)"
        }, 
        {
            "location": "/api/latest/#time-window", 
            "text": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry.  Syntax  time( INT|LONG|TIME  window.time)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         window.time \n         The sliding time period for which the window should hold events. \n         \n         INT LONG TIME \n         No \n         No \n       Examples  EXAMPLE 1  define window cseEventWindow (symbol string, price float, volume int) time(20) output all events;\n@info(name =  query0 )\nfrom cseEventStream\ninsert into cseEventWindow;\n@info(name =  query1 )\nfrom cseEventWindow\nselect symbol, sum(price) as price\ninsert all events into outputStream ;  This will processing events that arrived within the last 20 milliseconds.", 
            "title": "time (Window)"
        }, 
        {
            "location": "/api/latest/#cast-function", 
            "text": "Converts the first parameter according to the cast.to parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  cast( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  to.be.caster,  STRING  cast.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.caster \n         This specifies the attribute to be casted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         cast.to \n         A string constant parameter expressing the cast to type using one of the following strings values: int, long, float, double, string, bool. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect symbol as name, cast(temp,  double ) as temp\ninsert into barStream;  This will cast the fooStream temp field value into 'double' format.", 
            "title": "cast (Function)"
        }, 
        {
            "location": "/api/latest/#coalesce-function", 
            "text": "Returns the value of the first input parameter that is not null, and all input parameters have to be on the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  coalesce( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  args)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         args \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect coalesce( 123 , null,  789 ) as value\ninsert into barStream;  This will returns first null value 123.  EXAMPLE 2  from fooStream\nselect coalesce(null, 76, 567) as value\ninsert into barStream;  This will returns first null value 76.  EXAMPLE 3  from fooStream\nselect coalesce(null, null, null) as value\ninsert into barStream;  This will returns null as there are no notnull values.", 
            "title": "coalesce (Function)"
        }, 
        {
            "location": "/api/latest/#convert-function", 
            "text": "Converts the first input parameter according to the convertedTo parameter.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL  convert( INT|LONG|DOUBLE|FLOAT|STRING|BOOL  to.be.converted,  STRING  converted.to)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         to.be.converted \n         This specifies the value to be converted. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL \n         No \n         No \n     \n     \n         converted.to \n         A string constant parameter to which type the attribute need to be converted  using one of the following strings values: 'int', 'long', 'float', 'double', 'string', 'bool'. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect convert(temp,  double ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'double'.  EXAMPLE 2  from fooStream\nselect convert(temp,  int ) as temp\ninsert into barStream;  This will convert fooStream temp value into 'int' (value = \"convert(45.9, 'int') returns 46\").", 
            "title": "convert (Function)"
        }, 
        {
            "location": "/api/latest/#currenttimemillis-function", 
            "text": "Returns the current timestamp of siddhi application in milliseconds.  Syntax  LONG  currentTimeMillis()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, currentTimeMillis() as eventTimestamp \ninsert into barStream;  This will extract current siddhi application timestamp.", 
            "title": "currentTimeMillis (Function)"
        }, 
        {
            "location": "/api/latest/#default-function", 
            "text": "Checks if the 'attribute' parameter is null and if so returns the value of the 'default' parameter  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  attribute,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  default)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         attribute \n         The attribute that could be null. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         default \n         The default value that will be used when 'attribute' parameter is null \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from TempStream\nselect default(temp, 0.0) as temp, roomNum\ninsert into StandardTempStream;  This will replace TempStream's temp attribute with default value if the temp is null.", 
            "title": "default (Function)"
        }, 
        {
            "location": "/api/latest/#eventtimestamp-function", 
            "text": "Returns the timestamp of the processed event.  Syntax  LONG  eventTimestamp()  Examples  EXAMPLE 1  from fooStream\nselect symbol as name, eventTimestamp() as eventTimestamp \ninsert into barStream;  This will extract current events timestamp.", 
            "title": "eventTimestamp (Function)"
        }, 
        {
            "location": "/api/latest/#ifthenelse-function", 
            "text": "Evaluates the 'condition' parameter and returns value of the 'if.expression' parameter if the condition is true, or returns value of the 'else.expression' parameter if the condition is false. Here both 'if.expression' and 'else.expression' should be of the same type.  Syntax  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  ifThenElse( BOOL  condition,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  if.expression,  INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  else.expression)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         condition \n         This specifies the if then else condition value. \n         \n         BOOL \n         No \n         No \n     \n     \n         if.expression \n         This specifies the value to be returned if the value of the condition parameter is true. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n     \n     \n         else.expression \n         This specifies the value to be returned if the value of the condition parameter is false. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(sensorValue 35, High , Low ) as status\ninsert into outputStream;  This will returns High if sensorValue = 50.  EXAMPLE 2  @info(name =  query1 )\nfrom sensorEventStream\nselect sensorValue, ifThenElse(voltage   5, 0, 1) as status\ninsert into outputStream;  This will returns 1 if voltage= 12.  EXAMPLE 3  @info(name =  query1 )\nfrom userEventStream\nselect userName, ifThenElse(password ==  admin , true, false) as passwordState\ninsert into outputStream;  This will returns  passwordState as true if password = admin.", 
            "title": "ifThenElse (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofboolean-function", 
            "text": "Checks whether the parameter is an instance of Boolean or not.  Syntax  BOOL  instanceOfBoolean( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfBoolean(switchState) as state\ninsert into barStream;  This will return true if the value of switchState is true.  EXAMPLE 2  from fooStream\nselect instanceOfBoolean(value) as state\ninsert into barStream;  if the value = 32 then this will returns false as the value is not an instance of the boolean.", 
            "title": "instanceOfBoolean (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofdouble-function", 
            "text": "Checks whether the parameter is an instance of Double or not.  Syntax  BOOL  instanceOfDouble( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfDouble(value) as state\ninsert into barStream;  This will return true if the value field format is double ex : 56.45.  EXAMPLE 2  from fooStream\nselect instanceOfDouble(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is not an instance of the double.", 
            "title": "instanceOfDouble (Function)"
        }, 
        {
            "location": "/api/latest/#instanceoffloat-function", 
            "text": "Checks whether the parameter is an instance of Float or not.  Syntax  BOOL  instanceOfFloat( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfFloat(value) as state\ninsert into barStream;  This will return true if the value field format is float ex : 56.45f.  EXAMPLE 2  from fooStream\nselect instanceOfFloat(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a float.", 
            "title": "instanceOfFloat (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofinteger-function", 
            "text": "Checks whether the parameter is an instance of Integer or not.  Syntax  BOOL  instanceOfInteger( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfInteger(value) as state\ninsert into barStream;  This will return true if the value field format is integer.  EXAMPLE 2  from fooStream\nselect instanceOfInteger(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfInteger (Function)"
        }, 
        {
            "location": "/api/latest/#instanceoflong-function", 
            "text": "Checks whether the parameter is an instance of Long or not.  Syntax  BOOL  instanceOfLong( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfLong(value) as state\ninsert into barStream;  This will return true if the value field format is long ex : 56456l.  EXAMPLE 2  from fooStream\nselect instanceOfLong(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a long.", 
            "title": "instanceOfLong (Function)"
        }, 
        {
            "location": "/api/latest/#instanceofstring-function", 
            "text": "Checks whether the parameter is an instance of String or not.  Syntax  BOOL  instanceOfString( INT|LONG|DOUBLE|FLOAT|STRING|BOOL|OBJECT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The parameter to be checked. \n         \n         INT LONG DOUBLE FLOAT STRING BOOL OBJECT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect instanceOfString(value) as state\ninsert into barStream;  This will return true if the value field format is string ex : 'test'.  EXAMPLE 2  from fooStream\nselect instanceOfString(switchState) as state\ninsert into barStream;  if the switchState = true then this will returns false as the value is an instance of the boolean not a string.", 
            "title": "instanceOfString (Function)"
        }, 
        {
            "location": "/api/latest/#maximum-function", 
            "text": "Returns the maximum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  maximum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the maximum value of the input parameters price1, price2, price3.", 
            "title": "maximum (Function)"
        }, 
        {
            "location": "/api/latest/#minimum-function", 
            "text": "Returns the minimum value of the input parameters.  Syntax  INT|LONG|DOUBLE|FLOAT  minimum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         This function accepts one or more parameters. They can belong to any one of the available types. All the specified parameters should be of the same type. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  @info(name =  query1 ) from inputStream\nselect maximum(price1, price2, price3) as max\ninsert into outputStream;  This will returns the minimum value of the input parameters price1, price2, price3.", 
            "title": "minimum (Function)"
        }, 
        {
            "location": "/api/latest/#uuid-function", 
            "text": "Generates a UUID (Universally Unique Identifier).  Syntax  STRING  UUID()  Examples  EXAMPLE 1  from TempStream\nselect convert(roomNo,  string ) as roomNo, temp, UUID() as messageID\ninsert into RoomTempStream;  This will converts a room number to string, introducing a message ID to each event asUUID() returns a34eec40-32c2-44fe-8075-7f4fde2e2dd8 from TempStream select convert(roomNo, 'string') as roomNo, temp, UUID() as messageID insert into RoomTempStream;", 
            "title": "UUID (Function)"
        }, 
        {
            "location": "/api/latest/#log-stream-processor", 
            "text": "The logger stream processor logs the message with or without event for the given log priority.  Syntax  log( STRING  priority,  STRING  log.message,  BOOL  is.event.logged)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         priority \n         The priority/type of this log message. \n         \n         STRING \n         No \n         No \n     \n     \n         log.message \n         This submit the log message. \n         \n         STRING \n         No \n         No \n     \n     \n         is.event.logged \n         Use this command to enable the logging of one or more events. \n         \n         BOOL \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#log( INFO ,  Sample Event : , true)\nselect *\ninsert into barStream;  This will log as INFO with the message \"Sample Event :\" + fooStream:events.  EXAMPLE 2  from fooStream#log( Sample Event : , true)\nselect *\ninsert into barStream;  This will logs with default log level as INFO.  EXAMPLE 3  from fooStream#log( Sample Event : , fasle)\nselect *\ninsert into barStream;  This will only log message.  EXAMPLE 4  from fooStream#log(true)\nselect *\ninsert into barStream;  This will only log fooStream:events.  EXAMPLE 5  from fooStream#log( Sample Event : )\nselect *\ninsert into barStream;  This will log message and fooStream:events.", 
            "title": "log (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#avg-aggregate-function", 
            "text": "Calculates the average for all the events.  Syntax  DOUBLE  avg( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that need to be averaged. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch\n select avg(temp) as avgTemp\n insert into barStream;  avg(temp) returns the average temp value for all the events based on their arrival and expiry.", 
            "title": "avg (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#count-aggregate-function", 
            "text": "Returns the count of all the events.  Syntax  LONG  count()  Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect count() as count\ninsert into barStream;  This will return the count of all the events for time batch in 10 seconds.", 
            "title": "count (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#distinctcount-aggregate-function", 
            "text": "Returns the count of distinct occurrences for a given arg.  Syntax  LONG  distinctCount( INT|LONG|DOUBLE|FLOAT|STRING  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be counted. \n         \n         INT LONG DOUBLE FLOAT STRING \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream\nselect distinctcount(pageID) as count\ninsert into barStream;  distinctcount(pageID) for the following output returns 3. \"WEB_PAGE_1\" \"WEB_PAGE_1\" \"WEB_PAGE_2\" \"WEB_PAGE_3\" \"WEB_PAGE_1\" \"WEB_PAGE_2\"", 
            "title": "distinctCount (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#max-aggregate-function", 
            "text": "Returns the maximum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  max( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from fooStream#window.timeBatch(10 sec)\nselect max(temp) as maxTemp\ninsert into barStream;  max(temp) returns the maximum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "max (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#maxforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  maxForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the maximum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect maxForever(temp) as max\ninsert into outputStream;  maxForever(temp) returns the maximum temp value recorded for all the events throughout the lifetime of the query.", 
            "title": "maxForever (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#min-aggregate-function", 
            "text": "Returns the minimum value for all the events.  Syntax  INT|LONG|DOUBLE|FLOAT  min( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect min(temp) as minTemp\ninsert into outputStream;  min(temp) returns the minimum temp value recorded for all the events based on their arrival and expiry.", 
            "title": "min (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#minforever-aggregate-function", 
            "text": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front.  Syntax  INT|LONG|DOUBLE|FLOAT  minForever( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be compared to find the minimum value. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect minForever(temp) as max\ninsert into outputStream;  minForever(temp) returns the minimum temp value recorded for all the events throughoutthe lifetime of the query.", 
            "title": "minForever (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#stddev-aggregate-function", 
            "text": "Returns the calculated standard deviation for all the events.  Syntax  DOUBLE  stdDev( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that should be used to calculate the standard deviation. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect stddev(temp) as stdTemp\ninsert into outputStream;  stddev(temp) returns the calculated standard deviation of temp for all the events based on their arrival and expiry.", 
            "title": "stdDev (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#sum-aggregate-function", 
            "text": "Returns the sum for all the events.  Syntax  LONG|DOUBLE  sum( INT|LONG|DOUBLE|FLOAT  arg)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         arg \n         The value that needs to be summed. \n         \n         INT LONG DOUBLE FLOAT \n         No \n         No \n       Examples  EXAMPLE 1  from inputStream\nselect sum(volume) as sumOfVolume\ninsert into outputStream;  This will returns the sum of volume values as a long value for each event arrival and expiry.", 
            "title": "sum (Aggregate Function)"
        }, 
        {
            "location": "/api/latest/#pol2cart-stream-function", 
            "text": "The pol2Cart function calculating the cartesian coordinates x  &  y for the given theta, rho coordinates and adding them as new attributes to the existing events.  Syntax  pol2Cart( DOUBLE  theta,  DOUBLE  rho,  DOUBLE  z)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         theta \n         The theta value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         rho \n         The rho value of the coordinates. \n         \n         DOUBLE \n         No \n         No \n     \n     \n         z \n         z value of the cartesian coordinates. \n         If z value is not given, drop the third parameter of the output. \n         DOUBLE \n         Yes \n         No \n       Examples  EXAMPLE 1  from PolarStream#pol2Cart(theta, rho)\nselect x, y \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748) for theta: 0.7854 and rho: 5.  EXAMPLE 2  from PolarStream#pol2Cart(theta, rho, 3.4)\nselect x, y, z \ninsert into outputStream ;  This will return cartesian coordinates (4.99953024681082, 0.06853693328228748, 3.4)for theta: 0.7854 and rho: 5 and z: 3.4.", 
            "title": "pol2Cart (Stream Function)"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#inmemory-source", 
            "text": "In-memory source that can communicate with other in-memory sinks within the same JVM, it is assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @source(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Subscribes to sent on the given topic. \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @source(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which passes the received event internally without using external transport.", 
            "title": "inMemory (Source)"
        }, 
        {
            "location": "/api/latest/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/latest/#passthrough-source-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @source(..., @map(type= passThrough )  Examples  EXAMPLE 1  @source(type= tcp , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In this example BarStream uses passThrough inputmapper which passes the received Siddhi event directly without any transformation into source.", 
            "title": "passThrough (Source Mapper)"
        }, 
        {
            "location": "/api/latest/#sink", 
            "text": "", 
            "title": "Sink"
        }, 
        {
            "location": "/api/latest/#inmemory-sink", 
            "text": "In-memory transport that can communicate with other in-memory transports within the same JVM, itis assumed that the publisher and subscriber of a topic uses same event schema (stream definition).  Syntax  @sink(type= inMemory , topic= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         topic \n         Event will be delivered to allthe subscribers of the same topic \n         \n         STRING \n         No \n         No \n       Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long)  In this example BarStream uses inMemory transport which emit the Siddhi events internally without using external transport and transformation.", 
            "title": "inMemory (Sink)"
        }, 
        {
            "location": "/api/latest/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/latest/#passthrough-sink-mapper", 
            "text": "Pass-through mapper passed events (Event[]) through without any mapping or modifications.  Syntax  @sink(..., @map(type= passThrough )  Examples  EXAMPLE 1  @sink(type= inMemory , @map(type= passThrough ),\ndefine stream BarStream (symbol string, price float, volume long);  In the following example BarStream uses passThrough outputmapper which emit Siddhi event directly without any transformation into sink.", 
            "title": "passThrough (Sink Mapper)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}